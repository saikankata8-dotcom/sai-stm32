
uart_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067ec  080067ec  000077ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080067f8  080067f8  000077f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  080067fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  2000000c  08006805  0000800c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000014c  08006805  0000814c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00008009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001184c  00000000  00000000  0000803f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e15  00000000  00000000  0001988b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000db0  00000000  00000000  0001b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a92  00000000  00000000  0001c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032a40  00000000  00000000  0001cee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001097a  00000000  00000000  0004f922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a03d  00000000  00000000  0006029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001aa2d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000039dc  00000000  00000000  001aa31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001adcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	080066d4 	.word	0x080066d4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	080066d4 	.word	0x080066d4

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb10 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f824 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f900 	bl	8000804 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000604:	f000 f86e 	bl	80006e4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f8b0 	bl	800076c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); // Toggle LED pin
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	480b      	ldr	r0, [pc, #44]	@ (800063c <main+0x48>)
 8000610:	f001 fb16 	bl	8001c40 <HAL_GPIO_TogglePin>
	  	    HAL_Delay(50); // Delay in ms (10ms = 0.5s)
 8000614:	2032      	movs	r0, #50	@ 0x32
 8000616:	f000 fbc7 	bl	8000da8 <HAL_Delay>

	  	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Toggle LED pin
 800061a:	2180      	movs	r1, #128	@ 0x80
 800061c:	4808      	ldr	r0, [pc, #32]	@ (8000640 <main+0x4c>)
 800061e:	f001 fb0f 	bl	8001c40 <HAL_GPIO_TogglePin>
	  	    HAL_Delay(50); // Delay in ms (10ms = 0.5s)
 8000622:	2032      	movs	r0, #50	@ 0x32
 8000624:	f000 fbc0 	bl	8000da8 <HAL_Delay>

	  	    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_2); // Toggle LED pin
 8000628:	2104      	movs	r1, #4
 800062a:	4806      	ldr	r0, [pc, #24]	@ (8000644 <main+0x50>)
 800062c:	f001 fb08 	bl	8001c40 <HAL_GPIO_TogglePin>
	  	    HAL_Delay(50); // Delay in ms (50ms = 0.5s)
 8000630:	2032      	movs	r0, #50	@ 0x32
 8000632:	f000 fbb9 	bl	8000da8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); // Toggle LED pin
 8000636:	bf00      	nop
 8000638:	e7e8      	b.n	800060c <main+0x18>
 800063a:	bf00      	nop
 800063c:	42020800 	.word	0x42020800
 8000640:	42020400 	.word	0x42020400
 8000644:	42021800 	.word	0x42021800

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09e      	sub	sp, #120	@ 0x78
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2260      	movs	r2, #96	@ 0x60
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f006 f810 	bl	800667c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
 800066a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800066c:	2000      	movs	r0, #0
 800066e:	f001 fb01 	bl	8001c74 <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000678:	f000 f950 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800067c:	2312      	movs	r3, #18
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800068e:	2310      	movs	r3, #16
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000692:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fb93 	bl	8001dcc <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80006ac:	f000 f936 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	231f      	movs	r3, #31
 80006b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fa59 	bl	8002b84 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f920 	bl	800091c <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3778      	adds	r7, #120	@ 0x78
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_ADC1_Init+0x80>)
 80006ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000768 <MX_ADC1_Init+0x84>)
 80006ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_ADC1_Init+0x80>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_ADC1_Init+0x80>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_ADC1_Init+0x80>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000708:	2204      	movs	r2, #4
 800070a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_ADC1_Init+0x80>)
 800070e:	2200      	movs	r2, #0
 8000710:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_ADC1_Init+0x80>)
 800071c:	2201      	movs	r2, #1
 800071e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_ADC1_Init+0x80>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000732:	2200      	movs	r2, #0
 8000734:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_ADC1_Init+0x80>)
 800073e:	2200      	movs	r2, #0
 8000740:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000744:	2200      	movs	r2, #0
 8000746:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_ADC1_Init+0x80>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <MX_ADC1_Init+0x80>)
 8000752:	f000 fc4b 	bl	8000fec <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800075c:	f000 f8de 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000028 	.word	0x20000028
 8000768:	42028000 	.word	0x42028000

0800076c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 8000772:	4a23      	ldr	r2, [pc, #140]	@ (8000800 <MX_USART1_UART_Init+0x94>)
 8000774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b4:	4811      	ldr	r0, [pc, #68]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 80007b6:	f005 fa4d 	bl	8005c54 <HAL_UART_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007c0:	f000 f8ac 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c4:	2100      	movs	r1, #0
 80007c6:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 80007c8:	f005 fe8e 	bl	80064e8 <HAL_UARTEx_SetTxFifoThreshold>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007d2:	f000 f8a3 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 80007da:	f005 fec3 	bl	8006564 <HAL_UARTEx_SetRxFifoThreshold>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007e4:	f000 f89a 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_USART1_UART_Init+0x90>)
 80007ea:	f005 fe44 	bl	8006476 <HAL_UARTEx_DisableFifoMode>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007f4:	f000 f892 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000b4 	.word	0x200000b4
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b3c      	ldr	r3, [pc, #240]	@ (800090c <MX_GPIO_Init+0x108>)
 800081c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000820:	4a3a      	ldr	r2, [pc, #232]	@ (800090c <MX_GPIO_Init+0x108>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800082a:	4b38      	ldr	r3, [pc, #224]	@ (800090c <MX_GPIO_Init+0x108>)
 800082c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000838:	4b34      	ldr	r3, [pc, #208]	@ (800090c <MX_GPIO_Init+0x108>)
 800083a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083e:	4a33      	ldr	r2, [pc, #204]	@ (800090c <MX_GPIO_Init+0x108>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000844:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000848:	4b30      	ldr	r3, [pc, #192]	@ (800090c <MX_GPIO_Init+0x108>)
 800084a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <MX_GPIO_Init+0x108>)
 8000858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085c:	4a2b      	ldr	r2, [pc, #172]	@ (800090c <MX_GPIO_Init+0x108>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000866:	4b29      	ldr	r3, [pc, #164]	@ (800090c <MX_GPIO_Init+0x108>)
 8000868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <MX_GPIO_Init+0x108>)
 8000876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800087a:	4a24      	ldr	r2, [pc, #144]	@ (800090c <MX_GPIO_Init+0x108>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000884:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_GPIO_Init+0x108>)
 8000886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	481e      	ldr	r0, [pc, #120]	@ (8000910 <MX_GPIO_Init+0x10c>)
 8000898:	f001 f9ba 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	481c      	ldr	r0, [pc, #112]	@ (8000914 <MX_GPIO_Init+0x110>)
 80008a2:	f001 f9b5 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2180      	movs	r1, #128	@ 0x80
 80008aa:	481b      	ldr	r0, [pc, #108]	@ (8000918 <MX_GPIO_Init+0x114>)
 80008ac:	f001 f9b0 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b0:	2304      	movs	r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4812      	ldr	r0, [pc, #72]	@ (8000910 <MX_GPIO_Init+0x10c>)
 80008c8:	f000 ffc2 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_GPIO_Init+0x110>)
 80008e4:	f000 ffb4 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008e8:	2380      	movs	r3, #128	@ 0x80
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <MX_GPIO_Init+0x114>)
 8000900:	f000 ffa6 	bl	8001850 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	@ 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	46020c00 	.word	0x46020c00
 8000910:	42021800 	.word	0x42021800
 8000914:	42020800 	.word	0x42020800
 8000918:	42020400 	.word	0x42020400

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <HAL_MspInit+0x34>)
 8000930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000934:	4a09      	ldr	r2, [pc, #36]	@ (800095c <HAL_MspInit+0x34>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800093e:	4b07      	ldr	r3, [pc, #28]	@ (800095c <HAL_MspInit+0x34>)
 8000940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800094c:	f001 fa1e 	bl	8001d8c <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8000950:	f001 fa2c 	bl	8001dac <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	46020c00 	.word	0x46020c00

08000960 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0ba      	sub	sp, #232	@ 0xe8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	22c0      	movs	r2, #192	@ 0xc0
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f005 fe7b 	bl	800667c <memset>
  if(hadc->Instance==ADC1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a24      	ldr	r2, [pc, #144]	@ (8000a1c <HAL_ADC_MspInit+0xbc>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d140      	bne.n	8000a12 <HAL_ADC_MspInit+0xb2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000990:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800099c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fcbb 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80009b4:	f7ff ffb2 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <HAL_ADC_MspInit+0xc0>)
 80009ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009be:	4a18      	ldr	r2, [pc, #96]	@ (8000a20 <HAL_ADC_MspInit+0xc0>)
 80009c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_ADC_MspInit+0xc0>)
 80009ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_ADC_MspInit+0xc0>)
 80009d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009dc:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_ADC_MspInit+0xc0>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_ADC_MspInit+0xc0>)
 80009e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <HAL_ADC_MspInit+0xc4>)
 8000a0e:	f000 ff1f 	bl	8001850 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a12:	bf00      	nop
 8000a14:	37e8      	adds	r7, #232	@ 0xe8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	42028000 	.word	0x42028000
 8000a20:	46020c00 	.word	0x46020c00
 8000a24:	42020800 	.word	0x42020800

08000a28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	22c0      	movs	r2, #192	@ 0xc0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 fe17 	bl	800667c <memset>
  if(huart->Instance==USART1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a26      	ldr	r2, [pc, #152]	@ (8000aec <HAL_UART_MspInit+0xc4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d145      	bne.n	8000ae4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a58:	f04f 0201 	mov.w	r2, #1
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a64:	2300      	movs	r3, #0
 8000a66:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fc59 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000a78:	f7ff ff50 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_UART_MspInit+0xc8>)
 8000a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a82:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <HAL_UART_MspInit+0xc8>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0xc8>)
 8000a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0xc8>)
 8000a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa0:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <HAL_UART_MspInit+0xc8>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_UART_MspInit+0xc8>)
 8000aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000abc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_UART_MspInit+0xcc>)
 8000ae0:	f000 feb6 	bl	8001850 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ae4:	bf00      	nop
 8000ae6:	37e8      	adds	r7, #232	@ 0xe8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013800 	.word	0x40013800
 8000af0:	46020c00 	.word	0x46020c00
 8000af4:	42020000 	.word	0x42020000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 f90b 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <SystemInit+0x68>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <SystemInit+0x68>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <SystemInit+0x6c>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <SystemInit+0x6c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <SystemInit+0x6c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <SystemInit+0x6c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <SystemInit+0x6c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <SystemInit+0x6c>)
 8000b8a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000b8e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000b92:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <SystemInit+0x6c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <SystemInit+0x6c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <SystemInit+0x6c>)
 8000ba0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ba4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <SystemInit+0x6c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <SystemInit+0x68>)
 8000bae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bb2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00
 8000bc4:	46020c00 	.word	0x46020c00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bcc:	f7ff ffc4 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bd2:	e003      	b.n	8000bdc <LoopCopyDataInit>

08000bd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bda:	3104      	adds	r1, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bdc:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000be0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000be2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000be4:	d3f6      	bcc.n	8000bd4 <CopyDataInit>
	ldr	r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000be8:	e002      	b.n	8000bf0 <LoopFillZerobss>

08000bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bec:	f842 3b04 	str.w	r3, [r2], #4

08000bf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <LoopForever+0x16>)
	cmp	r2, r3
 8000bf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bf4:	d3f9      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f005 fd49 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fcfb 	bl	80005f4 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c00:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000c04:	080067fc 	.word	0x080067fc
	ldr	r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c0c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c14:	2000014c 	.word	0x2000014c

08000c18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_Init+0x50>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a11      	ldr	r2, [pc, #68]	@ (8000c6c <HAL_Init+0x50>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 fd36 	bl	800169e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c32:	f002 f999 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_Init+0x54>)
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	f003 030f 	and.w	r3, r3, #15
 8000c40:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <HAL_Init+0x58>)
 8000c42:	5ccb      	ldrb	r3, [r1, r3]
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_Init+0x5c>)
 8000c4a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f000 fd6d 	bl	800172c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c52:	200f      	movs	r0, #15
 8000c54:	f000 f812 	bl	8000c7c <HAL_InitTick>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e002      	b.n	8000c68 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c62:	f7ff fe61 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	46020c00 	.word	0x46020c00
 8000c74:	080066ec 	.word	0x080066ec
 8000c78:	20000000 	.word	0x20000000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c88:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e05c      	b.n	8000d4e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c94:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <HAL_InitTick+0xe0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d10c      	bne.n	8000cba <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <HAL_InitTick+0xe4>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e037      	b.n	8000d2a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000cba:	f000 fd8f 	bl	80017dc <HAL_SYSTICK_GetCLKSourceConfig>
 8000cbe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d023      	beq.n	8000d0e <HAL_InitTick+0x92>
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d82d      	bhi.n	8000d28 <HAL_InitTick+0xac>
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_InitTick+0x5e>
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000cd8:	e026      	b.n	8000d28 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000cda:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <HAL_InitTick+0xe4>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000ce8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf0:	60fb      	str	r3, [r7, #12]
        break;
 8000cf2:	e01a      	b.n	8000d2a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d02:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	60fb      	str	r3, [r7, #12]
        break;
 8000d0c:	e00d      	b.n	8000d2a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d24:	60fb      	str	r3, [r7, #12]
        break;
 8000d26:	e000      	b.n	8000d2a <HAL_InitTick+0xae>
        break;
 8000d28:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 fcdc 	bl	80016e8 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e009      	b.n	8000d4e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d42:	f000 fcb7 	bl	80016b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_InitTick+0xe8>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	e000e010 	.word	0xe000e010
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000148 	.word	0x20000148

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000148 	.word	0x20000148

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <LL_ADC_SetResolution+0x3c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d104      	bne.n	8000e38 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f023 020c 	bic.w	r2, r3, #12
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60da      	str	r2, [r3, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	46021000 	.word	0x46021000

08000e58 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e66:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000e6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	d002      	beq.n	8000e8a <LL_ADC_SetGainCompensation+0x32>
 8000e84:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e88:	e000      	b.n	8000e8c <LL_ADC_SetGainCompensation+0x34>
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2107      	movs	r1, #7
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000eec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6093      	str	r3, [r2, #8]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f14:	d101      	bne.n	8000f1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f64:	d101      	bne.n	8000f6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <LL_ADC_IsEnabled+0x18>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <LL_ADC_IsEnabled+0x1a>
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d101      	bne.n	8000fb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d101      	bne.n	8000fdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e2b3      	b.n	8001574 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a8b      	ldr	r2, [pc, #556]	@ (8001248 <HAL_ADC_Init+0x25c>)
 800101a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fc9b 	bl	8000960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5f 	bl	8000f00 <LL_ADC_IsDeepPowerDownEnabled>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff45 	bl	8000edc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff7a 	bl	8000f50 <LL_ADC_IsInternalRegulatorEnabled>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff5e 	bl	8000f28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800106c:	4b77      	ldr	r3, [pc, #476]	@ (800124c <HAL_ADC_Init+0x260>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	099b      	lsrs	r3, r3, #6
 8001072:	4a77      	ldr	r2, [pc, #476]	@ (8001250 <HAL_ADC_Init+0x264>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	099b      	lsrs	r3, r3, #6
 800107a:	3301      	adds	r3, #1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001080:	e002      	b.n	8001088 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3b01      	subs	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f9      	bne.n	8001082 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff5c 	bl	8000f50 <LL_ADC_IsInternalRegulatorEnabled>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10e      	bne.n	80010bc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80010a2:	f043 0210 	orr.w	r2, r3, #16
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80010ae:	f043 0201 	orr.w	r2, r3, #1
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff6c 	bl	8000f9e <LL_ADC_REG_IsConversionOngoing>
 80010c6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 8244 	bne.w	800155e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 8240 	bne.w	800155e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80010e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80010e6:	f043 0202 	orr.w	r2, r3, #2
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff40 	bl	8000f78 <LL_ADC_IsEnabled>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d140      	bne.n	8001180 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a51      	ldr	r2, [pc, #324]	@ (8001248 <HAL_ADC_Init+0x25c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d028      	beq.n	800115a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a51      	ldr	r2, [pc, #324]	@ (8001254 <HAL_ADC_Init+0x268>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d109      	bne.n	8001126 <HAL_ADC_Init+0x13a>
 8001112:	4850      	ldr	r0, [pc, #320]	@ (8001254 <HAL_ADC_Init+0x268>)
 8001114:	f7ff ff30 	bl	8000f78 <LL_ADC_IsEnabled>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	e008      	b.n	8001138 <HAL_ADC_Init+0x14c>
 8001126:	4848      	ldr	r0, [pc, #288]	@ (8001248 <HAL_ADC_Init+0x25c>)
 8001128:	f7ff ff26 	bl	8000f78 <LL_ADC_IsEnabled>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d021      	beq.n	8001180 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a44      	ldr	r2, [pc, #272]	@ (8001254 <HAL_ADC_Init+0x268>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_ADC_Init+0x15e>
 8001146:	4a44      	ldr	r2, [pc, #272]	@ (8001258 <HAL_ADC_Init+0x26c>)
 8001148:	e000      	b.n	800114c <HAL_ADC_Init+0x160>
 800114a:	4a44      	ldr	r2, [pc, #272]	@ (800125c <HAL_ADC_Init+0x270>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4619      	mov	r1, r3
 8001152:	4610      	mov	r0, r2
 8001154:	f7ff fe4c 	bl	8000df0 <LL_ADC_SetCommonClock>
 8001158:	e012      	b.n	8001180 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4619      	mov	r1, r3
 8001164:	4610      	mov	r0, r2
 8001166:	f7ff fe57 	bl	8000e18 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800116a:	4b3c      	ldr	r3, [pc, #240]	@ (800125c <HAL_ADC_Init+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800117a:	4938      	ldr	r1, [pc, #224]	@ (800125c <HAL_ADC_Init+0x270>)
 800117c:	4313      	orrs	r3, r2
 800117e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a30      	ldr	r2, [pc, #192]	@ (8001248 <HAL_ADC_Init+0x25c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d010      	beq.n	80011ac <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001190:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001196:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800119c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80011a4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80011a6:	4313      	orrs	r3, r2
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	e030      	b.n	800120e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7f1b      	ldrb	r3, [r3, #28]
 80011b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011b8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ba:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	d002      	beq.n	80011ca <HAL_ADC_Init+0x1de>
 80011c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011c8:	e000      	b.n	80011cc <HAL_ADC_Init+0x1e0>
 80011ca:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011cc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80011d2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da04      	bge.n	80011e6 <HAL_ADC_Init+0x1fa>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011e4:	e001      	b.n	80011ea <HAL_ADC_Init+0x1fe>
 80011e6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80011ea:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4918      	ldr	r1, [pc, #96]	@ (8001254 <HAL_ADC_Init+0x268>)
 80011f2:	428b      	cmp	r3, r1
 80011f4:	d103      	bne.n	80011fe <HAL_ADC_Init+0x212>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011fc:	e003      	b.n	8001206 <HAL_ADC_Init+0x21a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001204:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001206:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001208:	6a3a      	ldr	r2, [r7, #32]
 800120a:	4313      	orrs	r3, r2
 800120c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001214:	2b01      	cmp	r3, #1
 8001216:	d12f      	bne.n	8001278 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_ADC_Init+0x25c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	3b01      	subs	r3, #1
 8001228:	045b      	lsls	r3, r3, #17
 800122a:	6a3a      	ldr	r2, [r7, #32]
 800122c:	4313      	orrs	r3, r2
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	e022      	b.n	8001278 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001238:	2b00      	cmp	r3, #0
 800123a:	d111      	bne.n	8001260 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	e018      	b.n	8001278 <HAL_ADC_Init+0x28c>
 8001246:	bf00      	nop
 8001248:	46021000 	.word	0x46021000
 800124c:	20000000 	.word	0x20000000
 8001250:	053e2d63 	.word	0x053e2d63
 8001254:	42028000 	.word	0x42028000
 8001258:	42028308 	.word	0x42028308
 800125c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001264:	f043 0220 	orr.w	r2, r3, #32
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a92      	ldr	r2, [pc, #584]	@ (80014c8 <HAL_ADC_Init+0x4dc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d018      	beq.n	80012b4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001296:	4313      	orrs	r3, r2
 8001298:	6a3a      	ldr	r2, [r7, #32]
 800129a:	4313      	orrs	r3, r2
 800129c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	4b89      	ldr	r3, [pc, #548]	@ (80014cc <HAL_ADC_Init+0x4e0>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	6a39      	ldr	r1, [r7, #32]
 80012ae:	430b      	orrs	r3, r1
 80012b0:	60d3      	str	r3, [r2, #12]
 80012b2:	e031      	b.n	8001318 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d009      	beq.n	80012d0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c8:	4313      	orrs	r3, r2
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	4b7e      	ldr	r3, [pc, #504]	@ (80014d0 <HAL_ADC_Init+0x4e4>)
 80012d8:	4013      	ands	r3, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	6a39      	ldr	r1, [r7, #32]
 80012e0:	430b      	orrs	r3, r1
 80012e2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1a      	ldr	r2, [r3, #32]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a6a      	ldr	r2, [pc, #424]	@ (80014c8 <HAL_ADC_Init+0x4dc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	f000 8093 	beq.w	800144a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe38 	bl	8000f9e <LL_ADC_REG_IsConversionOngoing>
 800132e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe45 	bl	8000fc4 <LL_ADC_INJ_IsConversionOngoing>
 800133a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d161      	bne.n	8001406 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d15e      	bne.n	8001406 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4960      	ldr	r1, [pc, #384]	@ (80014d4 <HAL_ADC_Init+0x4e8>)
 8001354:	428b      	cmp	r3, r1
 8001356:	d102      	bne.n	800135e <HAL_ADC_Init+0x372>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135c:	e002      	b.n	8001364 <HAL_ADC_Init+0x378>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001362:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001364:	4313      	orrs	r3, r2
 8001366:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	6a39      	ldr	r1, [r7, #32]
 800137c:	430b      	orrs	r3, r1
 800137e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f7ff fd60 	bl	8000e58 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d11e      	bne.n	80013e0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_ADC_Init+0x4ec>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80013b6:	0411      	lsls	r1, r2, #16
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013bc:	4311      	orrs	r1, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80013c2:	4311      	orrs	r1, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80013c8:	4311      	orrs	r1, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80013ce:	0892      	lsrs	r2, r2, #2
 80013d0:	430a      	orrs	r2, r1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	e007      	b.n	80013f0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10c      	bne.n	8001428 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	f023 010f 	bic.w	r1, r3, #15
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	631a      	str	r2, [r3, #48]	@ 0x30
 8001426:	e007      	b.n	8001438 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 020f 	bic.w	r2, r2, #15
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800143c:	f023 0303 	bic.w	r3, r3, #3
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001448:	e092      	b.n	8001570 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001450:	2b01      	cmp	r3, #1
 8001452:	d111      	bne.n	8001478 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800145c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001462:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001468:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	4313      	orrs	r3, r2
 800146e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <HAL_ADC_Init+0x4f0>)
 8001480:	4013      	ands	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	69f9      	ldr	r1, [r7, #28]
 8001488:	430b      	orrs	r3, r1
 800148a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001494:	461a      	mov	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	f7ff fd01 	bl	8000e9e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	461a      	mov	r2, r3
 80014a6:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80014aa:	f7ff fcf8 	bl	8000e9e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d114      	bne.n	80014e0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f062 020f 	orn	r2, r2, #15
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80014c6:	e024      	b.n	8001512 <HAL_ADC_Init+0x526>
 80014c8:	46021000 	.word	0x46021000
 80014cc:	fff0c013 	.word	0xfff0c013
 80014d0:	ffde800d 	.word	0xffde800d
 80014d4:	42028000 	.word	0x42028000
 80014d8:	fc00f81e 	.word	0xfc00f81e
 80014dc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80014e8:	d113      	bne.n	8001512 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	3b01      	subs	r3, #1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	f003 031c 	and.w	r3, r3, #28
 80014fc:	f06f 020f 	mvn.w	r2, #15
 8001500:	fa02 f103 	lsl.w	r1, r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_ADC_Init+0x590>)
 800151a:	4013      	ands	r3, r2
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	429a      	cmp	r2, r3
 8001520:	d10b      	bne.n	800153a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800152c:	f023 0303 	bic.w	r3, r3, #3
 8001530:	f043 0201 	orr.w	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001538:	e01a      	b.n	8001570 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800153e:	f023 0312 	bic.w	r3, r3, #18
 8001542:	f043 0210 	orr.w	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800155c:	e008      	b.n	8001570 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001562:	f043 0210 	orr.w	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001574:	4618      	mov	r0, r3
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	833ffff3 	.word	0x833ffff3

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff6a 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c2:	f7ff ff81 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 80016c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7ff ffb3 	bl	8001638 <NVIC_EncodePriority>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff82 	bl	80015e4 <__NVIC_SetPriority>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f8:	d301      	bcc.n	80016fe <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00d      	b.n	800171a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_SYSTICK_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_SYSTICK_Config+0x40>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_SYSTICK_Config+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <HAL_SYSTICK_Config+0x40>)
 8001712:	f043 0303 	orr.w	r3, r3, #3
 8001716:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b04      	cmp	r3, #4
 8001738:	d844      	bhi.n	80017c4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800173a:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001763 	.word	0x08001763
 8001744:	08001781 	.word	0x08001781
 8001748:	080017a3 	.word	0x080017a3
 800174c:	080017c5 	.word	0x080017c5
 8001750:	08001755 	.word	0x08001755
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1e      	ldr	r2, [pc, #120]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6013      	str	r3, [r2, #0]
      break;
 8001760:	e031      	b.n	80017c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001762:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1b      	ldr	r2, [pc, #108]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001774:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001776:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800177a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800177e:	e022      	b.n	80017c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001786:	f023 0304 	bic.w	r3, r3, #4
 800178a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001798:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800179c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017a0:	e011      	b.n	80017c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017b8:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017c2:	e000      	b.n	80017c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80017c4:	bf00      	nop
  }
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010
 80017d8:	46020c00 	.word	0x46020c00

080017dc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80017ee:	2304      	movs	r3, #4
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	e021      	b.n	8001838 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80017fe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001806:	d011      	beq.n	800182c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800180e:	d810      	bhi.n	8001832 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800181c:	d003      	beq.n	8001826 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800181e:	e008      	b.n	8001832 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
        break;
 8001824:	e008      	b.n	8001838 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001826:	2301      	movs	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
        break;
 800182a:	e005      	b.n	8001838 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800182c:	2302      	movs	r3, #2
 800182e:	607b      	str	r3, [r7, #4]
        break;
 8001830:	e002      	b.n	8001838 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
        break;
 8001836:	bf00      	nop
    }
  }
  return systick_source;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010
 800184c:	46020c00 	.word	0x46020c00

08001850 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	@ 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001862:	e1c2      	b.n	8001bea <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 81b2 	beq.w	8001be4 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a55      	ldr	r2, [pc, #340]	@ (80019d8 <HAL_GPIO_Init+0x188>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d15d      	bne.n	8001944 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800188e:	2201      	movs	r2, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	4013      	ands	r3, r2
 800189c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80018b8:	4a48      	ldr	r2, [pc, #288]	@ (80019dc <HAL_GPIO_Init+0x18c>)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018c0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80018c2:	4a46      	ldr	r2, [pc, #280]	@ (80019dc <HAL_GPIO_Init+0x18c>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220b      	movs	r2, #11
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	4313      	orrs	r3, r2
 8001904:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	3208      	adds	r2, #8
 800190e:	69f9      	ldr	r1, [r7, #28]
 8001910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	4013      	ands	r3, r2
 800192a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2202      	movs	r2, #2
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	4313      	orrs	r3, r2
 800193a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e067      	b.n	8001a14 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x104>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b12      	cmp	r3, #18
 8001952:	d145      	bne.n	80019e0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	4013      	ands	r3, r2
 8001976:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 020f 	and.w	r2, r3, #15
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	4313      	orrs	r3, r2
 8001990:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	69f9      	ldr	r1, [r7, #28]
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e01e      	b.n	8001a14 <HAL_GPIO_Init+0x1c4>
 80019d6:	bf00      	nop
 80019d8:	46020000 	.word	0x46020000
 80019dc:	08006744 	.word	0x08006744
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d00b      	beq.n	8001a34 <HAL_GPIO_Init+0x1e4>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a28:	2b11      	cmp	r3, #17
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b12      	cmp	r3, #18
 8001a32:	d130      	bne.n	8001a96 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f003 0201 	and.w	r2, r3, #1
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d11b      	bne.n	8001ade <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d017      	beq.n	8001ade <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d07c      	beq.n	8001be4 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001aea:	4a47      	ldr	r2, [pc, #284]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3318      	adds	r3, #24
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0a9a      	lsrs	r2, r3, #10
 8001b12:	4b3e      	ldr	r3, [pc, #248]	@ (8001c0c <HAL_GPIO_Init+0x3bc>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b26:	4938      	ldr	r1, [pc, #224]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001b34:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001b58:	4a2b      	ldr	r2, [pc, #172]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001b82:	4a21      	ldr	r2, [pc, #132]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001b88:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001bae:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_GPIO_Init+0x3b8>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f ae35 	bne.w	8001864 <HAL_GPIO_Init+0x14>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3724      	adds	r7, #36	@ 0x24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	46022000 	.word	0x46022000
 8001c0c:	002f7f7f 	.word	0x002f7f7f

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	041a      	lsls	r2, r3, #16
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43d9      	mvns	r1, r3
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	400b      	ands	r3, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001c7c:	4b39      	ldr	r3, [pc, #228]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c84:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c94:	d905      	bls.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001c96:	4b33      	ldr	r3, [pc, #204]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4a32      	ldr	r2, [pc, #200]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e057      	b.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d90a      	bls.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001cae:	4b2d      	ldr	r3, [pc, #180]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	4a2a      	ldr	r2, [pc, #168]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc0:	60d3      	str	r3, [r2, #12]
 8001cc2:	e007      	b.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001cc4:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001ccc:	4925      	ldr	r1, [pc, #148]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	@ (8001d6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	2232      	movs	r2, #50	@ 0x32
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001cf2:	e002      	b.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f3      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01b      	beq.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	2232      	movs	r2, #50	@ 0x32
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001d30:	e002      	b.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001d38:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f3      	bne.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e000      	b.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	46020800 	.word	0x46020800
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	10624dd3 	.word	0x10624dd3

08001d70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	46020800 	.word	0x46020800

08001d8c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d9a:	6113      	str	r3, [r2, #16]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	46020800 	.word	0x46020800

08001dac <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_PWREx_EnableVddA+0x1c>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_PWREx_EnableVddA+0x1c>)
 8001db6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dba:	6113      	str	r3, [r2, #16]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	46020800 	.word	0x46020800

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	@ 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f000 bec8 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4b99      	ldr	r3, [pc, #612]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	4b96      	ldr	r3, [pc, #600]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 816c 	beq.w	80020e0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_RCC_OscConfig+0x52>
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	f040 80de 	bne.w	8001fd2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	f040 80da 	bne.w	8001fd2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f000 bea5 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e30:	4b86      	ldr	r3, [pc, #536]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_RCC_OscConfig+0x7a>
 8001e3c:	4b83      	ldr	r3, [pc, #524]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001e44:	e005      	b.n	8001e52 <HAL_RCC_OscConfig+0x86>
 8001e46:	4b81      	ldr	r3, [pc, #516]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d255      	bcs.n	8001f02 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 f9d9 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f000 be82 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001e72:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4a75      	ldr	r2, [pc, #468]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e7c:	6093      	str	r3, [r2, #8]
 8001e7e:	4b73      	ldr	r3, [pc, #460]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	4970      	ldr	r1, [pc, #448]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001e98:	d309      	bcc.n	8001eae <HAL_RCC_OscConfig+0xe2>
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f023 021f 	bic.w	r2, r3, #31
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4969      	ldr	r1, [pc, #420]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
 8001eac:	e07e      	b.n	8001fac <HAL_RCC_OscConfig+0x1e0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da0a      	bge.n	8001ecc <HAL_RCC_OscConfig+0x100>
 8001eb6:	4b65      	ldr	r3, [pc, #404]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	015b      	lsls	r3, r3, #5
 8001ec4:	4961      	ldr	r1, [pc, #388]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60cb      	str	r3, [r1, #12]
 8001eca:	e06f      	b.n	8001fac <HAL_RCC_OscConfig+0x1e0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed4:	d30a      	bcc.n	8001eec <HAL_RCC_OscConfig+0x120>
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	4959      	ldr	r1, [pc, #356]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60cb      	str	r3, [r1, #12]
 8001eea:	e05f      	b.n	8001fac <HAL_RCC_OscConfig+0x1e0>
 8001eec:	4b57      	ldr	r3, [pc, #348]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	03db      	lsls	r3, r3, #15
 8001efa:	4954      	ldr	r1, [pc, #336]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
 8001f00:	e054      	b.n	8001fac <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001f02:	4b52      	ldr	r3, [pc, #328]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4a51      	ldr	r2, [pc, #324]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f0c:	6093      	str	r3, [r2, #8]
 8001f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	494c      	ldr	r1, [pc, #304]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001f28:	d309      	bcc.n	8001f3e <HAL_RCC_OscConfig+0x172>
 8001f2a:	4b48      	ldr	r3, [pc, #288]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f023 021f 	bic.w	r2, r3, #31
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4945      	ldr	r1, [pc, #276]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
 8001f3c:	e028      	b.n	8001f90 <HAL_RCC_OscConfig+0x1c4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da0a      	bge.n	8001f5c <HAL_RCC_OscConfig+0x190>
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	015b      	lsls	r3, r3, #5
 8001f54:	493d      	ldr	r1, [pc, #244]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60cb      	str	r3, [r1, #12]
 8001f5a:	e019      	b.n	8001f90 <HAL_RCC_OscConfig+0x1c4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f64:	d30a      	bcc.n	8001f7c <HAL_RCC_OscConfig+0x1b0>
 8001f66:	4b39      	ldr	r3, [pc, #228]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	4935      	ldr	r1, [pc, #212]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60cb      	str	r3, [r1, #12]
 8001f7a:	e009      	b.n	8001f90 <HAL_RCC_OscConfig+0x1c4>
 8001f7c:	4b33      	ldr	r3, [pc, #204]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	03db      	lsls	r3, r3, #15
 8001f8a:	4930      	ldr	r1, [pc, #192]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10a      	bne.n	8001fac <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 f93c 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f000 bde5 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001fac:	f001 f8de 	bl	800316c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fb0:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_RCC_OscConfig+0x284>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fe61 	bl	8000c7c <HAL_InitTick>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 808a 	beq.w	80020de <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fce:	f000 bdd2 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d066      	beq.n	80020a8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001fda:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001fe6:	f7fe fed3 	bl	8000d90 <HAL_GetTick>
 8001fea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001fec:	e009      	b.n	8002002 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fee:	f7fe fecf 	bl	8000d90 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d902      	bls.n	8002002 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f000 bdba 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0ef      	beq.n	8001fee <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800200e:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4a0e      	ldr	r2, [pc, #56]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8002014:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002018:	6093      	str	r3, [r2, #8]
 800201a:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	4909      	ldr	r1, [pc, #36]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002034:	d30e      	bcc.n	8002054 <HAL_RCC_OscConfig+0x288>
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f023 021f 	bic.w	r2, r3, #31
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4902      	ldr	r1, [pc, #8]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8002044:	4313      	orrs	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
 8002048:	e04a      	b.n	80020e0 <HAL_RCC_OscConfig+0x314>
 800204a:	bf00      	nop
 800204c:	46020c00 	.word	0x46020c00
 8002050:	20000004 	.word	0x20000004
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	2b00      	cmp	r3, #0
 800205a:	da0a      	bge.n	8002072 <HAL_RCC_OscConfig+0x2a6>
 800205c:	4b98      	ldr	r3, [pc, #608]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	4995      	ldr	r1, [pc, #596]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
 8002070:	e036      	b.n	80020e0 <HAL_RCC_OscConfig+0x314>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207a:	d30a      	bcc.n	8002092 <HAL_RCC_OscConfig+0x2c6>
 800207c:	4b90      	ldr	r3, [pc, #576]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	498d      	ldr	r1, [pc, #564]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
 8002090:	e026      	b.n	80020e0 <HAL_RCC_OscConfig+0x314>
 8002092:	4b8b      	ldr	r3, [pc, #556]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	03db      	lsls	r3, r3, #15
 80020a0:	4987      	ldr	r1, [pc, #540]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60cb      	str	r3, [r1, #12]
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80020a8:	4b85      	ldr	r3, [pc, #532]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a84      	ldr	r2, [pc, #528]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80020b4:	f7fe fe6c 	bl	8000d90 <HAL_GetTick>
 80020b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80020ba:	e009      	b.n	80020d0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020bc:	f7fe fe68 	bl	8000d90 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d902      	bls.n	80020d0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f000 bd53 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80020d0:	4b7b      	ldr	r3, [pc, #492]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ef      	bne.n	80020bc <HAL_RCC_OscConfig+0x2f0>
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 808b 	beq.w	8002204 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x334>
 80020f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d109      	bne.n	800210e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d17d      	bne.n	8002204 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f000 bd34 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x35a>
 8002118:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a68      	ldr	r2, [pc, #416]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e041      	b.n	80021aa <HAL_RCC_OscConfig+0x3de>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800212e:	d112      	bne.n	8002156 <HAL_RCC_OscConfig+0x38a>
 8002130:	4b63      	ldr	r3, [pc, #396]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a62      	ldr	r2, [pc, #392]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b60      	ldr	r3, [pc, #384]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5f      	ldr	r2, [pc, #380]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b5d      	ldr	r3, [pc, #372]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a5c      	ldr	r2, [pc, #368]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e029      	b.n	80021aa <HAL_RCC_OscConfig+0x3de>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800215e:	d112      	bne.n	8002186 <HAL_RCC_OscConfig+0x3ba>
 8002160:	4b57      	ldr	r3, [pc, #348]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a56      	ldr	r2, [pc, #344]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b54      	ldr	r3, [pc, #336]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a53      	ldr	r2, [pc, #332]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b51      	ldr	r3, [pc, #324]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a50      	ldr	r2, [pc, #320]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	e011      	b.n	80021aa <HAL_RCC_OscConfig+0x3de>
 8002186:	4b4e      	ldr	r3, [pc, #312]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a4d      	ldr	r2, [pc, #308]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b4b      	ldr	r3, [pc, #300]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a4a      	ldr	r2, [pc, #296]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b48      	ldr	r3, [pc, #288]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a47      	ldr	r2, [pc, #284]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d014      	beq.n	80021dc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80021b2:	f7fe fded 	bl	8000d90 <HAL_GetTick>
 80021b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b8:	e009      	b.n	80021ce <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ba:	f7fe fde9 	bl	8000d90 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	@ 0x64
 80021c6:	d902      	bls.n	80021ce <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f000 bcd4 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	4b3c      	ldr	r3, [pc, #240]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ef      	beq.n	80021ba <HAL_RCC_OscConfig+0x3ee>
 80021da:	e013      	b.n	8002204 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80021dc:	f7fe fdd8 	bl	8000d90 <HAL_GetTick>
 80021e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	e009      	b.n	80021f8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe fdd4 	bl	8000d90 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d902      	bls.n	80021f8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	f000 bcbf 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f8:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ef      	bne.n	80021e4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05f      	beq.n	80022d0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002212:	2b04      	cmp	r3, #4
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x456>
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d114      	bne.n	8002246 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800221c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800221e:	2b02      	cmp	r3, #2
 8002220:	d111      	bne.n	8002246 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f000 bca3 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	4920      	ldr	r1, [pc, #128]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002244:	e044      	b.n	80022d0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d024      	beq.n	8002298 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800224e:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1b      	ldr	r2, [pc, #108]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002258:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800225a:	f7fe fd99 	bl	8000d90 <HAL_GetTick>
 800225e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	e009      	b.n	8002276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe fd95 	bl	8000d90 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d902      	bls.n	8002276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	f000 bc80 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ef      	beq.n	8002262 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	490b      	ldr	r1, [pc, #44]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	610b      	str	r3, [r1, #16]
 8002296:	e01b      	b.n	80022d0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a08      	ldr	r2, [pc, #32]	@ (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022a4:	f7fe fd74 	bl	8000d90 <HAL_GetTick>
 80022a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7fe fd70 	bl	8000d90 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d904      	bls.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	f000 bc5b 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
 80022c0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c4:	4baf      	ldr	r3, [pc, #700]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ed      	bne.n	80022ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80c8 	beq.w	800246e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e4:	4ba7      	ldr	r3, [pc, #668]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d111      	bne.n	8002316 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4ba4      	ldr	r3, [pc, #656]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80022f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f8:	4aa2      	ldr	r2, [pc, #648]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002302:	4ba0      	ldr	r3, [pc, #640]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002316:	4b9c      	ldr	r3, [pc, #624]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d119      	bne.n	8002356 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002322:	4b99      	ldr	r3, [pc, #612]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	4a98      	ldr	r2, [pc, #608]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fe fd2f 	bl	8000d90 <HAL_GetTick>
 8002332:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002334:	e009      	b.n	800234a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7fe fd2b 	bl	8000d90 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d902      	bls.n	800234a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	f000 bc16 	b.w	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800234a:	4b8f      	ldr	r3, [pc, #572]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ef      	beq.n	8002336 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d05f      	beq.n	800241e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800235e:	4b89      	ldr	r3, [pc, #548]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002364:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002370:	429a      	cmp	r2, r3
 8002372:	d037      	beq.n	80023e4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e3f4      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01b      	beq.n	80023ce <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002396:	4b7b      	ldr	r3, [pc, #492]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800239c:	4a79      	ldr	r2, [pc, #484]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 800239e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80023a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80023a6:	f7fe fcf3 	bl	8000d90 <HAL_GetTick>
 80023aa:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe fcef 	bl	8000d90 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e3da      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80023c0:	4b70      	ldr	r3, [pc, #448]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80023c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ef      	bne.n	80023ae <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80023ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80023d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4969      	ldr	r1, [pc, #420]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80023e4:	4b67      	ldr	r3, [pc, #412]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80023e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ea:	4a66      	ldr	r2, [pc, #408]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80023ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80023f4:	f7fe fccc 	bl	8000d90 <HAL_GetTick>
 80023f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe fcc8 	bl	8000d90 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b05      	cmp	r3, #5
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e3b3      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800240e:	4b5d      	ldr	r3, [pc, #372]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <HAL_RCC_OscConfig+0x630>
 800241c:	e01b      	b.n	8002456 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b59      	ldr	r3, [pc, #356]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002424:	4a57      	ldr	r2, [pc, #348]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002426:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800242a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800242e:	f7fe fcaf 	bl	8000d90 <HAL_GetTick>
 8002432:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe fcab 	bl	8000d90 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b05      	cmp	r3, #5
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e396      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002448:	4b4e      	ldr	r3, [pc, #312]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 800244a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800244e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ef      	bne.n	8002436 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002456:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b49      	ldr	r3, [pc, #292]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002464:	4a47      	ldr	r2, [pc, #284]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002466:	f023 0304 	bic.w	r3, r3, #4
 800246a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8111 	beq.w	800269e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b40      	ldr	r3, [pc, #256]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b3c      	ldr	r3, [pc, #240]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002496:	4a3b      	ldr	r2, [pc, #236]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024a0:	4b38      	ldr	r3, [pc, #224]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80024b4:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d118      	bne.n	80024f2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80024c0:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fc60 	bl	8000d90 <HAL_GetTick>
 80024d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7fe fc5c 	bl	8000d90 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e347      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80024e6:	4b28      	ldr	r3, [pc, #160]	@ (8002588 <HAL_RCC_OscConfig+0x7bc>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01f      	beq.n	800253e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800250a:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 800250c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002510:	4a1c      	ldr	r2, [pc, #112]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800251a:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 800251c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002520:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800252a:	e018      	b.n	800255e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 800252e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002532:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800253c:	e00f      	b.n	800255e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002544:	4a0f      	ldr	r2, [pc, #60]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800254e:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002554:	4a0b      	ldr	r2, [pc, #44]	@ (8002584 <HAL_RCC_OscConfig+0x7b8>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d057      	beq.n	8002616 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002566:	f7fe fc13 	bl	8000d90 <HAL_GetTick>
 800256a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256c:	e00e      	b.n	800258c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe fc0f 	bl	8000d90 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d905      	bls.n	800258c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e2f8      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
 8002584:	46020c00 	.word	0x46020c00
 8002588:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	4b9c      	ldr	r3, [pc, #624]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 800258e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0e9      	beq.n	800256e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01b      	beq.n	80025de <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025a6:	4b96      	ldr	r3, [pc, #600]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80025a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ac:	4a94      	ldr	r2, [pc, #592]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80025ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fbea 	bl	8000d90 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e2d3      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80025d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ed      	beq.n	80025b8 <HAL_RCC_OscConfig+0x7ec>
 80025dc:	e053      	b.n	8002686 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025de:	4b88      	ldr	r3, [pc, #544]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80025e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e4:	4a86      	ldr	r2, [pc, #536]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80025e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fbce 	bl	8000d90 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e2b7      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002606:	4b7e      	ldr	r3, [pc, #504]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800260c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ed      	bne.n	80025f0 <HAL_RCC_OscConfig+0x824>
 8002614:	e037      	b.n	8002686 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002616:	f7fe fbbb 	bl	8000d90 <HAL_GetTick>
 800261a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fbb7 	bl	8000d90 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e2a0      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	4b72      	ldr	r3, [pc, #456]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ed      	bne.n	800261e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002642:	4b6f      	ldr	r3, [pc, #444]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01a      	beq.n	8002686 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002650:	4b6b      	ldr	r3, [pc, #428]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002656:	4a6a      	ldr	r2, [pc, #424]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800265c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe fb95 	bl	8000d90 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e27e      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002678:	4b61      	ldr	r3, [pc, #388]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 800267a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800267e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ed      	bne.n	8002662 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002686:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b5c      	ldr	r3, [pc, #368]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002694:	4a5a      	ldr	r2, [pc, #360]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d036      	beq.n	8002718 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d019      	beq.n	80026e6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80026b2:	4b53      	ldr	r3, [pc, #332]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a52      	ldr	r2, [pc, #328]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80026b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026bc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80026be:	f7fe fb67 	bl	8000d90 <HAL_GetTick>
 80026c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c6:	f7fe fb63 	bl	8000d90 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e24e      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026d8:	4b49      	ldr	r3, [pc, #292]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x8fa>
 80026e4:	e018      	b.n	8002718 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80026e6:	4b46      	ldr	r3, [pc, #280]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a45      	ldr	r2, [pc, #276]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026f0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80026f2:	f7fe fb4d 	bl	8000d90 <HAL_GetTick>
 80026f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026fa:	f7fe fb49 	bl	8000d90 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e234      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800270c:	4b3c      	ldr	r3, [pc, #240]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d036      	beq.n	8002792 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	2b00      	cmp	r3, #0
 800272a:	d019      	beq.n	8002760 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800272c:	4b34      	ldr	r3, [pc, #208]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a33      	ldr	r2, [pc, #204]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002736:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002738:	f7fe fb2a 	bl	8000d90 <HAL_GetTick>
 800273c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002740:	f7fe fb26 	bl	8000d90 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e211      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002752:	4b2b      	ldr	r3, [pc, #172]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x974>
 800275e:	e018      	b.n	8002792 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002760:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a26      	ldr	r2, [pc, #152]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800276a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800276c:	f7fe fb10 	bl	8000d90 <HAL_GetTick>
 8002770:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002774:	f7fe fb0c 	bl	8000d90 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1f7      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002786:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d07f      	beq.n	800289e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d062      	beq.n	800286c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80027a6:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	4a15      	ldr	r2, [pc, #84]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027b0:	6093      	str	r3, [r2, #8]
 80027b2:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	4910      	ldr	r1, [pc, #64]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80027cc:	d309      	bcc.n	80027e2 <HAL_RCC_OscConfig+0xa16>
 80027ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 021f 	bic.w	r2, r3, #31
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4909      	ldr	r1, [pc, #36]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	60cb      	str	r3, [r1, #12]
 80027e0:	e02a      	b.n	8002838 <HAL_RCC_OscConfig+0xa6c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da0c      	bge.n	8002804 <HAL_RCC_OscConfig+0xa38>
 80027ea:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	015b      	lsls	r3, r3, #5
 80027f8:	4901      	ldr	r1, [pc, #4]	@ (8002800 <HAL_RCC_OscConfig+0xa34>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60cb      	str	r3, [r1, #12]
 80027fe:	e01b      	b.n	8002838 <HAL_RCC_OscConfig+0xa6c>
 8002800:	46020c00 	.word	0x46020c00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800280c:	d30a      	bcc.n	8002824 <HAL_RCC_OscConfig+0xa58>
 800280e:	4ba1      	ldr	r3, [pc, #644]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	029b      	lsls	r3, r3, #10
 800281c:	499d      	ldr	r1, [pc, #628]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	60cb      	str	r3, [r1, #12]
 8002822:	e009      	b.n	8002838 <HAL_RCC_OscConfig+0xa6c>
 8002824:	4b9b      	ldr	r3, [pc, #620]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	03db      	lsls	r3, r3, #15
 8002832:	4998      	ldr	r1, [pc, #608]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002838:	4b96      	ldr	r3, [pc, #600]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a95      	ldr	r2, [pc, #596]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002844:	f7fe faa4 	bl	8000d90 <HAL_GetTick>
 8002848:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800284c:	f7fe faa0 	bl	8000d90 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e18b      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800285e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xa80>
 800286a:	e018      	b.n	800289e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800286c:	4b89      	ldr	r3, [pc, #548]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a88      	ldr	r2, [pc, #544]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002872:	f023 0310 	bic.w	r3, r3, #16
 8002876:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002878:	f7fe fa8a 	bl	8000d90 <HAL_GetTick>
 800287c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002880:	f7fe fa86 	bl	8000d90 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e171      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002892:	4b80      	ldr	r3, [pc, #512]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8166 	beq.w	8002b74 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ae:	4b79      	ldr	r3, [pc, #484]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	f000 80f2 	beq.w	8002aa0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	f040 80c5 	bne.w	8002a50 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b73      	ldr	r3, [pc, #460]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a72      	ldr	r2, [pc, #456]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80028cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80028d2:	f7fe fa5d 	bl	8000d90 <HAL_GetTick>
 80028d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe fa59 	bl	8000d90 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e144      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028ec:	4b69      	ldr	r3, [pc, #420]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f8:	4b66      	ldr	r3, [pc, #408]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d111      	bne.n	800292a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4b63      	ldr	r3, [pc, #396]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800290c:	4a61      	ldr	r2, [pc, #388]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002916:	4b5f      	ldr	r3, [pc, #380]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800292a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a98 <HAL_RCC_OscConfig+0xccc>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002932:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002936:	d102      	bne.n	800293e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800293e:	4b56      	ldr	r3, [pc, #344]	@ (8002a98 <HAL_RCC_OscConfig+0xccc>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4a55      	ldr	r2, [pc, #340]	@ (8002a98 <HAL_RCC_OscConfig+0xccc>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002948:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800294a:	4b52      	ldr	r3, [pc, #328]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800295e:	3a01      	subs	r2, #1
 8002960:	0212      	lsls	r2, r2, #8
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002968:	430a      	orrs	r2, r1
 800296a:	494a      	ldr	r1, [pc, #296]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 800296c:	4313      	orrs	r3, r2
 800296e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002970:	4b48      	ldr	r3, [pc, #288]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002974:	4b49      	ldr	r3, [pc, #292]	@ (8002a9c <HAL_RCC_OscConfig+0xcd0>)
 8002976:	4013      	ands	r3, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800297c:	3a01      	subs	r2, #1
 800297e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002986:	3a01      	subs	r2, #1
 8002988:	0252      	lsls	r2, r2, #9
 800298a:	b292      	uxth	r2, r2
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002992:	3a01      	subs	r2, #1
 8002994:	0412      	lsls	r2, r2, #16
 8002996:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80029a0:	3a01      	subs	r2, #1
 80029a2:	0612      	lsls	r2, r2, #24
 80029a4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80029a8:	430a      	orrs	r2, r1
 80029aa:	493a      	ldr	r1, [pc, #232]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80029b0:	4b38      	ldr	r3, [pc, #224]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	4a37      	ldr	r2, [pc, #220]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029b6:	f023 0310 	bic.w	r3, r3, #16
 80029ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	4a34      	ldr	r2, [pc, #208]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80029c6:	4b33      	ldr	r3, [pc, #204]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	4a32      	ldr	r2, [pc, #200]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029cc:	f043 0310 	orr.w	r3, r3, #16
 80029d0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80029d2:	4b30      	ldr	r3, [pc, #192]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	f023 020c 	bic.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	492d      	ldr	r1, [pc, #180]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80029e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80029ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002a98 <HAL_RCC_OscConfig+0xccc>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a29      	ldr	r2, [pc, #164]	@ (8002a98 <HAL_RCC_OscConfig+0xccc>)
 80029f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80029f8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a06:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a1c:	f7fe f9b8 	bl	8000d90 <HAL_GetTick>
 8002a20:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe f9b4 	bl	8000d90 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e09f      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a36:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a46:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a4c:	6293      	str	r3, [r2, #40]	@ 0x28
 8002a4e:	e091      	b.n	8002b74 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a5c:	f7fe f998 	bl	8000d90 <HAL_GetTick>
 8002a60:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe f994 	bl	8000d90 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e07f      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a76:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	4a03      	ldr	r2, [pc, #12]	@ (8002a94 <HAL_RCC_OscConfig+0xcc8>)
 8002a88:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002a8c:	f023 0303 	bic.w	r3, r3, #3
 8002a90:	6293      	str	r3, [r2, #40]	@ 0x28
 8002a92:	e06f      	b.n	8002b74 <HAL_RCC_OscConfig+0xda8>
 8002a94:	46020c00 	.word	0x46020c00
 8002a98:	46020800 	.word	0x46020800
 8002a9c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002aa0:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002aa6:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aaa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d039      	beq.n	8002b28 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d132      	bne.n	8002b28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d129      	bne.n	8002b28 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d122      	bne.n	8002b28 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aec:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d11a      	bne.n	8002b28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	0a5b      	lsrs	r3, r3, #9
 8002af6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d111      	bne.n	8002b28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	0e1b      	lsrs	r3, r3, #24
 8002b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b22:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e024      	b.n	8002b76 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b2c:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d01a      	beq.n	8002b74 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002b44:	f023 0310 	bic.w	r3, r3, #16
 8002b48:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe f921 	bl	8000d90 <HAL_GetTick>
 8002b4e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002b50:	bf00      	nop
 8002b52:	f7fe f91d 	bl	8000d90 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d0f9      	beq.n	8002b52 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	4a07      	ldr	r2, [pc, #28]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <HAL_RCC_OscConfig+0xdb4>)
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3738      	adds	r7, #56	@ 0x38
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	46020c00 	.word	0x46020c00

08002b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e1d9      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b98:	4b9b      	ldr	r3, [pc, #620]	@ (8002e08 <HAL_RCC_ClockConfig+0x284>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d910      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b98      	ldr	r3, [pc, #608]	@ (8002e08 <HAL_RCC_ClockConfig+0x284>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 020f 	bic.w	r2, r3, #15
 8002bae:	4996      	ldr	r1, [pc, #600]	@ (8002e08 <HAL_RCC_ClockConfig+0x284>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b94      	ldr	r3, [pc, #592]	@ (8002e08 <HAL_RCC_ClockConfig+0x284>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e1c1      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d908      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002be4:	4b89      	ldr	r3, [pc, #548]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	4986      	ldr	r1, [pc, #536]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d012      	beq.n	8002c28 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	4b81      	ldr	r3, [pc, #516]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d909      	bls.n	8002c28 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002c14:	4b7d      	ldr	r3, [pc, #500]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	497a      	ldr	r1, [pc, #488]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	4b74      	ldr	r3, [pc, #464]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d908      	bls.n	8002c56 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002c44:	4b71      	ldr	r3, [pc, #452]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	496e      	ldr	r1, [pc, #440]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d010      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	4b69      	ldr	r3, [pc, #420]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d908      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002c72:	4b66      	ldr	r3, [pc, #408]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f023 020f 	bic.w	r2, r3, #15
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	4963      	ldr	r1, [pc, #396]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80d2 	beq.w	8002e36 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d143      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d110      	bne.n	8002cce <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	4b57      	ldr	r3, [pc, #348]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb2:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002cbc:	4b53      	ldr	r3, [pc, #332]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002cce:	f7fe f85f 	bl	8000d90 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e10 <HAL_RCC_ClockConfig+0x28c>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00f      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002ce2:	f7fe f855 	bl	8000d90 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e12b      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002cf4:	4b46      	ldr	r3, [pc, #280]	@ (8002e10 <HAL_RCC_ClockConfig+0x28c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b41      	ldr	r3, [pc, #260]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d16:	4b3d      	ldr	r3, [pc, #244]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d121      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e112      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2e:	4b37      	ldr	r3, [pc, #220]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e106      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002d46:	4b31      	ldr	r3, [pc, #196]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0fa      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d56:	4b2d      	ldr	r3, [pc, #180]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0f2      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b29      	ldr	r3, [pc, #164]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4926      	ldr	r1, [pc, #152]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002d78:	f7fe f80a 	bl	8000d90 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe f802 	bl	8000d90 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0d6      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x204>
 8002daa:	e044      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d112      	bne.n	8002dda <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db6:	f7fd ffeb 	bl	8000d90 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0bf      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x232>
 8002dd8:	e02d      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d123      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fd ffd4 	bl	8000d90 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0a8      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dfa:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <HAL_RCC_ClockConfig+0x288>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ee      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x260>
 8002e06:	e016      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2b2>
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	46020c00 	.word	0x46020c00
 8002e10:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7fd ffbc 	bl	8000d90 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e090      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1ee      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b43      	ldr	r3, [pc, #268]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d208      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002e52:	4b40      	ldr	r3, [pc, #256]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	493d      	ldr	r1, [pc, #244]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <HAL_RCC_ClockConfig+0x3d4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d210      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b39      	ldr	r3, [pc, #228]	@ (8002f58 <HAL_RCC_ClockConfig+0x3d4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4937      	ldr	r1, [pc, #220]	@ (8002f58 <HAL_RCC_ClockConfig+0x3d4>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <HAL_RCC_ClockConfig+0x3d4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e05b      	b.n	8002f4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d208      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4925      	ldr	r1, [pc, #148]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	4b20      	ldr	r3, [pc, #128]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d209      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4919      	ldr	r1, [pc, #100]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	4b13      	ldr	r3, [pc, #76]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d208      	bcs.n	8002f22 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	490d      	ldr	r1, [pc, #52]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f22:	f000 f821 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_RCC_ClockConfig+0x3d0>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	490a      	ldr	r1, [pc, #40]	@ (8002f5c <HAL_RCC_ClockConfig+0x3d8>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	4a09      	ldr	r2, [pc, #36]	@ (8002f60 <HAL_RCC_ClockConfig+0x3dc>)
 8002f3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <HAL_RCC_ClockConfig+0x3e0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fe9b 	bl	8000c7c <HAL_InitTick>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	46020c00 	.word	0x46020c00
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	080066ec 	.word	0x080066ec
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20000004 	.word	0x20000004

08002f68 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b08b      	sub	sp, #44	@ 0x2c
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f76:	4b78      	ldr	r3, [pc, #480]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f80:	4b75      	ldr	r3, [pc, #468]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x34>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d121      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d11e      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002f9c:	4b6e      	ldr	r3, [pc, #440]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fae:	0b1b      	lsrs	r3, r3, #12
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002fb8:	4b67      	ldr	r3, [pc, #412]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	0f1b      	lsrs	r3, r3, #28
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fc4:	4a65      	ldr	r2, [pc, #404]	@ (800315c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d110      	bne.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fd8:	e00d      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fda:	4b5f      	ldr	r3, [pc, #380]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	e004      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002ff4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f040 80a5 	bne.w	8003148 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ffe:	4b56      	ldr	r3, [pc, #344]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003008:	4b53      	ldr	r3, [pc, #332]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	3301      	adds	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003016:	4b50      	ldr	r3, [pc, #320]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003022:	4b4d      	ldr	r3, [pc, #308]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	08db      	lsrs	r3, r3, #3
 8003028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d003      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0xe4>
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d022      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x128>
 800304a:	e043      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x1fc>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800306e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003072:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003168 <HAL_RCC_GetSysClockFreq+0x200>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800307e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800308e:	e046      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x1fc>
 800309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030b2:	ed97 6a01 	vldr	s12, [r7, #4]
 80030b6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003168 <HAL_RCC_GetSysClockFreq+0x200>
 80030ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030d2:	e024      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	ee07 3a90 	vmov	s15, r3
 80030e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80030ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030fc:	ed97 6a01 	vldr	s12, [r7, #4]
 8003100:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003168 <HAL_RCC_GetSysClockFreq+0x200>
 8003104:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003108:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800310c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003110:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800311c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003122:	0e1b      	lsrs	r3, r3, #24
 8003124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003128:	3301      	adds	r3, #1
 800312a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003136:	edd7 6a07 	vldr	s13, [r7, #28]
 800313a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800313e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003142:	ee17 3a90 	vmov	r3, s15
 8003146:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003148:	6a3b      	ldr	r3, [r7, #32]
}
 800314a:	4618      	mov	r0, r3
 800314c:	372c      	adds	r7, #44	@ 0x2c
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	46020c00 	.word	0x46020c00
 800315c:	08006704 	.word	0x08006704
 8003160:	00f42400 	.word	0x00f42400
 8003164:	4b742400 	.word	0x4b742400
 8003168:	46000000 	.word	0x46000000

0800316c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003170:	f7ff fefa 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <HAL_RCC_GetHCLKFreq+0x28>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	4906      	ldr	r1, [pc, #24]	@ (8003198 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <HAL_RCC_GetHCLKFreq+0x30>)
 8003188:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800318a:	4b04      	ldr	r3, [pc, #16]	@ (800319c <HAL_RCC_GetHCLKFreq+0x30>)
 800318c:	681b      	ldr	r3, [r3, #0]
}
 800318e:	4618      	mov	r0, r3
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	46020c00 	.word	0x46020c00
 8003198:	080066ec 	.word	0x080066ec
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80031a4:	f7ff ffe2 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	@ (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	46020c00 	.word	0x46020c00
 80031c4:	080066fc 	.word	0x080066fc

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80031cc:	f7ff ffce 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	@ (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	46020c00 	.word	0x46020c00
 80031ec:	080066fc 	.word	0x080066fc

080031f0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80031f4:	f7ff ffba 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_RCC_GetPCLK3Freq+0x20>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	@ (8003214 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	46020c00 	.word	0x46020c00
 8003214:	080066fc 	.word	0x080066fc

08003218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003220:	4b3e      	ldr	r3, [pc, #248]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800322e:	f7fe fd9f 	bl	8001d70 <HAL_PWREx_GetVoltageRange>
 8003232:	6178      	str	r0, [r7, #20]
 8003234:	e019      	b.n	800326a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	4b39      	ldr	r3, [pc, #228]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800323c:	4a37      	ldr	r2, [pc, #220]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003246:	4b35      	ldr	r3, [pc, #212]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003254:	f7fe fd8c 	bl	8001d70 <HAL_PWREx_GetVoltageRange>
 8003258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b30      	ldr	r3, [pc, #192]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800325c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003260:	4a2e      	ldr	r2, [pc, #184]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003262:	f023 0304 	bic.w	r3, r3, #4
 8003266:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003270:	d003      	beq.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003278:	d109      	bne.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003280:	d202      	bcs.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003282:	2301      	movs	r3, #1
 8003284:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003286:	e033      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800328c:	e030      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003294:	d208      	bcs.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d102      	bne.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800329e:	2303      	movs	r3, #3
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	e025      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e035      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ae:	d90f      	bls.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032bc:	d902      	bls.n	80032c4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e015      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80032c4:	2301      	movs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e012      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	e00f      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d6:	d109      	bne.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032de:	d102      	bne.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80032e0:	2301      	movs	r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e004      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80032e6:	2302      	movs	r3, #2
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e001      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80032ec:	2301      	movs	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 020f 	bic.w	r2, r3, #15
 80032f8:	4909      	ldr	r1, [pc, #36]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003300:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	46020c00 	.word	0x46020c00
 8003320:	40022000 	.word	0x40022000

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003328:	b0b8      	sub	sp, #224	@ 0xe0
 800332a:	af00      	add	r7, sp, #0
 800332c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003330:	2300      	movs	r3, #0
 8003332:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003336:	2300      	movs	r3, #0
 8003338:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f002 0401 	and.w	r4, r2, #1
 8003348:	2500      	movs	r5, #0
 800334a:	ea54 0305 	orrs.w	r3, r4, r5
 800334e:	d00b      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003350:	4bca      	ldr	r3, [pc, #808]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003356:	f023 0103 	bic.w	r1, r3, #3
 800335a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800335e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003360:	4ac6      	ldr	r2, [pc, #792]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003362:	430b      	orrs	r3, r1
 8003364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f002 0802 	and.w	r8, r2, #2
 8003374:	f04f 0900 	mov.w	r9, #0
 8003378:	ea58 0309 	orrs.w	r3, r8, r9
 800337c:	d00b      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800337e:	4bbf      	ldr	r3, [pc, #764]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003384:	f023 010c 	bic.w	r1, r3, #12
 8003388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800338c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338e:	4abb      	ldr	r2, [pc, #748]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003390:	430b      	orrs	r3, r1
 8003392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f002 0a04 	and.w	sl, r2, #4
 80033a2:	f04f 0b00 	mov.w	fp, #0
 80033a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80033aa:	d00b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80033ac:	4bb3      	ldr	r3, [pc, #716]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80033b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	4aaf      	ldr	r2, [pc, #700]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033be:	430b      	orrs	r3, r1
 80033c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 0308 	and.w	r3, r2, #8
 80033d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d00b      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80033e4:	4ba5      	ldr	r3, [pc, #660]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	4aa1      	ldr	r2, [pc, #644]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033f6:	430b      	orrs	r3, r1
 80033f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 0310 	and.w	r3, r2, #16
 8003408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003412:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	d00b      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800341c:	4b97      	ldr	r3, [pc, #604]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800341e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003422:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003426:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800342a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342c:	4a93      	ldr	r2, [pc, #588]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800342e:	430b      	orrs	r3, r1
 8003430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f002 0320 	and.w	r3, r2, #32
 8003440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800344a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800344e:	460b      	mov	r3, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	d00b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003454:	4b89      	ldr	r3, [pc, #548]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800345a:	f023 0107 	bic.w	r1, r3, #7
 800345e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003464:	4a85      	ldr	r2, [pc, #532]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003466:	430b      	orrs	r3, r1
 8003468:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800346c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003482:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d00b      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800348c:	4b7b      	ldr	r3, [pc, #492]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800348e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003492:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003496:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800349a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800349c:	4a77      	ldr	r2, [pc, #476]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80034b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034ba:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d00b      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80034c4:	4b6d      	ldr	r3, [pc, #436]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80034c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d4:	4a69      	ldr	r2, [pc, #420]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80034e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80034f6:	460b      	mov	r3, r1
 80034f8:	4313      	orrs	r3, r2
 80034fa:	d00b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80034fc:	4b5f      	ldr	r3, [pc, #380]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80034fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003502:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800350e:	430b      	orrs	r3, r1
 8003510:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800352a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800352e:	460b      	mov	r3, r1
 8003530:	4313      	orrs	r3, r2
 8003532:	d00b      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003534:	4b51      	ldr	r3, [pc, #324]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800353a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800353e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003544:	4a4d      	ldr	r2, [pc, #308]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003546:	430b      	orrs	r3, r1
 8003548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800354c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003562:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003566:	460b      	mov	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	d00b      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800356c:	4b43      	ldr	r3, [pc, #268]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800356e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003572:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800357a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800357c:	4a3f      	ldr	r2, [pc, #252]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800357e:	430b      	orrs	r3, r1
 8003580:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003590:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003594:	2300      	movs	r3, #0
 8003596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800359a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800359e:	460b      	mov	r3, r1
 80035a0:	4313      	orrs	r3, r2
 80035a2:	d00b      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80035a4:	4b35      	ldr	r3, [pc, #212]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035aa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80035ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035b4:	4a31      	ldr	r2, [pc, #196]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035b6:	430b      	orrs	r3, r1
 80035b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80035bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035ca:	2300      	movs	r3, #0
 80035cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035ce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d00c      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80035d8:	4b28      	ldr	r3, [pc, #160]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ea:	4a24      	ldr	r2, [pc, #144]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80035fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003600:	2300      	movs	r3, #0
 8003602:	677b      	str	r3, [r7, #116]	@ 0x74
 8003604:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003608:	460b      	mov	r3, r1
 800360a:	4313      	orrs	r3, r2
 800360c:	d04f      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800360e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003616:	2b80      	cmp	r3, #128	@ 0x80
 8003618:	d02d      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d827      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800361e:	2b60      	cmp	r3, #96	@ 0x60
 8003620:	d02e      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003622:	2b60      	cmp	r3, #96	@ 0x60
 8003624:	d823      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003626:	2b40      	cmp	r3, #64	@ 0x40
 8003628:	d006      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d81f      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003632:	2b20      	cmp	r3, #32
 8003634:	d011      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003636:	e01a      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	4a0f      	ldr	r2, [pc, #60]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003642:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003644:	e01d      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800364a:	3308      	adds	r3, #8
 800364c:	4618      	mov	r0, r3
 800364e:	f002 f9d1 	bl	80059f4 <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003658:	e013      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800365a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800365e:	332c      	adds	r3, #44	@ 0x2c
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fa5f 	bl	8005b24 <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800366c:	e009      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003674:	e005      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8003676:	bf00      	nop
 8003678:	e003      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800367a:	bf00      	nop
 800367c:	46020c00 	.word	0x46020c00
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800368a:	4bb6      	ldr	r3, [pc, #728]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800368c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003690:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	4ab1      	ldr	r2, [pc, #708]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80036aa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036bc:	2300      	movs	r3, #0
 80036be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d053      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80036ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d6:	d033      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036dc:	d82c      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80036de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e2:	d02f      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80036e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e8:	d826      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80036ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ee:	d008      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f4:	d820      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fe:	d011      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003700:	e01a      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003702:	4b98      	ldr	r3, [pc, #608]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	4a97      	ldr	r2, [pc, #604]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800370e:	e01a      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003714:	3308      	adds	r3, #8
 8003716:	4618      	mov	r0, r3
 8003718:	f002 f96c 	bl	80059f4 <RCCEx_PLL2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003722:	e010      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003728:	332c      	adds	r3, #44	@ 0x2c
 800372a:	4618      	mov	r0, r3
 800372c:	f002 f9fa 	bl	8005b24 <RCCEx_PLL3_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003736:	e006      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800373e:	e002      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003746:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800374e:	4b85      	ldr	r3, [pc, #532]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003754:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800375c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003760:	4a80      	ldr	r2, [pc, #512]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003762:	430b      	orrs	r3, r1
 8003764:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003768:	e003      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800376e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800377e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003780:	2300      	movs	r3, #0
 8003782:	667b      	str	r3, [r7, #100]	@ 0x64
 8003784:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d046      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800378e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003796:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800379a:	d028      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800379c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80037a0:	d821      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80037a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a6:	d022      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ac:	d81b      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80037ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037b2:	d01c      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037b8:	d815      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c4:	d80f      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ce:	d00e      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037d0:	e009      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037d6:	3308      	adds	r3, #8
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 f90b 	bl	80059f4 <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80037e4:	e004      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80037ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80037f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80037fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037fe:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800380a:	4a56      	ldr	r2, [pc, #344]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800380c:	430b      	orrs	r3, r1
 800380e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003812:	e003      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003818:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800381c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003828:	65bb      	str	r3, [r7, #88]	@ 0x58
 800382a:	2300      	movs	r3, #0
 800382c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800382e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d03f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003840:	2b04      	cmp	r3, #4
 8003842:	d81e      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003844:	a201      	add	r2, pc, #4	@ (adr r2, 800384c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	0800388b 	.word	0x0800388b
 8003850:	08003861 	.word	0x08003861
 8003854:	0800386f 	.word	0x0800386f
 8003858:	0800388b 	.word	0x0800388b
 800385c:	0800388b 	.word	0x0800388b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003860:	4b40      	ldr	r3, [pc, #256]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	4a3f      	ldr	r2, [pc, #252]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800386c:	e00e      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800386e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003872:	332c      	adds	r3, #44	@ 0x2c
 8003874:	4618      	mov	r0, r3
 8003876:	f002 f955 	bl	8005b24 <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003880:	e004      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003888:	e000      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800388a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800388c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003894:	4b33      	ldr	r3, [pc, #204]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003896:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800389a:	f023 0107 	bic.w	r1, r3, #7
 800389e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80038b4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80038b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80038c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c6:	2300      	movs	r3, #0
 80038c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d04d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80038d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e0:	d028      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80038e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e6:	d821      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80038e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ec:	d024      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80038ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038f2:	d81b      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80038f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038f8:	d00e      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80038fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038fe:	d815      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003908:	d110      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800390a:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003914:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003916:	e012      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800391c:	332c      	adds	r3, #44	@ 0x2c
 800391e:	4618      	mov	r0, r3
 8003920:	f002 f900 	bl	8005b24 <RCCEx_PLL3_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800392a:	e008      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003932:	e004      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003934:	bf00      	nop
 8003936:	e002      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800393c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800393e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003942:	2b00      	cmp	r3, #0
 8003944:	d110      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003946:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800394c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003958:	4a02      	ldr	r2, [pc, #8]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800395a:	430b      	orrs	r3, r1
 800395c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003962:	bf00      	nop
 8003964:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800396c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800397c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800397e:	2300      	movs	r3, #0
 8003980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003982:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003986:	460b      	mov	r3, r1
 8003988:	4313      	orrs	r3, r2
 800398a:	f000 80b5 	beq.w	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003994:	4b9d      	ldr	r3, [pc, #628]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d113      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	4b9a      	ldr	r3, [pc, #616]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a8:	4a98      	ldr	r2, [pc, #608]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80039aa:	f043 0304 	orr.w	r3, r3, #4
 80039ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80039b2:	4b96      	ldr	r3, [pc, #600]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039ca:	4b91      	ldr	r3, [pc, #580]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	4a90      	ldr	r2, [pc, #576]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039d6:	f7fd f9db 	bl	8000d90 <HAL_GetTick>
 80039da:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039de:	e00b      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e0:	f7fd f9d6 	bl	8000d90 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d903      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80039f6:	e005      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039f8:	4b85      	ldr	r3, [pc, #532]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ed      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8003a04:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d165      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a0c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d023      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003a22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a26:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01b      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a32:	4b76      	ldr	r3, [pc, #472]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a40:	4b72      	ldr	r3, [pc, #456]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a46:	4a71      	ldr	r2, [pc, #452]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a50:	4b6e      	ldr	r3, [pc, #440]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a56:	4a6d      	ldr	r2, [pc, #436]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a60:	4a6a      	ldr	r2, [pc, #424]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d019      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd f98b 	bl	8000d90 <HAL_GetTick>
 8003a7a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7e:	e00d      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fd f986 	bl	8000d90 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d903      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8003a9a:	e006      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ea      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8003aaa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003ab2:	4b56      	ldr	r3, [pc, #344]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ab8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ac0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ac4:	4a51      	ldr	r2, [pc, #324]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ace:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003ad2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003adc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae0:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae8:	4b48      	ldr	r3, [pc, #288]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aee:	4a47      	ldr	r2, [pc, #284]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003af8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b06:	2300      	movs	r3, #0
 8003b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	d042      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b1c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b20:	d022      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003b22:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b26:	d81b      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b2c:	d011      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b32:	d815      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b3c:	d110      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b42:	3308      	adds	r3, #8
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 ff55 	bl	80059f4 <RCCEx_PLL2_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003b50:	e00d      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b52:	4b2e      	ldr	r3, [pc, #184]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b56:	4a2d      	ldr	r2, [pc, #180]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003b5e:	e006      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003b66:	e002      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8003b6c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b6e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003b76:	4b25      	ldr	r3, [pc, #148]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b7c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003b80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b88:	4a20      	ldr	r2, [pc, #128]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b96:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ba8:	2300      	movs	r3, #0
 8003baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d032      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc8:	d804      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd2:	d007      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003bda:	e004      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003bdc:	bf00      	nop
 8003bde:	e002      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003be0:	bf00      	nop
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003be4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003be6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d112      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003bee:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003bf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bf4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c00:	4a02      	ldr	r2, [pc, #8]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c08:	e008      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8003c0a:	bf00      	nop
 8003c0c:	46020c00 	.word	0x46020c00
 8003c10:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003c18:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d019      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c44:	d105      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c46:	4b88      	ldr	r3, [pc, #544]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	4a87      	ldr	r2, [pc, #540]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c50:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003c52:	4b85      	ldr	r3, [pc, #532]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c58:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c64:	4a80      	ldr	r2, [pc, #512]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003c66:	430b      	orrs	r3, r1
 8003c68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c82:	460b      	mov	r3, r1
 8003c84:	4313      	orrs	r3, r2
 8003c86:	d00c      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003c88:	4b77      	ldr	r3, [pc, #476]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c9a:	4973      	ldr	r1, [pc, #460]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003ca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cd0:	4965      	ldr	r1, [pc, #404]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d00c      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cfa:	f023 0218 	bic.w	r2, r3, #24
 8003cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d06:	4958      	ldr	r1, [pc, #352]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d032      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d36:	d105      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d38:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d42:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d50:	d108      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d56:	3308      	adds	r3, #8
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f001 fe4b 	bl	80059f4 <RCCEx_PLL2_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8003d64:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d7e:	493a      	ldr	r1, [pc, #232]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d8c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003da6:	460b      	mov	r3, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	d03a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003db8:	d00e      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003dba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dbe:	d815      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d017      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dc8:	d110      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dca:	4b27      	ldr	r3, [pc, #156]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	4a26      	ldr	r2, [pc, #152]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003dd6:	e00e      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ddc:	3308      	adds	r3, #8
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fe08 	bl	80059f4 <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003dea:	e004      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8003df4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003df6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e10:	4915      	ldr	r1, [pc, #84]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003e18:	e003      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e1e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	2300      	movs	r3, #0
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	d00c      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e44:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e50:	4905      	ldr	r1, [pc, #20]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003e58:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	37e0      	adds	r7, #224	@ 0xe0
 8003e60:	46bd      	mov	sp, r7
 8003e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e66:	bf00      	nop
 8003e68:	46020c00 	.word	0x46020c00

08003e6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	@ 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003e74:	4ba6      	ldr	r3, [pc, #664]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e7e:	4ba4      	ldr	r3, [pc, #656]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003e88:	4ba1      	ldr	r3, [pc, #644]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	3301      	adds	r3, #1
 8003e94:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003e96:	4b9e      	ldr	r3, [pc, #632]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ea2:	4b9b      	ldr	r3, [pc, #620]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d062      	beq.n	8003f8a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	f200 8081 	bhi.w	8003fce <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d024      	beq.n	8003f1c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d17a      	bne.n	8003fce <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eea:	4b89      	ldr	r3, [pc, #548]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003efe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004118 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f1a:	e08f      	b.n	800403c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003f1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003f28:	4b79      	ldr	r3, [pc, #484]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	0f1b      	lsrs	r3, r3, #28
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	e006      	b.n	8003f42 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003f34:	4b76      	ldr	r3, [pc, #472]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	0f1b      	lsrs	r3, r3, #28
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	4a76      	ldr	r2, [pc, #472]	@ (800411c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f68:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f6c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004118 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f88:	e058      	b.n	800403c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f94:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fac:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fb0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004118 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003fb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fcc:	e036      	b.n	800403c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003fce:	4b50      	ldr	r3, [pc, #320]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003fda:	4b4d      	ldr	r3, [pc, #308]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0f1b      	lsrs	r3, r3, #28
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	0f1b      	lsrs	r3, r3, #28
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	4a49      	ldr	r2, [pc, #292]	@ (800411c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a02 	vldr	s12, [r7, #8]
 800401e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004118 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800403a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800403c:	4b34      	ldr	r3, [pc, #208]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d017      	beq.n	8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004048:	4b31      	ldr	r3, [pc, #196]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800404a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404c:	0a5b      	lsrs	r3, r3, #9
 800404e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800405a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800405e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004062:	edd7 6a07 	vldr	s13, [r7, #28]
 8004066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406e:	ee17 2a90 	vmov	r2, s15
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e002      	b.n	800407e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800407e:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800408a:	4b21      	ldr	r3, [pc, #132]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	0c1b      	lsrs	r3, r3, #16
 8004090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800409c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80040a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b0:	ee17 2a90 	vmov	r2, s15
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80040c0:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d017      	beq.n	80040fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040cc:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80040ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d0:	0e1b      	lsrs	r3, r3, #24
 80040d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80040de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f2:	ee17 2a90 	vmov	r2, s15
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
}
 8004102:	bf00      	nop
 8004104:	3724      	adds	r7, #36	@ 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	46020c00 	.word	0x46020c00
 8004114:	4b742400 	.word	0x4b742400
 8004118:	46000000 	.word	0x46000000
 800411c:	08006704 	.word	0x08006704

08004120 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	@ 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004128:	4ba6      	ldr	r3, [pc, #664]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004130:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004132:	4ba4      	ldr	r3, [pc, #656]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800413c:	4ba1      	ldr	r3, [pc, #644]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	3301      	adds	r3, #1
 8004148:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800414a:	4b9e      	ldr	r3, [pc, #632]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004156:	4b9b      	ldr	r3, [pc, #620]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	08db      	lsrs	r3, r3, #3
 800415c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d062      	beq.n	800423e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b03      	cmp	r3, #3
 800417c:	f200 8081 	bhi.w	8004282 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d024      	beq.n	80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d17a      	bne.n	8004282 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	4b89      	ldr	r3, [pc, #548]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80041a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80041ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80041b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80041b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80041ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80041be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041ce:	e08f      	b.n	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80041d0:	4b7c      	ldr	r3, [pc, #496]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80041dc:	4b79      	ldr	r3, [pc, #484]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	0f1b      	lsrs	r3, r3, #28
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80041e8:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80041ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	0f1b      	lsrs	r3, r3, #28
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	4a76      	ldr	r2, [pc, #472]	@ (80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80041f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004220:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004230:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004238:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800423c:	e058      	b.n	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004248:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800424c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004250:	4b5c      	ldr	r3, [pc, #368]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004260:	ed97 6a02 	vldr	s12, [r7, #8]
 8004264:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004268:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800426c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004270:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004274:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004280:	e036      	b.n	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004282:	4b50      	ldr	r3, [pc, #320]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800428e:	4b4d      	ldr	r3, [pc, #308]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0f1b      	lsrs	r3, r3, #28
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800429c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	0f1b      	lsrs	r3, r3, #28
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	4a49      	ldr	r2, [pc, #292]	@ (80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80042aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042ee:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80042f0:	4b34      	ldr	r3, [pc, #208]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d017      	beq.n	800432c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80042fc:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	0a5b      	lsrs	r3, r3, #9
 8004302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800430e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004312:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004316:	edd7 6a07 	vldr	s13, [r7, #28]
 800431a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800431e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004322:	ee17 2a90 	vmov	r2, s15
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e002      	b.n	8004332 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004332:	4b24      	ldr	r3, [pc, #144]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800433e:	4b21      	ldr	r3, [pc, #132]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004354:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004358:	edd7 6a07 	vldr	s13, [r7, #28]
 800435c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004364:	ee17 2a90 	vmov	r2, s15
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	605a      	str	r2, [r3, #4]
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004374:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d017      	beq.n	80043b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004380:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004384:	0e1b      	lsrs	r3, r3, #24
 8004386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004396:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800439a:	edd7 6a07 	vldr	s13, [r7, #28]
 800439e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a6:	ee17 2a90 	vmov	r2, s15
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
}
 80043b6:	bf00      	nop
 80043b8:	3724      	adds	r7, #36	@ 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	46020c00 	.word	0x46020c00
 80043c8:	4b742400 	.word	0x4b742400
 80043cc:	46000000 	.word	0x46000000
 80043d0:	08006704 	.word	0x08006704

080043d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80043dc:	4ba6      	ldr	r3, [pc, #664]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80043e6:	4ba4      	ldr	r3, [pc, #656]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80043f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3301      	adds	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80043fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800440a:	4b9b      	ldr	r3, [pc, #620]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800440c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440e:	08db      	lsrs	r3, r3, #3
 8004410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d062      	beq.n	80044f2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b03      	cmp	r3, #3
 8004430:	f200 8081 	bhi.w	8004536 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d024      	beq.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d17a      	bne.n	8004536 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800467c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b89      	ldr	r3, [pc, #548]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004462:	ed97 6a02 	vldr	s12, [r7, #8]
 8004466:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004680 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004482:	e08f      	b.n	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004484:	4b7c      	ldr	r3, [pc, #496]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004490:	4b79      	ldr	r3, [pc, #484]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	0f1b      	lsrs	r3, r3, #28
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	e006      	b.n	80044aa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800449c:	4b76      	ldr	r3, [pc, #472]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800449e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	0f1b      	lsrs	r3, r3, #28
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	4a76      	ldr	r2, [pc, #472]	@ (8004684 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004680 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80044d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80044e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044f0:	e058      	b.n	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800467c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004504:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004514:	ed97 6a02 	vldr	s12, [r7, #8]
 8004518:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004680 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800451c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004520:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004524:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004528:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800452c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004530:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004534:	e036      	b.n	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004536:	4b50      	ldr	r3, [pc, #320]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004542:	4b4d      	ldr	r3, [pc, #308]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0f1b      	lsrs	r3, r3, #28
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	e006      	b.n	800455c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800454e:	4b4a      	ldr	r3, [pc, #296]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	0f1b      	lsrs	r3, r3, #28
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	4a49      	ldr	r2, [pc, #292]	@ (8004684 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800455e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a02 	vldr	s12, [r7, #8]
 8004586:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004680 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045a2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80045a4:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045b0:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b4:	0a5b      	lsrs	r3, r3, #9
 80045b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80045c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d6:	ee17 2a90 	vmov	r2, s15
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e002      	b.n	80045e6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80045e6:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d017      	beq.n	8004622 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045f2:	4b21      	ldr	r3, [pc, #132]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004608:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800460c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004618:	ee17 2a90 	vmov	r2, s15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	e002      	b.n	8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004628:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d017      	beq.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004634:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004646:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800464a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800464e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800465a:	ee17 2a90 	vmov	r2, s15
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004662:	e002      	b.n	800466a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	609a      	str	r2, [r3, #8]
}
 800466a:	bf00      	nop
 800466c:	3724      	adds	r7, #36	@ 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	46020c00 	.word	0x46020c00
 800467c:	4b742400 	.word	0x4b742400
 8004680:	46000000 	.word	0x46000000
 8004684:	08006704 	.word	0x08006704

08004688 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	@ 0x38
 800468c:	af00      	add	r7, sp, #0
 800468e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004696:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800469a:	430b      	orrs	r3, r1
 800469c:	d145      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800469e:	4baa      	ldr	r3, [pc, #680]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80046aa:	4ba7      	ldr	r3, [pc, #668]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d108      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046be:	d104      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80046c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c6:	f001 b987 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80046ca:	4b9f      	ldr	r3, [pc, #636]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d8:	d114      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e0:	d110      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80046e2:	4b99      	ldr	r3, [pc, #612]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046f0:	d103      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80046f2:	23fa      	movs	r3, #250	@ 0xfa
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80046f6:	f001 b96f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80046fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004700:	f001 b96a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004704:	4b90      	ldr	r3, [pc, #576]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004710:	d107      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004718:	d103      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800471a:	4b8c      	ldr	r3, [pc, #560]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
 800471e:	f001 b95b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	637b      	str	r3, [r7, #52]	@ 0x34
 8004726:	f001 b957 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800472a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800472e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004732:	430b      	orrs	r3, r1
 8004734:	d151      	bne.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004736:	4b84      	ldr	r3, [pc, #528]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004738:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800473c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004740:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	2b80      	cmp	r3, #128	@ 0x80
 8004746:	d035      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d841      	bhi.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	2b60      	cmp	r3, #96	@ 0x60
 8004752:	d02a      	beq.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	2b60      	cmp	r3, #96	@ 0x60
 8004758:	d83b      	bhi.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	2b40      	cmp	r3, #64	@ 0x40
 800475e:	d009      	beq.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d835      	bhi.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	2b20      	cmp	r3, #32
 8004770:	d012      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004772:	e02e      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fb77 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004782:	f001 b929 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004786:	f107 0318 	add.w	r3, r7, #24
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fcc8 	bl	8004120 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004794:	f001 b920 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004798:	f107 030c 	add.w	r3, r7, #12
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fe19 	bl	80043d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047a6:	f001 b917 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80047aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80047ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047b0:	f001 b912 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047b4:	4b64      	ldr	r3, [pc, #400]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c0:	d103      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80047c2:	4b63      	ldr	r3, [pc, #396]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80047c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80047c6:	f001 b907 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047ce:	f001 b903 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047d6:	f001 b8ff 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80047da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047de:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80047e2:	430b      	orrs	r3, r1
 80047e4:	d158      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80047e6:	4b58      	ldr	r3, [pc, #352]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80047e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f8:	d03b      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004800:	d846      	bhi.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004808:	d02e      	beq.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004810:	d83e      	bhi.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004818:	d00b      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004820:	d836      	bhi.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800482e:	d012      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004830:	e02e      	b.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fb18 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004840:	f001 b8ca 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004844:	f107 0318 	add.w	r3, r7, #24
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fc69 	bl	8004120 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004852:	f001 b8c1 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004856:	f107 030c 	add.w	r3, r7, #12
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fdba 	bl	80043d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004864:	f001 b8b8 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004868:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800486c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800486e:	f001 b8b3 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004872:	4b35      	ldr	r3, [pc, #212]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487e:	d103      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004880:	4b33      	ldr	r3, [pc, #204]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004882:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004884:	f001 b8a8 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800488c:	f001 b8a4 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004894:	f001 b8a0 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800489c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80048a0:	430b      	orrs	r3, r1
 80048a2:	d16e      	bne.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80048a4:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80048a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048aa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80048ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80048b6:	d034      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80048b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80048be:	d85c      	bhi.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048c6:	d00b      	beq.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ce:	d854      	bhi.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048dc:	d009      	beq.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80048de:	e04c      	b.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fac1 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048ee:	f001 b873 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048f2:	f107 0318 	add.w	r3, r7, #24
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fc12 	bl	8004120 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004900:	f001 b86a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004904:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004910:	d103      	bne.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8004912:	4b10      	ldr	r3, [pc, #64]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004914:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004916:	f001 b85f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800491e:	f001 b85b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b20      	cmp	r3, #32
 800492c:	d121      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800493a:	4b03      	ldr	r3, [pc, #12]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0e1b      	lsrs	r3, r3, #24
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	e00f      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004946:	bf00      	nop
 8004948:	46020c00 	.word	0x46020c00
 800494c:	0007a120 	.word	0x0007a120
 8004950:	00f42400 	.word	0x00f42400
 8004954:	02dc6c00 	.word	0x02dc6c00
 8004958:	4ba7      	ldr	r3, [pc, #668]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800495a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	0e1b      	lsrs	r3, r3, #24
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	4aa5      	ldr	r2, [pc, #660]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800496e:	f001 b833 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004976:	f001 b82f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800497e:	f001 b82b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004986:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800498a:	430b      	orrs	r3, r1
 800498c:	d17f      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800498e:	4b9a      	ldr	r3, [pc, #616]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004998:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	2b00      	cmp	r3, #0
 800499e:	d165      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80049a0:	4b95      	ldr	r3, [pc, #596]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80049a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80049aa:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049b2:	d034      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049ba:	d853      	bhi.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049c2:	d00b      	beq.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ca:	d84b      	bhi.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049d8:	d009      	beq.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80049da:	e043      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fa43 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80049ea:	f000 bff5 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ee:	f107 0318 	add.w	r3, r7, #24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fb94 	bl	8004120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80049fc:	f000 bfec 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004a00:	4b7d      	ldr	r3, [pc, #500]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0c:	d103      	bne.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8004a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004a10:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004a12:	f000 bfe1 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a1a:	f000 bfdd 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a1e:	4b76      	ldr	r3, [pc, #472]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d118      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a2a:	4b73      	ldr	r3, [pc, #460]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8004a36:	4b70      	ldr	r3, [pc, #448]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0e1b      	lsrs	r3, r3, #24
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8004a42:	4b6d      	ldr	r3, [pc, #436]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	0e1b      	lsrs	r3, r3, #24
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	4a6a      	ldr	r2, [pc, #424]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004a58:	f000 bfbe 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a60:	f000 bfba 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a68:	f000 bfb6 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a72:	d108      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff f9f7 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a82:	f000 bfa9 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8a:	f000 bfa5 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a92:	1e51      	subs	r1, r2, #1
 8004a94:	430b      	orrs	r3, r1
 8004a96:	d136      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004a98:	4b57      	ldr	r3, [pc, #348]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004aaa:	f7fe fb8d 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 8004aae:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ab0:	f000 bf92 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d104      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004aba:	f7fe fa55 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004abe:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ac0:	f000 bf8a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d103      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8004ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8004adc:	f000 bf7c 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004ae0:	4b45      	ldr	r3, [pc, #276]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d107      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d104      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8004af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afa:	f000 bf6d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b02:	f000 bf69 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0a:	1e91      	subs	r1, r2, #2
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	d136      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b10:	4b39      	ldr	r3, [pc, #228]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b22:	f7fe fb3d 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004b26:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b28:	f000 bf56 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d104      	bne.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b32:	f7fe fa19 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004b36:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b38:	f000 bf4e 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b48:	d106      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d103      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8004b50:	4b2c      	ldr	r3, [pc, #176]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b54:	f000 bf40 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004b58:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d104      	bne.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8004b6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b72:	f000 bf31 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7a:	f000 bf2d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b82:	1f11      	subs	r1, r2, #4
 8004b84:	430b      	orrs	r3, r1
 8004b86:	d13f      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004b88:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b9a:	f7fe fb01 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004b9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ba0:	f000 bf1a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d104      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fe f9dd 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004bae:	6378      	str	r0, [r7, #52]	@ 0x34
 8004bb0:	f000 bf12 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004bb4:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d103      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bcc:	f000 bf04 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004bd0:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d107      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	2b30      	cmp	r3, #48	@ 0x30
 8004be2:	d104      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8004be4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bea:	f000 bef5 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf2:	f000 bef1 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004bf6:	bf00      	nop
 8004bf8:	46020c00 	.word	0x46020c00
 8004bfc:	08006704 	.word	0x08006704
 8004c00:	02dc6c00 	.word	0x02dc6c00
 8004c04:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c0c:	f1a2 0108 	sub.w	r1, r2, #8
 8004c10:	430b      	orrs	r3, r1
 8004c12:	d136      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c14:	4ba4      	ldr	r3, [pc, #656]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c26:	f7fe fabb 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004c2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c2c:	f000 bed4 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	2b40      	cmp	r3, #64	@ 0x40
 8004c34:	d104      	bne.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe f997 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004c3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c3c:	f000 becc 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004c40:	4b99      	ldr	r3, [pc, #612]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	2b80      	cmp	r3, #128	@ 0x80
 8004c52:	d103      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8004c54:	4b95      	ldr	r3, [pc, #596]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c58:	f000 bebe 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004c5c:	4b92      	ldr	r3, [pc, #584]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d107      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c6e:	d104      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8004c70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c76:	f000 beaf 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7e:	f000 beab 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c86:	f1a2 0110 	sub.w	r1, r2, #16
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	d139      	bne.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004c8e:	4b86      	ldr	r3, [pc, #536]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fe fa7e 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ca6:	f000 be97 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb0:	d104      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7fe f959 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004cb6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cb8:	f000 be8e 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004cbc:	4b7a      	ldr	r3, [pc, #488]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc8:	d107      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd0:	d103      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8004cd2:	4b76      	ldr	r3, [pc, #472]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd6:	f000 be7f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004cda:	4b73      	ldr	r3, [pc, #460]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d108      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cee:	d104      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8004cf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf6:	f000 be6f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfe:	f000 be6b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d06:	f1a2 0120 	sub.w	r1, r2, #32
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	d158      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d0e:	4b66      	ldr	r3, [pc, #408]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004d20:	f7fe fa66 	bl	80031f0 <HAL_RCC_GetPCLK3Freq>
 8004d24:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d26:	f000 be57 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d104      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d30:	f7fe f91a 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004d34:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d36:	f000 be4f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d46:	d106      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d103      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8004d4e:	4b57      	ldr	r3, [pc, #348]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d52:	f000 be41 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004d56:	4b54      	ldr	r3, [pc, #336]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d107      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d104      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8004d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d70:	f000 be32 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004d74:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d11b      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d118      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d86:	4b48      	ldr	r3, [pc, #288]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8004d92:	4b45      	ldr	r3, [pc, #276]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0e1b      	lsrs	r3, r3, #24
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	e006      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004d9e:	4b42      	ldr	r3, [pc, #264]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	0e1b      	lsrs	r3, r3, #24
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	4a40      	ldr	r2, [pc, #256]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db4:	f000 be10 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dbc:	f000 be0c 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	d173      	bne.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004dcc:	4b36      	ldr	r3, [pc, #216]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dd2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004dd6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dde:	d104      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004de0:	f7fe f8c2 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004de4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004de6:	f000 bdf7 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df0:	d108      	bne.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004df2:	f107 0318 	add.w	r3, r7, #24
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff f992 	bl	8004120 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e00:	f000 bdea 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004e0a:	f7fe f9af 	bl	800316c <HAL_RCC_GetHCLKFreq>
 8004e0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e10:	f000 bde2 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e1a:	d122      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e1c:	4b22      	ldr	r3, [pc, #136]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d118      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e28:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004e34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	0e1b      	lsrs	r3, r3, #24
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	e006      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004e40:	4b19      	ldr	r3, [pc, #100]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e46:	041b      	lsls	r3, r3, #16
 8004e48:	0e1b      	lsrs	r3, r3, #24
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	4a18      	ldr	r2, [pc, #96]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e56:	f000 bdbf 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e5e:	f000 bdbb 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004e62:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8004e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e76:	d103      	bne.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8004e78:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7c:	f000 bdac 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004e80:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e94:	d103      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9a:	f000 bd9d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea2:	f000 bd99 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004ea6:	bf00      	nop
 8004ea8:	46020c00 	.word	0x46020c00
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	08006704 	.word	0x08006704
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	d158      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004ec0:	4bad      	ldr	r3, [pc, #692]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004ec2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d84b      	bhi.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f11 	.word	0x08004f11
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004eff 	.word	0x08004eff
 8004ee4:	08004f1b 	.word	0x08004f1b
 8004ee8:	08004f25 	.word	0x08004f25
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe ffbb 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004efa:	f000 bd6d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004efe:	f107 030c 	add.w	r3, r7, #12
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fa66 	bl	80043d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f0c:	f000 bd64 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004f10:	f7fe f92c 	bl	800316c <HAL_RCC_GetHCLKFreq>
 8004f14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f16:	f000 bd5f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f20:	f000 bd5a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f24:	4b94      	ldr	r3, [pc, #592]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d118      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f30:	4b91      	ldr	r3, [pc, #580]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8004f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	0e1b      	lsrs	r3, r3, #24
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	e006      	b.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8004f48:	4b8b      	ldr	r3, [pc, #556]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	0e1b      	lsrs	r3, r3, #24
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	4a89      	ldr	r2, [pc, #548]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f5e:	f000 bd3b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f66:	f000 bd37 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f6e:	f000 bd33 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f76:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	d167      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004f7e:	4b7e      	ldr	r3, [pc, #504]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f84:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004f88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f90:	d036      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f98:	d855      	bhi.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fa0:	d029      	beq.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fa8:	d84d      	bhi.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fb0:	d013      	beq.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fb8:	d845      	bhi.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc6:	d13e      	bne.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe ff4d 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fd6:	f000 bcff 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fda:	f107 030c 	add.w	r3, r7, #12
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff f9f8 	bl	80043d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fe8:	f000 bcf6 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004fec:	f7fe f8be 	bl	800316c <HAL_RCC_GetHCLKFreq>
 8004ff0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ff2:	f000 bcf1 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ff6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ffc:	f000 bcec 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005000:	4b5d      	ldr	r3, [pc, #372]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b20      	cmp	r3, #32
 800500a:	d118      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800500c:	4b5a      	ldr	r3, [pc, #360]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8005018:	4b57      	ldr	r3, [pc, #348]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	0e1b      	lsrs	r3, r3, #24
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	e006      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005024:	4b54      	ldr	r3, [pc, #336]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	0e1b      	lsrs	r3, r3, #24
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	4a52      	ldr	r2, [pc, #328]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005038:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800503a:	f000 bccd 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005042:	f000 bcc9 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800504a:	f000 bcc5 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800504e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005052:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005056:	430b      	orrs	r3, r1
 8005058:	d14c      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800505a:	4b47      	ldr	r3, [pc, #284]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800505c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005060:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005064:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fe f898 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8005070:	6378      	str	r0, [r7, #52]	@ 0x34
 8005072:	f000 bcb1 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507c:	d104      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800507e:	f7fd ff73 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8005082:	6378      	str	r0, [r7, #52]	@ 0x34
 8005084:	f000 bca8 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005088:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005094:	d107      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800509c:	d103      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800509e:	4b38      	ldr	r3, [pc, #224]	@ (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80050a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a2:	f000 bc99 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80050a6:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d11c      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050b8:	d118      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80050c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0e1b      	lsrs	r3, r3, #24
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	e006      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80050d2:	4b29      	ldr	r3, [pc, #164]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80050d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	0e1b      	lsrs	r3, r3, #24
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	4a26      	ldr	r2, [pc, #152]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050e8:	f000 bc76 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f0:	f000 bc72 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80050f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80050fc:	430b      	orrs	r3, r1
 80050fe:	d152      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005100:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005106:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800510a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	2b00      	cmp	r3, #0
 8005110:	d104      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005112:	f7fe f845 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8005116:	6378      	str	r0, [r7, #52]	@ 0x34
 8005118:	f000 bc5e 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005122:	d104      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005124:	f7fd ff20 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8005128:	6378      	str	r0, [r7, #52]	@ 0x34
 800512a:	f000 bc55 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513a:	d107      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005142:	d103      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8005144:	4b0e      	ldr	r3, [pc, #56]	@ (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005146:	637b      	str	r3, [r7, #52]	@ 0x34
 8005148:	f000 bc46 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b20      	cmp	r3, #32
 8005156:	d122      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800515e:	d11e      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005160:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 800516c:	4b02      	ldr	r3, [pc, #8]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	0e1b      	lsrs	r3, r3, #24
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	e00c      	b.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8005178:	46020c00 	.word	0x46020c00
 800517c:	08006704 	.word	0x08006704
 8005180:	00f42400 	.word	0x00f42400
 8005184:	4ba1      	ldr	r3, [pc, #644]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	0e1b      	lsrs	r3, r3, #24
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	4a9f      	ldr	r2, [pc, #636]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
 800519a:	f000 bc1d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a2:	f000 bc19 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80051a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051aa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80051ae:	430b      	orrs	r3, r1
 80051b0:	d151      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80051b2:	4b96      	ldr	r3, [pc, #600]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80051b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c2:	d024      	beq.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c8:	d842      	bhi.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	2b80      	cmp	r3, #128	@ 0x80
 80051ce:	d00d      	beq.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	2b80      	cmp	r3, #128	@ 0x80
 80051d4:	d83c      	bhi.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	d011      	beq.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80051e2:	e035      	b.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80051e4:	f7fe f804 	bl	80031f0 <HAL_RCC_GetPCLK3Freq>
 80051e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051ea:	e3f5      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051ec:	4b87      	ldr	r3, [pc, #540]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f8:	d102      	bne.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80051fa:	4b86      	ldr	r3, [pc, #536]	@ (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051fe:	e3eb      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005204:	e3e8      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005206:	f7fd feaf 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 800520a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800520c:	e3e4      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800520e:	4b7f      	ldr	r3, [pc, #508]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b20      	cmp	r3, #32
 8005218:	d117      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800521a:	4b7c      	ldr	r3, [pc, #496]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8005226:	4b79      	ldr	r3, [pc, #484]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	0e1b      	lsrs	r3, r3, #24
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	e006      	b.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005232:	4b76      	ldr	r3, [pc, #472]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	0e1b      	lsrs	r3, r3, #24
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	4a73      	ldr	r2, [pc, #460]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005246:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005248:	e3c6      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800524e:	e3c3      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005254:	e3c0      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800525a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800525e:	430b      	orrs	r3, r1
 8005260:	d147      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005262:	4b6a      	ldr	r3, [pc, #424]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005268:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005274:	f7fd ff94 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8005278:	6378      	str	r0, [r7, #52]	@ 0x34
 800527a:	e3ad      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005282:	d103      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005284:	f7fd fe70 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8005288:	6378      	str	r0, [r7, #52]	@ 0x34
 800528a:	e3a5      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800528c:	4b5f      	ldr	r3, [pc, #380]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005298:	d106      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052a0:	d102      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80052a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80052a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a6:	e397      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80052a8:	4b58      	ldr	r3, [pc, #352]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d11b      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80052ba:	d117      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052bc:	4b53      	ldr	r3, [pc, #332]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80052c8:	4b50      	ldr	r3, [pc, #320]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	0e1b      	lsrs	r3, r3, #24
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	e006      	b.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80052d4:	4b4d      	ldr	r3, [pc, #308]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80052d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	4a4b      	ldr	r2, [pc, #300]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80052e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ea:	e375      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f0:	e372      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80052f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80052fa:	430b      	orrs	r3, r1
 80052fc:	d164      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80052fe:	4b43      	ldr	r3, [pc, #268]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005308:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	2b00      	cmp	r3, #0
 800530e:	d120      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005310:	4b3e      	ldr	r3, [pc, #248]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b20      	cmp	r3, #32
 800531a:	d117      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800531c:	4b3b      	ldr	r3, [pc, #236]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005328:	4b38      	ldr	r3, [pc, #224]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	0e1b      	lsrs	r3, r3, #24
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	e006      	b.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005334:	4b35      	ldr	r3, [pc, #212]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	0e1b      	lsrs	r3, r3, #24
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	4a33      	ldr	r2, [pc, #204]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	637b      	str	r3, [r7, #52]	@ 0x34
 800534a:	e345      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005350:	e342      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005352:	4b2e      	ldr	r3, [pc, #184]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800535c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005360:	d112      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005368:	d10e      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800536a:	4b28      	ldr	r3, [pc, #160]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005378:	d102      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800537a:	23fa      	movs	r3, #250	@ 0xfa
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800537e:	e32b      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005380:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005386:	e327      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005388:	4b20      	ldr	r3, [pc, #128]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005394:	d106      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800539c:	d102      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800539e:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a2:	e319      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80053a4:	4b19      	ldr	r3, [pc, #100]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80053a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d107      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053b8:	d103      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c0:	e30a      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c6:	e307      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80053d0:	430b      	orrs	r3, r1
 80053d2:	d16b      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80053d4:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80053d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d127      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053e6:	4b09      	ldr	r3, [pc, #36]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d11e      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053f2:	4b06      	ldr	r3, [pc, #24]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80053fe:	4b03      	ldr	r3, [pc, #12]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	0e1b      	lsrs	r3, r3, #24
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	e00d      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800540a:	bf00      	nop
 800540c:	46020c00 	.word	0x46020c00
 8005410:	08006704 	.word	0x08006704
 8005414:	00f42400 	.word	0x00f42400
 8005418:	4b94      	ldr	r3, [pc, #592]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800541a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	0e1b      	lsrs	r3, r3, #24
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	4a92      	ldr	r2, [pc, #584]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542c:	637b      	str	r3, [r7, #52]	@ 0x34
 800542e:	e2d3      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	637b      	str	r3, [r7, #52]	@ 0x34
 8005434:	e2d0      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005436:	4b8d      	ldr	r3, [pc, #564]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800543c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005444:	d112      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544c:	d10e      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800544e:	4b87      	ldr	r3, [pc, #540]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800545c:	d102      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800545e:	23fa      	movs	r3, #250	@ 0xfa
 8005460:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005462:	e2b9      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005464:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800546a:	e2b5      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800546c:	4b7f      	ldr	r3, [pc, #508]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005478:	d106      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005480:	d102      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8005482:	4b7c      	ldr	r3, [pc, #496]	@ (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
 8005486:	e2a7      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005488:	4b78      	ldr	r3, [pc, #480]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800548a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b02      	cmp	r3, #2
 8005494:	d107      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800549c:	d103      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a4:	e298      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054aa:	e295      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80054ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80054b4:	430b      	orrs	r3, r1
 80054b6:	d147      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80054b8:	4b6c      	ldr	r3, [pc, #432]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80054ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80054c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80054ca:	f7fd fe69 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80054ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80054d0:	e282      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80054d2:	4b66      	ldr	r3, [pc, #408]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80054d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054e0:	d112      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054e8:	d10e      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054ea:	4b60      	ldr	r3, [pc, #384]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80054ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054f8:	d102      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80054fa:	23fa      	movs	r3, #250	@ 0xfa
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054fe:	e26b      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005500:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005504:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005506:	e267      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005508:	4b58      	ldr	r3, [pc, #352]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005514:	d106      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800551c:	d102      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800551e:	4b55      	ldr	r3, [pc, #340]	@ (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
 8005522:	e259      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005524:	4b51      	ldr	r3, [pc, #324]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d107      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005538:	d103      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800553a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800553e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005540:	e24a      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34
 8005546:	e247      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005550:	430b      	orrs	r3, r1
 8005552:	d12d      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005554:	4b45      	ldr	r3, [pc, #276]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800555a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800555e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005560:	4b42      	ldr	r3, [pc, #264]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800556c:	d105      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8005574:	4b3f      	ldr	r3, [pc, #252]	@ (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
 8005578:	e22e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005580:	d107      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fc70 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005590:	e222      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005598:	d107      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800559a:	f107 0318 	add.w	r3, r7, #24
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fdbe 	bl	8004120 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a8:	e216      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ae:	e213      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80055b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80055b8:	430b      	orrs	r3, r1
 80055ba:	d15d      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80055bc:	4b2b      	ldr	r3, [pc, #172]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80055be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055c2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80055c6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055ce:	d028      	beq.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055d6:	d845      	bhi.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055de:	d013      	beq.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055e6:	d83d      	bhi.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f4:	d004      	beq.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80055f6:	e035      	b.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80055f8:	f7fd fde6 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80055fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80055fe:	e1eb      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005600:	f7fd fcb2 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8005604:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005606:	e1e7      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005608:	4b18      	ldr	r3, [pc, #96]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005614:	d102      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8005616:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005618:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800561a:	e1dd      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005620:	e1da      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005622:	4b12      	ldr	r3, [pc, #72]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b20      	cmp	r3, #32
 800562c:	d117      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800562e:	4b0f      	ldr	r3, [pc, #60]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800563a:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0e1b      	lsrs	r3, r3, #24
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8005646:	4b09      	ldr	r3, [pc, #36]	@ (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	0e1b      	lsrs	r3, r3, #24
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	4a06      	ldr	r2, [pc, #24]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800565c:	e1bc      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005662:	e1b9      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005668:	e1b6      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800566a:	bf00      	nop
 800566c:	46020c00 	.word	0x46020c00
 8005670:	08006704 	.word	0x08006704
 8005674:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005680:	430b      	orrs	r3, r1
 8005682:	d156      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005684:	4ba5      	ldr	r3, [pc, #660]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800568a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800568e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005696:	d028      	beq.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800569e:	d845      	bhi.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a6:	d013      	beq.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056ae:	d83d      	bhi.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056bc:	d004      	beq.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80056be:	e035      	b.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fd fd6e 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80056c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80056c6:	e187      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80056c8:	f7fd fc4e 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80056cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80056ce:	e183      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056d0:	4b92      	ldr	r3, [pc, #584]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056dc:	d102      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80056de:	4b90      	ldr	r3, [pc, #576]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056e2:	e179      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056e8:	e176      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80056ea:	4b8c      	ldr	r3, [pc, #560]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d117      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056f6:	4b89      	ldr	r3, [pc, #548]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8005702:	4b86      	ldr	r3, [pc, #536]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	0e1b      	lsrs	r3, r3, #24
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	e006      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800570e:	4b83      	ldr	r3, [pc, #524]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	0e1b      	lsrs	r3, r3, #24
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	4a81      	ldr	r2, [pc, #516]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800571e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005722:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005724:	e158      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800572a:	e155      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005730:	e152      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005736:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800573a:	430b      	orrs	r3, r1
 800573c:	d177      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800573e:	4b77      	ldr	r3, [pc, #476]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005744:	f003 0318 	and.w	r3, r3, #24
 8005748:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	2b18      	cmp	r3, #24
 800574e:	d86b      	bhi.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8005750:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	080057bd 	.word	0x080057bd
 800575c:	08005829 	.word	0x08005829
 8005760:	08005829 	.word	0x08005829
 8005764:	08005829 	.word	0x08005829
 8005768:	08005829 	.word	0x08005829
 800576c:	08005829 	.word	0x08005829
 8005770:	08005829 	.word	0x08005829
 8005774:	08005829 	.word	0x08005829
 8005778:	080057c5 	.word	0x080057c5
 800577c:	08005829 	.word	0x08005829
 8005780:	08005829 	.word	0x08005829
 8005784:	08005829 	.word	0x08005829
 8005788:	08005829 	.word	0x08005829
 800578c:	08005829 	.word	0x08005829
 8005790:	08005829 	.word	0x08005829
 8005794:	08005829 	.word	0x08005829
 8005798:	080057cd 	.word	0x080057cd
 800579c:	08005829 	.word	0x08005829
 80057a0:	08005829 	.word	0x08005829
 80057a4:	08005829 	.word	0x08005829
 80057a8:	08005829 	.word	0x08005829
 80057ac:	08005829 	.word	0x08005829
 80057b0:	08005829 	.word	0x08005829
 80057b4:	08005829 	.word	0x08005829
 80057b8:	080057e7 	.word	0x080057e7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80057bc:	f7fd fd18 	bl	80031f0 <HAL_RCC_GetPCLK3Freq>
 80057c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80057c2:	e109      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80057c4:	f7fd fbd0 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80057c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80057ca:	e105      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057cc:	4b53      	ldr	r3, [pc, #332]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d8:	d102      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80057da:	4b51      	ldr	r3, [pc, #324]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80057dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057de:	e0fb      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057e4:	e0f8      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80057e6:	4b4d      	ldr	r3, [pc, #308]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d117      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057f2:	4b4a      	ldr	r3, [pc, #296]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80057fe:	4b47      	ldr	r3, [pc, #284]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0e1b      	lsrs	r3, r3, #24
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800580a:	4b44      	ldr	r3, [pc, #272]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800580c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	0e1b      	lsrs	r3, r3, #24
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	4a42      	ldr	r2, [pc, #264]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005820:	e0da      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005826:	e0d7      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800582c:	e0d4      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800582e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005832:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005836:	430b      	orrs	r3, r1
 8005838:	d155      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800583a:	4b38      	ldr	r3, [pc, #224]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800583c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005840:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005844:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800584c:	d013      	beq.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005854:	d844      	bhi.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800585c:	d013      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005864:	d83c      	bhi.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d014      	beq.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005872:	d014      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8005874:	e034      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fc50 	bl	8004120 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005884:	e0a8      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe faee 	bl	8003e6c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005894:	e0a0      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005896:	f7fd fb67 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 800589a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800589c:	e09c      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800589e:	4b1f      	ldr	r3, [pc, #124]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d117      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058aa:	4b1c      	ldr	r3, [pc, #112]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80058b6:	4b19      	ldr	r3, [pc, #100]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	0e1b      	lsrs	r3, r3, #24
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	e006      	b.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80058c2:	4b16      	ldr	r3, [pc, #88]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80058c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	0e1b      	lsrs	r3, r3, #24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	4a14      	ldr	r2, [pc, #80]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058d8:	e07e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058de:	e07b      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058e4:	e078      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80058e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ea:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80058ee:	430b      	orrs	r3, r1
 80058f0:	d138      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80058f2:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80058f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058fc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80058fe:	4b07      	ldr	r3, [pc, #28]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d10d      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8005912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
 8005918:	e05e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800591a:	bf00      	nop
 800591c:	46020c00 	.word	0x46020c00
 8005920:	00f42400 	.word	0x00f42400
 8005924:	08006704 	.word	0x08006704
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800592a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800592e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005936:	d112      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593e:	d10e      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005940:	4b28      	ldr	r3, [pc, #160]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800594e:	d102      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8005950:	23fa      	movs	r3, #250	@ 0xfa
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005954:	e040      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005956:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800595a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800595c:	e03c      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34
 8005962:	e039      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005968:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800596c:	430b      	orrs	r3, r1
 800596e:	d131      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005970:	4b1c      	ldr	r3, [pc, #112]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005976:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800597a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800597c:	4b19      	ldr	r3, [pc, #100]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005988:	d105      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8005990:	4b15      	ldr	r3, [pc, #84]	@ (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
 8005994:	e020      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005996:	4b13      	ldr	r3, [pc, #76]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059aa:	d102      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80059ac:	4b0f      	ldr	r3, [pc, #60]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80059ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b0:	e012      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80059b2:	4b0c      	ldr	r3, [pc, #48]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059be:	d106      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c6:	d102      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80059c8:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80059cc:	e004      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d2:	e001      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3738      	adds	r7, #56	@ 0x38
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	46020c00 	.word	0x46020c00
 80059e8:	02dc6c00 	.word	0x02dc6c00
 80059ec:	016e3600 	.word	0x016e3600
 80059f0:	00f42400 	.word	0x00f42400

080059f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80059fc:	4b47      	ldr	r3, [pc, #284]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a46      	ldr	r2, [pc, #280]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a08:	f7fb f9c2 	bl	8000d90 <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a0e:	e008      	b.n	8005a22 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a10:	f7fb f9be 	bl	8000d90 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e077      	b.n	8005b12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a22:	4b3e      	ldr	r3, [pc, #248]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6811      	ldr	r1, [r2, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6852      	ldr	r2, [r2, #4]
 8005a42:	3a01      	subs	r2, #1
 8005a44:	0212      	lsls	r2, r2, #8
 8005a46:	430a      	orrs	r2, r1
 8005a48:	4934      	ldr	r1, [pc, #208]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005a4e:	4b33      	ldr	r3, [pc, #204]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a52:	4b33      	ldr	r3, [pc, #204]	@ (8005b20 <RCCEx_PLL2_Config+0x12c>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6892      	ldr	r2, [r2, #8]
 8005a5a:	3a01      	subs	r2, #1
 8005a5c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68d2      	ldr	r2, [r2, #12]
 8005a64:	3a01      	subs	r2, #1
 8005a66:	0252      	lsls	r2, r2, #9
 8005a68:	b292      	uxth	r2, r2
 8005a6a:	4311      	orrs	r1, r2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6912      	ldr	r2, [r2, #16]
 8005a70:	3a01      	subs	r2, #1
 8005a72:	0412      	lsls	r2, r2, #16
 8005a74:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005a78:	4311      	orrs	r1, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6952      	ldr	r2, [r2, #20]
 8005a7e:	3a01      	subs	r2, #1
 8005a80:	0612      	lsls	r2, r2, #24
 8005a82:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005a86:	430a      	orrs	r2, r1
 8005a88:	4924      	ldr	r1, [pc, #144]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005a8e:	4b23      	ldr	r3, [pc, #140]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a92:	f023 020c 	bic.w	r2, r3, #12
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	4920      	ldr	r1, [pc, #128]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	491c      	ldr	r1, [pc, #112]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005aae:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005aba:	4b18      	ldr	r3, [pc, #96]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	69d2      	ldr	r2, [r2, #28]
 8005aca:	00d2      	lsls	r2, r2, #3
 8005acc:	4913      	ldr	r1, [pc, #76]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005ad2:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	4a11      	ldr	r2, [pc, #68]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005ad8:	f043 0310 	orr.w	r3, r3, #16
 8005adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005ade:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005ae4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aea:	f7fb f951 	bl	8000d90 <HAL_GetTick>
 8005aee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005af0:	e008      	b.n	8005b04 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005af2:	f7fb f94d 	bl	8000d90 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e006      	b.n	8005b12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <RCCEx_PLL2_Config+0x128>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0

}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	46020c00 	.word	0x46020c00
 8005b20:	80800000 	.word	0x80800000

08005b24 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005b2c:	4b47      	ldr	r3, [pc, #284]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a46      	ldr	r2, [pc, #280]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b38:	f7fb f92a 	bl	8000d90 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b3e:	e008      	b.n	8005b52 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b40:	f7fb f926 	bl	8000d90 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e077      	b.n	8005c42 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b52:	4b3e      	ldr	r3, [pc, #248]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b62:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b66:	f023 0303 	bic.w	r3, r3, #3
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6811      	ldr	r1, [r2, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6852      	ldr	r2, [r2, #4]
 8005b72:	3a01      	subs	r2, #1
 8005b74:	0212      	lsls	r2, r2, #8
 8005b76:	430a      	orrs	r2, r1
 8005b78:	4934      	ldr	r1, [pc, #208]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	630b      	str	r3, [r1, #48]	@ 0x30
 8005b7e:	4b33      	ldr	r3, [pc, #204]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b82:	4b33      	ldr	r3, [pc, #204]	@ (8005c50 <RCCEx_PLL3_Config+0x12c>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6892      	ldr	r2, [r2, #8]
 8005b8a:	3a01      	subs	r2, #1
 8005b8c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68d2      	ldr	r2, [r2, #12]
 8005b94:	3a01      	subs	r2, #1
 8005b96:	0252      	lsls	r2, r2, #9
 8005b98:	b292      	uxth	r2, r2
 8005b9a:	4311      	orrs	r1, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6912      	ldr	r2, [r2, #16]
 8005ba0:	3a01      	subs	r2, #1
 8005ba2:	0412      	lsls	r2, r2, #16
 8005ba4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6952      	ldr	r2, [r2, #20]
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	0612      	lsls	r2, r2, #24
 8005bb2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	4924      	ldr	r1, [pc, #144]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005bbe:	4b23      	ldr	r3, [pc, #140]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	f023 020c 	bic.w	r2, r3, #12
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	4920      	ldr	r1, [pc, #128]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	491c      	ldr	r1, [pc, #112]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005bde:	4b1b      	ldr	r3, [pc, #108]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005be4:	f023 0310 	bic.w	r3, r3, #16
 8005be8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bea:	4b18      	ldr	r3, [pc, #96]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bf2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	69d2      	ldr	r2, [r2, #28]
 8005bfa:	00d2      	lsls	r2, r2, #3
 8005bfc:	4913      	ldr	r1, [pc, #76]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005c02:	4b12      	ldr	r3, [pc, #72]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	4a11      	ldr	r2, [pc, #68]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005c08:	f043 0310 	orr.w	r3, r3, #16
 8005c0c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a0e      	ldr	r2, [pc, #56]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c1a:	f7fb f8b9 	bl	8000d90 <HAL_GetTick>
 8005c1e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c20:	e008      	b.n	8005c34 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c22:	f7fb f8b5 	bl	8000d90 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e006      	b.n	8005c42 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <RCCEx_PLL3_Config+0x128>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	46020c00 	.word	0x46020c00
 8005c50:	80800000 	.word	0x80800000

08005c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e042      	b.n	8005cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fa fed5 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2224      	movs	r2, #36	@ 0x24
 8005c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9ca 	bl	8006038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f825 	bl	8005cf4 <UART_SetConfig>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e01b      	b.n	8005cec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa49 	bl	800617c <UART_CheckIdleState>
 8005cea:	4603      	mov	r3, r0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf8:	b094      	sub	sp, #80	@ 0x50
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b7e      	ldr	r3, [pc, #504]	@ (8005f04 <UART_SetConfig+0x210>)
 8005d0a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4977      	ldr	r1, [pc, #476]	@ (8005f08 <UART_SetConfig+0x214>)
 8005d2c:	4019      	ands	r1, r3
 8005d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	ea40 0301 	orr.w	r3, r0, r1
 8005d4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f04 <UART_SetConfig+0x210>)
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d009      	beq.n	8005d74 <UART_SetConfig+0x80>
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b69      	ldr	r3, [pc, #420]	@ (8005f0c <UART_SetConfig+0x218>)
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d004      	beq.n	8005d74 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6c:	6a1a      	ldr	r2, [r3, #32]
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d70:	4313      	orrs	r3, r2
 8005d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005d7e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	f023 000f 	bic.w	r0, r3, #15
 8005d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d98:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	ea40 0301 	orr.w	r3, r0, r1
 8005da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b59      	ldr	r3, [pc, #356]	@ (8005f10 <UART_SetConfig+0x21c>)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d102      	bne.n	8005db4 <UART_SetConfig+0xc0>
 8005dae:	2301      	movs	r3, #1
 8005db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db2:	e029      	b.n	8005e08 <UART_SetConfig+0x114>
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4b56      	ldr	r3, [pc, #344]	@ (8005f14 <UART_SetConfig+0x220>)
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d102      	bne.n	8005dc4 <UART_SetConfig+0xd0>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc2:	e021      	b.n	8005e08 <UART_SetConfig+0x114>
 8005dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b53      	ldr	r3, [pc, #332]	@ (8005f18 <UART_SetConfig+0x224>)
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d102      	bne.n	8005dd4 <UART_SetConfig+0xe0>
 8005dce:	2304      	movs	r3, #4
 8005dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd2:	e019      	b.n	8005e08 <UART_SetConfig+0x114>
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4b50      	ldr	r3, [pc, #320]	@ (8005f1c <UART_SetConfig+0x228>)
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d102      	bne.n	8005de4 <UART_SetConfig+0xf0>
 8005dde:	2308      	movs	r3, #8
 8005de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005de2:	e011      	b.n	8005e08 <UART_SetConfig+0x114>
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b4d      	ldr	r3, [pc, #308]	@ (8005f20 <UART_SetConfig+0x22c>)
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d102      	bne.n	8005df4 <UART_SetConfig+0x100>
 8005dee:	2310      	movs	r3, #16
 8005df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005df2:	e009      	b.n	8005e08 <UART_SetConfig+0x114>
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b42      	ldr	r3, [pc, #264]	@ (8005f04 <UART_SetConfig+0x210>)
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d102      	bne.n	8005e04 <UART_SetConfig+0x110>
 8005dfe:	2320      	movs	r3, #32
 8005e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e02:	e001      	b.n	8005e08 <UART_SetConfig+0x114>
 8005e04:	2300      	movs	r3, #0
 8005e06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f04 <UART_SetConfig+0x210>)
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d005      	beq.n	8005e1e <UART_SetConfig+0x12a>
 8005e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b3d      	ldr	r3, [pc, #244]	@ (8005f0c <UART_SetConfig+0x218>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	f040 8085 	bne.w	8005f28 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e20:	2200      	movs	r2, #0
 8005e22:	623b      	str	r3, [r7, #32]
 8005e24:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e2a:	f7fe fc2d 	bl	8004688 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e2e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80e8 	beq.w	8006008 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	4a39      	ldr	r2, [pc, #228]	@ (8005f24 <UART_SetConfig+0x230>)
 8005e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d305      	bcc.n	8005e68 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d903      	bls.n	8005e70 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e6e:	e048      	b.n	8005f02 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e72:	2200      	movs	r2, #0
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	61fa      	str	r2, [r7, #28]
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	4a29      	ldr	r2, [pc, #164]	@ (8005f24 <UART_SetConfig+0x230>)
 8005e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2200      	movs	r2, #0
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	617a      	str	r2, [r7, #20]
 8005e8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e92:	f7fa f9f1 	bl	8000278 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	020b      	lsls	r3, r1, #8
 8005ea8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005eac:	0202      	lsls	r2, r0, #8
 8005eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eb0:	6849      	ldr	r1, [r1, #4]
 8005eb2:	0849      	lsrs	r1, r1, #1
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	4605      	mov	r5, r0
 8005eba:	eb12 0804 	adds.w	r8, r2, r4
 8005ebe:	eb43 0905 	adc.w	r9, r3, r5
 8005ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	60fa      	str	r2, [r7, #12]
 8005ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	f7fa f9d0 	bl	8000278 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4613      	mov	r3, r2
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee6:	d308      	bcc.n	8005efa <UART_SetConfig+0x206>
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eee:	d204      	bcs.n	8005efa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	e003      	b.n	8005f02 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8005f00:	e082      	b.n	8006008 <UART_SetConfig+0x314>
 8005f02:	e081      	b.n	8006008 <UART_SetConfig+0x314>
 8005f04:	46002400 	.word	0x46002400
 8005f08:	cfff69f3 	.word	0xcfff69f3
 8005f0c:	56002400 	.word	0x56002400
 8005f10:	40013800 	.word	0x40013800
 8005f14:	40004400 	.word	0x40004400
 8005f18:	40004800 	.word	0x40004800
 8005f1c:	40004c00 	.word	0x40004c00
 8005f20:	40005000 	.word	0x40005000
 8005f24:	080067c4 	.word	0x080067c4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f30:	d13c      	bne.n	8005fac <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f34:	2200      	movs	r2, #0
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f3e:	f7fe fba3 	bl	8004688 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f42:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d05e      	beq.n	8006008 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	4a39      	ldr	r2, [pc, #228]	@ (8006034 <UART_SetConfig+0x340>)
 8005f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f54:	461a      	mov	r2, r3
 8005f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5c:	005a      	lsls	r2, r3, #1
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	441a      	add	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d916      	bls.n	8005fa4 <UART_SetConfig+0x2b0>
 8005f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7c:	d212      	bcs.n	8005fa4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f023 030f 	bic.w	r3, r3, #15
 8005f86:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005f96:	4313      	orrs	r3, r2
 8005f98:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	e031      	b.n	8006008 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005faa:	e02d      	b.n	8006008 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fae:	2200      	movs	r2, #0
 8005fb0:	469a      	mov	sl, r3
 8005fb2:	4693      	mov	fp, r2
 8005fb4:	4650      	mov	r0, sl
 8005fb6:	4659      	mov	r1, fp
 8005fb8:	f7fe fb66 	bl	8004688 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fbc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d021      	beq.n	8006008 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8006034 <UART_SetConfig+0x340>)
 8005fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	441a      	add	r2, r3
 8005fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fea:	2b0f      	cmp	r3, #15
 8005fec:	d909      	bls.n	8006002 <UART_SetConfig+0x30e>
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d205      	bcs.n	8006002 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60da      	str	r2, [r3, #12]
 8006000:	e002      	b.n	8006008 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	2201      	movs	r2, #1
 800600c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006012:	2201      	movs	r2, #1
 8006014:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	2200      	movs	r2, #0
 800601c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800601e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006020:	2200      	movs	r2, #0
 8006022:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006024:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006028:	4618      	mov	r0, r3
 800602a:	3750      	adds	r7, #80	@ 0x50
 800602c:	46bd      	mov	sp, r7
 800602e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006032:	bf00      	nop
 8006034:	080067c4 	.word	0x080067c4

08006038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01a      	beq.n	800614e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006136:	d10a      	bne.n	800614e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b098      	sub	sp, #96	@ 0x60
 8006180:	af02      	add	r7, sp, #8
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800618c:	f7fa fe00 	bl	8000d90 <HAL_GetTick>
 8006190:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b08      	cmp	r3, #8
 800619e:	d12f      	bne.n	8006200 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f88e 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d022      	beq.n	8006200 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e6      	bne.n	80061ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e063      	b.n	80062c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b04      	cmp	r3, #4
 800620c:	d149      	bne.n	80062a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006216:	2200      	movs	r2, #0
 8006218:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f857 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d03c      	beq.n	80062a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	623b      	str	r3, [r7, #32]
   return(result);
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800623c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006246:	633b      	str	r3, [r7, #48]	@ 0x30
 8006248:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800624c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e6      	bne.n	8006228 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	60fb      	str	r3, [r7, #12]
   return(result);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800627a:	61fa      	str	r2, [r7, #28]
 800627c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	617b      	str	r3, [r7, #20]
   return(result);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e012      	b.n	80062c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3758      	adds	r7, #88	@ 0x58
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e0:	e04f      	b.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d04b      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7fa fd51 	bl	8000d90 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e04e      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d037      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b80      	cmp	r3, #128	@ 0x80
 8006316:	d034      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b40      	cmp	r3, #64	@ 0x40
 800631c:	d031      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d110      	bne.n	800634e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2208      	movs	r2, #8
 8006332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f838 	bl	80063aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2208      	movs	r2, #8
 800633e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e029      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800635c:	d111      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f81e 	bl	80063aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e00f      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4013      	ands	r3, r2
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	bf0c      	ite	eq
 8006392:	2301      	moveq	r3, #1
 8006394:	2300      	movne	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	429a      	cmp	r2, r3
 800639e:	d0a0      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b095      	sub	sp, #84	@ 0x54
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80063d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e6      	bne.n	80063b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3308      	adds	r3, #8
 8006406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006408:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800640a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800640e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e3      	bne.n	80063e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d118      	bne.n	8006456 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	60bb      	str	r3, [r7, #8]
   return(result);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f023 0310 	bic.w	r3, r3, #16
 8006438:	647b      	str	r3, [r7, #68]	@ 0x44
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6979      	ldr	r1, [r7, #20]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	613b      	str	r3, [r7, #16]
   return(result);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e6      	bne.n	8006424 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800646a:	bf00      	nop
 800646c:	3754      	adds	r7, #84	@ 0x54
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_UARTEx_DisableFifoMode+0x16>
 8006488:	2302      	movs	r3, #2
 800648a:	e027      	b.n	80064dc <HAL_UARTEx_DisableFifoMode+0x66>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	@ 0x24
 8006498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e02d      	b.n	800655c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2224      	movs	r2, #36	@ 0x24
 800650c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f84f 	bl	80065e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006578:	2302      	movs	r3, #2
 800657a:	e02d      	b.n	80065d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	@ 0x24
 8006588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f811 	bl	80065e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d108      	bne.n	8006602 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006600:	e031      	b.n	8006666 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006602:	2308      	movs	r3, #8
 8006604:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006606:	2308      	movs	r3, #8
 8006608:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	0e5b      	lsrs	r3, r3, #25
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	0f5b      	lsrs	r3, r3, #29
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	7b3a      	ldrb	r2, [r7, #12]
 800662e:	4911      	ldr	r1, [pc, #68]	@ (8006674 <UARTEx_SetNbDataToProcess+0x94>)
 8006630:	5c8a      	ldrb	r2, [r1, r2]
 8006632:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006636:	7b3a      	ldrb	r2, [r7, #12]
 8006638:	490f      	ldr	r1, [pc, #60]	@ (8006678 <UARTEx_SetNbDataToProcess+0x98>)
 800663a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800663c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	7b7a      	ldrb	r2, [r7, #13]
 800664c:	4909      	ldr	r1, [pc, #36]	@ (8006674 <UARTEx_SetNbDataToProcess+0x94>)
 800664e:	5c8a      	ldrb	r2, [r1, r2]
 8006650:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006654:	7b7a      	ldrb	r2, [r7, #13]
 8006656:	4908      	ldr	r1, [pc, #32]	@ (8006678 <UARTEx_SetNbDataToProcess+0x98>)
 8006658:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800665a:	fb93 f3f2 	sdiv	r3, r3, r2
 800665e:	b29a      	uxth	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	080067dc 	.word	0x080067dc
 8006678:	080067e4 	.word	0x080067e4

0800667c <memset>:
 800667c:	4402      	add	r2, r0
 800667e:	4603      	mov	r3, r0
 8006680:	4293      	cmp	r3, r2
 8006682:	d100      	bne.n	8006686 <memset+0xa>
 8006684:	4770      	bx	lr
 8006686:	f803 1b01 	strb.w	r1, [r3], #1
 800668a:	e7f9      	b.n	8006680 <memset+0x4>

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4d0d      	ldr	r5, [pc, #52]	@ (80066c4 <__libc_init_array+0x38>)
 8006690:	2600      	movs	r6, #0
 8006692:	4c0d      	ldr	r4, [pc, #52]	@ (80066c8 <__libc_init_array+0x3c>)
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	4d0b      	ldr	r5, [pc, #44]	@ (80066cc <__libc_init_array+0x40>)
 800669e:	2600      	movs	r6, #0
 80066a0:	4c0b      	ldr	r4, [pc, #44]	@ (80066d0 <__libc_init_array+0x44>)
 80066a2:	f000 f817 	bl	80066d4 <_init>
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b4:	3601      	adds	r6, #1
 80066b6:	4798      	blx	r3
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80066be:	3601      	adds	r6, #1
 80066c0:	4798      	blx	r3
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	080067f4 	.word	0x080067f4
 80066c8:	080067f4 	.word	0x080067f4
 80066cc:	080067f4 	.word	0x080067f4
 80066d0:	080067f8 	.word	0x080067f8

080066d4 <_init>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr

080066e0 <_fini>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr
