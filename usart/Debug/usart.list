
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce8  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007020  08007020  00008020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007028  08007028  00008028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800702c  0800702c  0000802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000021  20000000  08007030  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  20000024  08007051  00009024  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000164  08007051  00009164  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00009021  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012d38  00000000  00000000  00009057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002116  00000000  00000000  0001bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e58  00000000  00000000  0001dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b15  00000000  00000000  0001ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032cbd  00000000  00000000  0001f815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011c75  00000000  00000000  000524d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a330  00000000  00000000  00064147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ae477  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c9c  00000000  00000000  001ae4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001b2158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000024 	.word	0x20000024
 8000254:	00000000 	.word	0x00000000
 8000258:	08006f08 	.word	0x08006f08

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000028 	.word	0x20000028
 8000274:	08006f08 	.word	0x08006f08

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fab2 	bl	8000b60 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f818 	bl	8000630 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f8f4 	bl	80007ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000604:	f000 f862 	bl	80006cc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000608:	f000 f8a4 	bl	8000754 <MX_USART2_UART_Init>

  /* Infinite loop */
  while (1)
  {
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_data, sizeof(tx_data), HAL_MAX_DELAY);
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	2217      	movs	r2, #23
 8000612:	4905      	ldr	r1, [pc, #20]	@ (8000628 <main+0x34>)
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <main+0x38>)
 8000616:	f005 fb9f 	bl	8005d58 <HAL_UART_Transmit>
    HAL_Delay(1000); // add delay so it doesn’t spam UART too fast
 800061a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800061e:	f000 fb65 	bl	8000cec <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_data, sizeof(tx_data), HAL_MAX_DELAY);
 8000622:	bf00      	nop
 8000624:	e7f2      	b.n	800060c <main+0x18>
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000
 800062c:	200000cc 	.word	0x200000cc

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09e      	sub	sp, #120	@ 0x78
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2260      	movs	r2, #96	@ 0x60
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fc36 	bl	8006eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000654:	2000      	movs	r0, #0
 8000656:	f001 fb4f 	bl	8001cf8 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f000 f8ee 	bl	8000840 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000664:	2312      	movs	r3, #18
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000676:	2310      	movs	r3, #16
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800067a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fbd1 	bl	8001e30 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000694:	f000 f8d4 	bl	8000840 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	231f      	movs	r3, #31
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fa97 	bl	8002be8 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f8be 	bl	8000840 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3778      	adds	r7, #120	@ 0x78
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MX_ADC1_Init>:

/**
  * @brief ADC1 Initialization Function
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  hadc1.Instance = ADC1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <MX_ADC1_Init+0x80>)
 80006d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <MX_ADC1_Init+0x84>)
 80006d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_ADC1_Init+0x80>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_ADC1_Init+0x80>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_ADC1_Init+0x80>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_ADC1_Init+0x80>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_ADC1_Init+0x80>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_ADC1_Init+0x80>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_ADC1_Init+0x80>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_ADC1_Init+0x80>)
 8000704:	2201      	movs	r2, #1
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_ADC1_Init+0x80>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_ADC1_Init+0x80>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_ADC1_Init+0x80>)
 800071a:	2200      	movs	r2, #0
 800071c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_ADC1_Init+0x80>)
 8000720:	2200      	movs	r2, #0
 8000722:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_ADC1_Init+0x80>)
 8000726:	2200      	movs	r2, #0
 8000728:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_ADC1_Init+0x80>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_ADC1_Init+0x80>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_ADC1_Init+0x80>)
 800073a:	f000 fbf9 	bl	8000f30 <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000744:	f000 f87c 	bl	8000840 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000040 	.word	0x20000040
 8000750:	42028000 	.word	0x42028000

08000754 <MX_USART2_UART_Init>:

/**
  * @brief USART2 Initialization Function
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800075a:	4a23      	ldr	r2, [pc, #140]	@ (80007e8 <MX_USART2_UART_Init+0x94>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800079e:	f005 fa8b 	bl	8005cb8 <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f84a 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 80007b0:	f006 fab3 	bl	8006d1a <HAL_UARTEx_SetTxFifoThreshold>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007ba:	f000 f841 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 80007c2:	f006 fae8 	bl	8006d96 <HAL_UARTEx_SetRxFifoThreshold>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007cc:	f000 f838 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 80007d2:	f006 fa69 	bl	8006ca8 <HAL_UARTEx_DisableFifoMode>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f830 	bl	8000840 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000cc 	.word	0x200000cc
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_GPIO_Init+0x50>)
 80007f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f8:	4a10      	ldr	r2, [pc, #64]	@ (800083c <MX_GPIO_Init+0x50>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_GPIO_Init+0x50>)
 8000804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_GPIO_Init+0x50>)
 8000812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000816:	4a09      	ldr	r2, [pc, #36]	@ (800083c <MX_GPIO_Init+0x50>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_GPIO_Init+0x50>)
 8000822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	46020c00 	.word	0x46020c00

08000840 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HAL_MspInit+0x30>)
 8000854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000858:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_MspInit+0x30>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_MspInit+0x30>)
 8000864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000870:	f001 face 	bl	8001e10 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	46020c00 	.word	0x46020c00

08000880 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0ba      	sub	sp, #232	@ 0xe8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	22c0      	movs	r2, #192	@ 0xc0
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 fb05 	bl	8006eb0 <memset>
  if(hadc->Instance==ADC1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a24      	ldr	r2, [pc, #144]	@ (800093c <HAL_ADC_MspInit+0xbc>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d140      	bne.n	8000932 <HAL_ADC_MspInit+0xb2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80008b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008b4:	f04f 0300 	mov.w	r3, #0
 80008b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80008bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fd5d 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80008d4:	f7ff ffb4 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <HAL_ADC_MspInit+0xc0>)
 80008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008de:	4a18      	ldr	r2, [pc, #96]	@ (8000940 <HAL_ADC_MspInit+0xc0>)
 80008e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <HAL_ADC_MspInit+0xc0>)
 80008ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_ADC_MspInit+0xc0>)
 80008f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008fc:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <HAL_ADC_MspInit+0xc0>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <HAL_ADC_MspInit+0xc0>)
 8000908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000914:	2301      	movs	r3, #1
 8000916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091a:	2303      	movs	r3, #3
 800091c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <HAL_ADC_MspInit+0xc4>)
 800092e:	f001 f803 	bl	8001938 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000932:	bf00      	nop
 8000934:	37e8      	adds	r7, #232	@ 0xe8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	42028000 	.word	0x42028000
 8000940:	46020c00 	.word	0x46020c00
 8000944:	42020800 	.word	0x42020800

08000948 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0ba      	sub	sp, #232	@ 0xe8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	22c0      	movs	r2, #192	@ 0xc0
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f006 faa1 	bl	8006eb0 <memset>
  if(huart->Instance==USART2)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a2a      	ldr	r2, [pc, #168]	@ (8000a1c <HAL_UART_MspInit+0xd4>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d14c      	bne.n	8000a12 <HAL_UART_MspInit+0xca>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000978:	f04f 0202 	mov.w	r2, #2
 800097c:	f04f 0300 	mov.w	r3, #0
 8000980:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fcfb 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000998:	f7ff ff52 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099c:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <HAL_UART_MspInit+0xd8>)
 800099e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80009a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <HAL_UART_MspInit+0xd8>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <HAL_UART_MspInit+0xd8>)
 80009ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80009b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <HAL_UART_MspInit+0xd8>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c0:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <HAL_UART_MspInit+0xd8>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_UART_MspInit+0xd8>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d8:	230c      	movs	r3, #12
 80009da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f0:	2307      	movs	r3, #7
 80009f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <HAL_UART_MspInit+0xdc>)
 80009fe:	f000 ff9b 	bl	8001938 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	203e      	movs	r0, #62	@ 0x3e
 8000a08:	f000 fe14 	bl	8001634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a0c:	203e      	movs	r0, #62	@ 0x3e
 8000a0e:	f000 fe2b 	bl	8001668 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a12:	bf00      	nop
 8000a14:	37e8      	adds	r7, #232	@ 0xe8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	46020c00 	.word	0x46020c00
 8000a24:	42020000 	.word	0x42020000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 f915 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <USART2_IRQHandler+0x10>)
 8000a8e:	f005 fa01 	bl	8005e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000cc 	.word	0x200000cc

08000a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <SystemInit+0x68>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <SystemInit+0x68>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <SystemInit+0x6c>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <SystemInit+0x6c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <SystemInit+0x6c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <SystemInit+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <SystemInit+0x6c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <SystemInit+0x6c>)
 8000ace:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000ad2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000ad6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <SystemInit+0x6c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <SystemInit+0x6c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <SystemInit+0x6c>)
 8000ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ae8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <SystemInit+0x6c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <SystemInit+0x68>)
 8000af2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000af6:	609a      	str	r2, [r3, #8]
  #endif
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	46020c00 	.word	0x46020c00

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b10:	f7ff ffc4 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b16:	e003      	b.n	8000b20 <LoopCopyDataInit>

08000b18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b1e:	3104      	adds	r1, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b20:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b28:	d3f6      	bcc.n	8000b18 <CopyDataInit>
	ldr	r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b2c:	e002      	b.n	8000b34 <LoopFillZerobss>

08000b2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b30:	f842 3b04 	str.w	r3, [r2], #4

08000b34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <LoopForever+0x16>)
	cmp	r2, r3
 8000b36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b38:	d3f9      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f006 f9c1 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fd59 	bl	80005f4 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b44:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000b48:	08007030 	.word	0x08007030
	ldr	r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b50:	20000021 	.word	0x20000021
	ldr	r2, =_sbss
 8000b54:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000b58:	20000164 	.word	0x20000164

08000b5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_Init+0x50>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a11      	ldr	r2, [pc, #68]	@ (8000bb0 <HAL_Init+0x50>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 fd54 	bl	800161e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b76:	f002 fa29 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <HAL_Init+0x54>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <HAL_Init+0x58>)
 8000b86:	5ccb      	ldrb	r3, [r1, r3]
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <HAL_Init+0x5c>)
 8000b8e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b90:	2004      	movs	r0, #4
 8000b92:	f000 fd99 	bl	80016c8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f812 	bl	8000bc0 <HAL_InitTick>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e002      	b.n	8000bac <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba6:	f7ff fe51 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40022000 	.word	0x40022000
 8000bb4:	46020c00 	.word	0x46020c00
 8000bb8:	08006f20 	.word	0x08006f20
 8000bbc:	20000018 	.word	0x20000018

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000bcc:	4b33      	ldr	r3, [pc, #204]	@ (8000c9c <HAL_InitTick+0xdc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e05c      	b.n	8000c92 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000bd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <HAL_InitTick+0xe0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d10c      	bne.n	8000bfe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000be4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <HAL_InitTick+0xe4>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <HAL_InitTick+0xdc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e037      	b.n	8000c6e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000bfe:	f000 fdbb 	bl	8001778 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c02:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d023      	beq.n	8000c52 <HAL_InitTick+0x92>
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d82d      	bhi.n	8000c6c <HAL_InitTick+0xac>
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_InitTick+0x5e>
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d00d      	beq.n	8000c38 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c1c:	e026      	b.n	8000c6c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <HAL_InitTick+0xe4>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <HAL_InitTick+0xdc>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000c2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	60fb      	str	r3, [r7, #12]
        break;
 8000c36:	e01a      	b.n	8000c6e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <HAL_InitTick+0xdc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c46:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	60fb      	str	r3, [r7, #12]
        break;
 8000c50:	e00d      	b.n	8000c6e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_InitTick+0xdc>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c68:	60fb      	str	r3, [r7, #12]
        break;
 8000c6a:	e000      	b.n	8000c6e <HAL_InitTick+0xae>
        break;
 8000c6c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f000 fd08 	bl	8001684 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e009      	b.n	8000c92 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295
 8000c86:	f000 fcd5 	bl	8001634 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000c8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_InitTick+0xe8>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000020 	.word	0x20000020
 8000ca0:	e000e010 	.word	0xe000e010
 8000ca4:	20000018 	.word	0x20000018
 8000ca8:	2000001c 	.word	0x2000001c

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000020 	.word	0x20000020
 8000cd0:	20000160 	.word	0x20000160

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	@ (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000160 	.word	0x20000160

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000020 	.word	0x20000020

08000d34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <LL_ADC_SetResolution+0x3c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d104      	bne.n	8000d7c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	f023 020c 	bic.w	r2, r3, #12
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	431a      	orrs	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	46021000 	.word	0x46021000

08000d9c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000daa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000dae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d002      	beq.n	8000dce <LL_ADC_SetGainCompensation+0x32>
 8000dc8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dcc:	e000      	b.n	8000dd0 <LL_ADC_SetGainCompensation+0x34>
 8000dce:	2200      	movs	r2, #0
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2107      	movs	r1, #7
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	401a      	ands	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6093      	str	r3, [r2, #8]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e58:	d101      	bne.n	8000e5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000ea8:	d101      	bne.n	8000eae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d101      	bne.n	8000ed4 <LL_ADC_IsEnabled+0x18>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <LL_ADC_IsEnabled+0x1a>
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d101      	bne.n	8000efa <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d101      	bne.n	8000f20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e2b3      	b.n	80014b8 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a8b      	ldr	r2, [pc, #556]	@ (800118c <HAL_ADC_Init+0x25c>)
 8000f5e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fc89 	bl	8000880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5f 	bl	8000e44 <LL_ADC_IsDeepPowerDownEnabled>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d004      	beq.n	8000f96 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff45 	bl	8000e20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff7a 	bl	8000e94 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d115      	bne.n	8000fd2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff5e 	bl	8000e6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fb0:	4b77      	ldr	r3, [pc, #476]	@ (8001190 <HAL_ADC_Init+0x260>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	099b      	lsrs	r3, r3, #6
 8000fb6:	4a77      	ldr	r2, [pc, #476]	@ (8001194 <HAL_ADC_Init+0x264>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fc4:	e002      	b.n	8000fcc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f9      	bne.n	8000fc6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff5c 	bl	8000e94 <LL_ADC_IsInternalRegulatorEnabled>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10e      	bne.n	8001000 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000fe6:	f043 0210 	orr.w	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff6c 	bl	8000ee2 <LL_ADC_REG_IsConversionOngoing>
 800100a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 8244 	bne.w	80014a2 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f040 8240 	bne.w	80014a2 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001026:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800102a:	f043 0202 	orr.w	r2, r3, #2
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff40 	bl	8000ebc <LL_ADC_IsEnabled>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d140      	bne.n	80010c4 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a51      	ldr	r2, [pc, #324]	@ (800118c <HAL_ADC_Init+0x25c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d028      	beq.n	800109e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a51      	ldr	r2, [pc, #324]	@ (8001198 <HAL_ADC_Init+0x268>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d109      	bne.n	800106a <HAL_ADC_Init+0x13a>
 8001056:	4850      	ldr	r0, [pc, #320]	@ (8001198 <HAL_ADC_Init+0x268>)
 8001058:	f7ff ff30 	bl	8000ebc <LL_ADC_IsEnabled>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	bf0c      	ite	eq
 8001062:	2301      	moveq	r3, #1
 8001064:	2300      	movne	r3, #0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	e008      	b.n	800107c <HAL_ADC_Init+0x14c>
 800106a:	4848      	ldr	r0, [pc, #288]	@ (800118c <HAL_ADC_Init+0x25c>)
 800106c:	f7ff ff26 	bl	8000ebc <LL_ADC_IsEnabled>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d021      	beq.n	80010c4 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a44      	ldr	r2, [pc, #272]	@ (8001198 <HAL_ADC_Init+0x268>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x15e>
 800108a:	4a44      	ldr	r2, [pc, #272]	@ (800119c <HAL_ADC_Init+0x26c>)
 800108c:	e000      	b.n	8001090 <HAL_ADC_Init+0x160>
 800108e:	4a44      	ldr	r2, [pc, #272]	@ (80011a0 <HAL_ADC_Init+0x270>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f7ff fe4c 	bl	8000d34 <LL_ADC_SetCommonClock>
 800109c:	e012      	b.n	80010c4 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f7ff fe57 	bl	8000d5c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80010ae:	4b3c      	ldr	r3, [pc, #240]	@ (80011a0 <HAL_ADC_Init+0x270>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80010be:	4938      	ldr	r1, [pc, #224]	@ (80011a0 <HAL_ADC_Init+0x270>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a30      	ldr	r2, [pc, #192]	@ (800118c <HAL_ADC_Init+0x25c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d010      	beq.n	80010f0 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010d4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80010da:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80010e0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80010e8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80010ea:	4313      	orrs	r3, r2
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	e030      	b.n	8001152 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7f1b      	ldrb	r3, [r3, #28]
 80010f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010fc:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010fe:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001104:	2a00      	cmp	r2, #0
 8001106:	d002      	beq.n	800110e <HAL_ADC_Init+0x1de>
 8001108:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800110c:	e000      	b.n	8001110 <HAL_ADC_Init+0x1e0>
 800110e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001110:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001116:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	da04      	bge.n	800112a <HAL_ADC_Init+0x1fa>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001128:	e001      	b.n	800112e <HAL_ADC_Init+0x1fe>
 800112a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800112e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4918      	ldr	r1, [pc, #96]	@ (8001198 <HAL_ADC_Init+0x268>)
 8001136:	428b      	cmp	r3, r1
 8001138:	d103      	bne.n	8001142 <HAL_ADC_Init+0x212>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001140:	e003      	b.n	800114a <HAL_ADC_Init+0x21a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001148:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800114a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800114c:	6a3a      	ldr	r2, [r7, #32]
 800114e:	4313      	orrs	r3, r2
 8001150:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001158:	2b01      	cmp	r3, #1
 800115a:	d12f      	bne.n	80011bc <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_ADC_Init+0x25c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	3b01      	subs	r3, #1
 800116c:	045b      	lsls	r3, r3, #17
 800116e:	6a3a      	ldr	r2, [r7, #32]
 8001170:	4313      	orrs	r3, r2
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	e022      	b.n	80011bc <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800117c:	2b00      	cmp	r3, #0
 800117e:	d111      	bne.n	80011a4 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	e018      	b.n	80011bc <HAL_ADC_Init+0x28c>
 800118a:	bf00      	nop
 800118c:	46021000 	.word	0x46021000
 8001190:	20000018 	.word	0x20000018
 8001194:	053e2d63 	.word	0x053e2d63
 8001198:	42028000 	.word	0x42028000
 800119c:	42028308 	.word	0x42028308
 80011a0:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80011a8:	f043 0220 	orr.w	r2, r3, #32
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a92      	ldr	r2, [pc, #584]	@ (800140c <HAL_ADC_Init+0x4dc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d018      	beq.n	80011f8 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011da:	4313      	orrs	r3, r2
 80011dc:	6a3a      	ldr	r2, [r7, #32]
 80011de:	4313      	orrs	r3, r2
 80011e0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	4b89      	ldr	r3, [pc, #548]	@ (8001410 <HAL_ADC_Init+0x4e0>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	6a39      	ldr	r1, [r7, #32]
 80011f2:	430b      	orrs	r3, r1
 80011f4:	60d3      	str	r3, [r2, #12]
 80011f6:	e031      	b.n	800125c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001204:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120c:	4313      	orrs	r3, r2
 800120e:	6a3a      	ldr	r2, [r7, #32]
 8001210:	4313      	orrs	r3, r2
 8001212:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	4b7e      	ldr	r3, [pc, #504]	@ (8001414 <HAL_ADC_Init+0x4e4>)
 800121c:	4013      	ands	r3, r2
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	6a39      	ldr	r1, [r7, #32]
 8001224:	430b      	orrs	r3, r1
 8001226:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a6a      	ldr	r2, [pc, #424]	@ (800140c <HAL_ADC_Init+0x4dc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	f000 8093 	beq.w	800138e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe38 	bl	8000ee2 <LL_ADC_REG_IsConversionOngoing>
 8001272:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe45 	bl	8000f08 <LL_ADC_INJ_IsConversionOngoing>
 800127e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d161      	bne.n	800134a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d15e      	bne.n	800134a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7f1b      	ldrb	r3, [r3, #28]
 8001290:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4960      	ldr	r1, [pc, #384]	@ (8001418 <HAL_ADC_Init+0x4e8>)
 8001298:	428b      	cmp	r3, r1
 800129a:	d102      	bne.n	80012a2 <HAL_ADC_Init+0x372>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a0:	e002      	b.n	80012a8 <HAL_ADC_Init+0x378>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a6:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012a8:	4313      	orrs	r3, r2
 80012aa:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	6a39      	ldr	r1, [r7, #32]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4610      	mov	r0, r2
 80012d8:	f7ff fd60 	bl	8000d9c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11e      	bne.n	8001324 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ea:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	4b4a      	ldr	r3, [pc, #296]	@ (800141c <HAL_ADC_Init+0x4ec>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80012fa:	0411      	lsls	r1, r2, #16
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001300:	4311      	orrs	r1, r2
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001306:	4311      	orrs	r1, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800130c:	4311      	orrs	r1, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001312:	0892      	lsrs	r2, r2, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	e007      	b.n	8001334 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d10c      	bne.n	800136c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	f023 010f 	bic.w	r1, r3, #15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	631a      	str	r2, [r3, #48]	@ 0x30
 800136a:	e007      	b.n	800137c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 020f 	bic.w	r2, r2, #15
 800137a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001380:	f023 0303 	bic.w	r3, r3, #3
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800138c:	e092      	b.n	80014b4 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001394:	2b01      	cmp	r3, #1
 8001396:	d111      	bne.n	80013bc <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80013a0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80013a6:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80013ac:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <HAL_ADC_Init+0x4f0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	69f9      	ldr	r1, [r7, #28]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d8:	461a      	mov	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	f7ff fd01 	bl	8000de2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e8:	461a      	mov	r2, r3
 80013ea:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80013ee:	f7ff fcf8 	bl	8000de2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d114      	bne.n	8001424 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f062 020f 	orn	r2, r2, #15
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
 800140a:	e024      	b.n	8001456 <HAL_ADC_Init+0x526>
 800140c:	46021000 	.word	0x46021000
 8001410:	fff0c013 	.word	0xfff0c013
 8001414:	ffde800d 	.word	0xffde800d
 8001418:	42028000 	.word	0x42028000
 800141c:	fc00f81e 	.word	0xfc00f81e
 8001420:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800142c:	d113      	bne.n	8001456 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001438:	3b01      	subs	r3, #1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	f003 031c 	and.w	r3, r3, #28
 8001440:	f06f 020f 	mvn.w	r2, #15
 8001444:	fa02 f103 	lsl.w	r1, r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_ADC_Init+0x590>)
 800145e:	4013      	ands	r3, r2
 8001460:	6a3a      	ldr	r2, [r7, #32]
 8001462:	429a      	cmp	r2, r3
 8001464:	d10b      	bne.n	800147e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001470:	f023 0303 	bic.w	r3, r3, #3
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800147c:	e01a      	b.n	80014b4 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001482:	f023 0312 	bic.w	r3, r3, #18
 8001486:	f043 0210 	orr.w	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80014a0:	e008      	b.n	80014b4 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80014a6:	f043 0210 	orr.w	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80014b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	833ffff3 	.word	0x833ffff3

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	@ (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	@ 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff4c 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001642:	f7ff ff63 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7ff ffb3 	bl	80015b8 <NVIC_EncodePriority>
 8001652:	4602      	mov	r2, r0
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff82 	bl	8001564 <__NVIC_SetPriority>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff56 	bl	8001528 <__NVIC_EnableIRQ>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001694:	d301      	bcc.n	800169a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001696:	2301      	movs	r3, #1
 8001698:	e00d      	b.n	80016b6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <HAL_SYSTICK_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <HAL_SYSTICK_Config+0x40>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_SYSTICK_Config+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <HAL_SYSTICK_Config+0x40>)
 80016ae:	f043 0303 	orr.w	r3, r3, #3
 80016b2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d844      	bhi.n	8001760 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80016d6:	a201      	add	r2, pc, #4	@ (adr r2, 80016dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	080016ff 	.word	0x080016ff
 80016e0:	0800171d 	.word	0x0800171d
 80016e4:	0800173f 	.word	0x0800173f
 80016e8:	08001761 	.word	0x08001761
 80016ec:	080016f1 	.word	0x080016f1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6013      	str	r3, [r2, #0]
      break;
 80016fc:	e031      	b.n	8001762 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001712:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800171a:	e022      	b.n	8001762 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001732:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001734:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800173c:	e011      	b.n	8001762 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001750:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001756:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800175e:	e000      	b.n	8001762 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001760:	bf00      	nop
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010
 8001774:	46020c00 	.word	0x46020c00

08001778 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800178a:	2304      	movs	r3, #4
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	e021      	b.n	80017d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001796:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800179a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80017a2:	d011      	beq.n	80017c8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80017aa:	d810      	bhi.n	80017ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017b8:	d003      	beq.n	80017c2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80017ba:	e008      	b.n	80017ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
        break;
 80017c0:	e008      	b.n	80017d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80017c2:	2301      	movs	r3, #1
 80017c4:	607b      	str	r3, [r7, #4]
        break;
 80017c6:	e005      	b.n	80017d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80017c8:	2302      	movs	r3, #2
 80017ca:	607b      	str	r3, [r7, #4]
        break;
 80017cc:	e002      	b.n	80017d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
        break;
 80017d2:	bf00      	nop
    }
  }
  return systick_source;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010
 80017e8:	46020c00 	.word	0x46020c00

080017ec <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80017f4:	f7ff fa6e 	bl	8000cd4 <HAL_GetTick>
 80017f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e06b      	b.n	80018dc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e05c      	b.n	80018dc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0204 	orr.w	r2, r2, #4
 8001830:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2205      	movs	r2, #5
 8001836:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800183a:	e020      	b.n	800187e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800183c:	f7ff fa4a 	bl	8000cd4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b05      	cmp	r3, #5
 8001848:	d919      	bls.n	800187e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	f043 0210 	orr.w	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186e:	2201      	movs	r2, #1
 8001870:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e02e      	b.n	80018dc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0d7      	beq.n	800183c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0202 	orr.w	r2, r2, #2
 800189a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80018ac:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018c6:	2201      	movs	r2, #1
 80018c8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e019      	b.n	800192a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d004      	beq.n	800190c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e00e      	b.n	800192a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2204      	movs	r2, #4
 8001910:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800194a:	e1c2      	b.n	8001cd2 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 81b2 	beq.w	8001ccc <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a55      	ldr	r2, [pc, #340]	@ (8001ac0 <HAL_GPIO_Init+0x188>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d15d      	bne.n	8001a2c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001976:	2201      	movs	r2, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	4013      	ands	r3, r2
 8001984:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	4313      	orrs	r3, r2
 8001998:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80019a0:	4a48      	ldr	r2, [pc, #288]	@ (8001ac4 <HAL_GPIO_Init+0x18c>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019a8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80019aa:	4a46      	ldr	r2, [pc, #280]	@ (8001ac4 <HAL_GPIO_Init+0x18c>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3208      	adds	r2, #8
 80019be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220b      	movs	r2, #11
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	3208      	adds	r2, #8
 80019f6:	69f9      	ldr	r1, [r7, #28]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2202      	movs	r2, #2
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e067      	b.n	8001afc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x104>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b12      	cmp	r3, #18
 8001a3a:	d145      	bne.n	8001ac8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f003 020f 	and.w	r2, r3, #15
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	69f9      	ldr	r1, [r7, #28]
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e01e      	b.n	8001afc <HAL_GPIO_Init+0x1c4>
 8001abe:	bf00      	nop
 8001ac0:	46020000 	.word	0x46020000
 8001ac4:	08006f78 	.word	0x08006f78
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d00b      	beq.n	8001b1c <HAL_GPIO_Init+0x1e4>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b10:	2b11      	cmp	r3, #17
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b12      	cmp	r3, #18
 8001b1a:	d130      	bne.n	8001b7e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001b52:	2201      	movs	r2, #1
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 0201 	and.w	r2, r3, #1
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d11b      	bne.n	8001bc6 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d017      	beq.n	8001bc6 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d07c      	beq.n	8001ccc <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001bd2:	4a47      	ldr	r2, [pc, #284]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3318      	adds	r3, #24
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0a9a      	lsrs	r2, r3, #10
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf4 <HAL_GPIO_Init+0x3bc>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	f002 0203 	and.w	r2, r2, #3
 8001c04:	00d2      	lsls	r2, r2, #3
 8001c06:	4093      	lsls	r3, r2
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c0e:	4938      	ldr	r1, [pc, #224]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3318      	adds	r3, #24
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001c1c:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001c40:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001c46:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001c6a:	4a21      	ldr	r2, [pc, #132]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ca4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <HAL_GPIO_Init+0x3b8>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f47f ae35 	bne.w	800194c <HAL_GPIO_Init+0x14>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	3724      	adds	r7, #36	@ 0x24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	46022000 	.word	0x46022000
 8001cf4:	002f7f7f 	.word	0x002f7f7f

08001cf8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001d00:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d08:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d10b      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d18:	d905      	bls.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d1a:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4a32      	ldr	r2, [pc, #200]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d24:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e057      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d30:	d90a      	bls.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d44:	60d3      	str	r3, [r2, #12]
 8001d46:	e007      	b.n	8001d58 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001d50:	4925      	ldr	r1, [pc, #148]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d58:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a24      	ldr	r2, [pc, #144]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	2232      	movs	r2, #50	@ 0x32
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	4a21      	ldr	r2, [pc, #132]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	3301      	adds	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d76:	e002      	b.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f3      	bne.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d01b      	beq.n	8001dce <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a15      	ldr	r2, [pc, #84]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	2232      	movs	r2, #50	@ 0x32
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	4a11      	ldr	r2, [pc, #68]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	099b      	lsrs	r3, r3, #6
 8001db0:	3301      	adds	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001db4:	e002      	b.n	8001dbc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f3      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e000      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	46020800 	.word	0x46020800
 8001dec:	20000018 	.word	0x20000018
 8001df0:	10624dd3 	.word	0x10624dd3

08001df4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	46020800 	.word	0x46020800

08001e10 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_PWREx_EnableVddA+0x1c>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <HAL_PWREx_EnableVddA+0x1c>)
 8001e1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e1e:	6113      	str	r3, [r2, #16]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	46020800 	.word	0x46020800

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	@ 0x38
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f000 bec8 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	4b99      	ldr	r3, [pc, #612]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e54:	4b96      	ldr	r3, [pc, #600]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 816c 	beq.w	8002144 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_RCC_OscConfig+0x52>
 8001e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	f040 80de 	bne.w	8002036 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	f040 80da 	bne.w	8002036 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 bea5 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e94:	4b86      	ldr	r3, [pc, #536]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_RCC_OscConfig+0x7a>
 8001ea0:	4b83      	ldr	r3, [pc, #524]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ea8:	e005      	b.n	8001eb6 <HAL_RCC_OscConfig+0x86>
 8001eaa:	4b81      	ldr	r3, [pc, #516]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d255      	bcs.n	8001f66 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 f9d9 	bl	800327c <RCC_SetFlashLatencyFromMSIRange>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f000 be82 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001ed6:	4b76      	ldr	r3, [pc, #472]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4a75      	ldr	r2, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001edc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ee0:	6093      	str	r3, [r2, #8]
 8001ee2:	4b73      	ldr	r3, [pc, #460]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	4970      	ldr	r1, [pc, #448]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001efc:	d309      	bcc.n	8001f12 <HAL_RCC_OscConfig+0xe2>
 8001efe:	4b6c      	ldr	r3, [pc, #432]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f023 021f 	bic.w	r2, r3, #31
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4969      	ldr	r1, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60cb      	str	r3, [r1, #12]
 8001f10:	e07e      	b.n	8002010 <HAL_RCC_OscConfig+0x1e0>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0a      	bge.n	8001f30 <HAL_RCC_OscConfig+0x100>
 8001f1a:	4b65      	ldr	r3, [pc, #404]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	015b      	lsls	r3, r3, #5
 8001f28:	4961      	ldr	r1, [pc, #388]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60cb      	str	r3, [r1, #12]
 8001f2e:	e06f      	b.n	8002010 <HAL_RCC_OscConfig+0x1e0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f38:	d30a      	bcc.n	8001f50 <HAL_RCC_OscConfig+0x120>
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	4959      	ldr	r1, [pc, #356]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
 8001f4e:	e05f      	b.n	8002010 <HAL_RCC_OscConfig+0x1e0>
 8001f50:	4b57      	ldr	r3, [pc, #348]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	03db      	lsls	r3, r3, #15
 8001f5e:	4954      	ldr	r1, [pc, #336]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e054      	b.n	8002010 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001f66:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4a51      	ldr	r2, [pc, #324]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f70:	6093      	str	r3, [r2, #8]
 8001f72:	4b4f      	ldr	r3, [pc, #316]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	494c      	ldr	r1, [pc, #304]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001f8c:	d309      	bcc.n	8001fa2 <HAL_RCC_OscConfig+0x172>
 8001f8e:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f023 021f 	bic.w	r2, r3, #31
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4945      	ldr	r1, [pc, #276]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	e028      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da0a      	bge.n	8001fc0 <HAL_RCC_OscConfig+0x190>
 8001faa:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	493d      	ldr	r1, [pc, #244]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60cb      	str	r3, [r1, #12]
 8001fbe:	e019      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc8:	d30a      	bcc.n	8001fe0 <HAL_RCC_OscConfig+0x1b0>
 8001fca:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	4935      	ldr	r1, [pc, #212]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60cb      	str	r3, [r1, #12]
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
 8001fe0:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	03db      	lsls	r3, r3, #15
 8001fee:	4930      	ldr	r1, [pc, #192]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 f93c 	bl	800327c <RCC_SetFlashLatencyFromMSIRange>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f000 bde5 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002010:	f001 f8de 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002014:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <HAL_RCC_OscConfig+0x284>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fdd1 	bl	8000bc0 <HAL_InitTick>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 808a 	beq.w	8002142 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800202e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002032:	f000 bdd2 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d066      	beq.n	800210c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800204a:	f7fe fe43 	bl	8000cd4 <HAL_GetTick>
 800204e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002050:	e009      	b.n	8002066 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002052:	f7fe fe3f 	bl	8000cd4 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d902      	bls.n	8002066 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	f000 bdba 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0ef      	beq.n	8002052 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4a0e      	ldr	r2, [pc, #56]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002078:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800207c:	6093      	str	r3, [r2, #8]
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	4909      	ldr	r1, [pc, #36]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002098:	d30e      	bcc.n	80020b8 <HAL_RCC_OscConfig+0x288>
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f023 021f 	bic.w	r2, r3, #31
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4902      	ldr	r1, [pc, #8]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
 80020ac:	e04a      	b.n	8002144 <HAL_RCC_OscConfig+0x314>
 80020ae:	bf00      	nop
 80020b0:	46020c00 	.word	0x46020c00
 80020b4:	2000001c 	.word	0x2000001c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0a      	bge.n	80020d6 <HAL_RCC_OscConfig+0x2a6>
 80020c0:	4b98      	ldr	r3, [pc, #608]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	015b      	lsls	r3, r3, #5
 80020ce:	4995      	ldr	r1, [pc, #596]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
 80020d4:	e036      	b.n	8002144 <HAL_RCC_OscConfig+0x314>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020de:	d30a      	bcc.n	80020f6 <HAL_RCC_OscConfig+0x2c6>
 80020e0:	4b90      	ldr	r3, [pc, #576]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	029b      	lsls	r3, r3, #10
 80020ee:	498d      	ldr	r1, [pc, #564]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e026      	b.n	8002144 <HAL_RCC_OscConfig+0x314>
 80020f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	03db      	lsls	r3, r3, #15
 8002104:	4987      	ldr	r1, [pc, #540]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	60cb      	str	r3, [r1, #12]
 800210a:	e01b      	b.n	8002144 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800210c:	4b85      	ldr	r3, [pc, #532]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a84      	ldr	r2, [pc, #528]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002118:	f7fe fddc 	bl	8000cd4 <HAL_GetTick>
 800211c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800211e:	e009      	b.n	8002134 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002120:	f7fe fdd8 	bl	8000cd4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	f000 bd53 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002134:	4b7b      	ldr	r3, [pc, #492]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ef      	bne.n	8002120 <HAL_RCC_OscConfig+0x2f0>
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002142:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 808b 	beq.w	8002268 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	2b08      	cmp	r3, #8
 8002156:	d005      	beq.n	8002164 <HAL_RCC_OscConfig+0x334>
 8002158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d109      	bne.n	8002172 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002160:	2b03      	cmp	r3, #3
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d17d      	bne.n	8002268 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f000 bd34 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x35a>
 800217c:	4b69      	ldr	r3, [pc, #420]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a68      	ldr	r2, [pc, #416]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e041      	b.n	800220e <HAL_RCC_OscConfig+0x3de>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002192:	d112      	bne.n	80021ba <HAL_RCC_OscConfig+0x38a>
 8002194:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a62      	ldr	r2, [pc, #392]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e029      	b.n	800220e <HAL_RCC_OscConfig+0x3de>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80021c2:	d112      	bne.n	80021ea <HAL_RCC_OscConfig+0x3ba>
 80021c4:	4b57      	ldr	r3, [pc, #348]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a56      	ldr	r2, [pc, #344]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b54      	ldr	r3, [pc, #336]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a53      	ldr	r2, [pc, #332]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b51      	ldr	r3, [pc, #324]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a50      	ldr	r2, [pc, #320]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e011      	b.n	800220e <HAL_RCC_OscConfig+0x3de>
 80021ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b48      	ldr	r3, [pc, #288]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a47      	ldr	r2, [pc, #284]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800220c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d014      	beq.n	8002240 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002216:	f7fe fd5d 	bl	8000cd4 <HAL_GetTick>
 800221a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221c:	e009      	b.n	8002232 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221e:	f7fe fd59 	bl	8000cd4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	@ 0x64
 800222a:	d902      	bls.n	8002232 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	f000 bcd4 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002232:	4b3c      	ldr	r3, [pc, #240]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0ef      	beq.n	800221e <HAL_RCC_OscConfig+0x3ee>
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002240:	f7fe fd48 	bl	8000cd4 <HAL_GetTick>
 8002244:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002246:	e009      	b.n	800225c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe fd44 	bl	8000cd4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d902      	bls.n	800225c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	f000 bcbf 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225c:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ef      	bne.n	8002248 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05f      	beq.n	8002334 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002276:	2b04      	cmp	r3, #4
 8002278:	d005      	beq.n	8002286 <HAL_RCC_OscConfig+0x456>
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d114      	bne.n	80022aa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	2b02      	cmp	r3, #2
 8002284:	d111      	bne.n	80022aa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f000 bca3 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	4920      	ldr	r1, [pc, #128]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022a8:	e044      	b.n	8002334 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d024      	beq.n	80022fc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022be:	f7fe fd09 	bl	8000cd4 <HAL_GetTick>
 80022c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c4:	e009      	b.n	80022da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c6:	f7fe fd05 	bl	8000cd4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d902      	bls.n	80022da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	f000 bc80 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022da:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ef      	beq.n	80022c6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	490b      	ldr	r1, [pc, #44]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	610b      	str	r3, [r1, #16]
 80022fa:	e01b      	b.n	8002334 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a08      	ldr	r2, [pc, #32]	@ (8002324 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002306:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002308:	f7fe fce4 	bl	8000cd4 <HAL_GetTick>
 800230c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fce0 	bl	8000cd4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d904      	bls.n	8002328 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	f000 bc5b 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
 8002324:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002328:	4baf      	ldr	r3, [pc, #700]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ed      	bne.n	8002310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80c8 	beq.w	80024d2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002348:	4ba7      	ldr	r3, [pc, #668]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d111      	bne.n	800237a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4ba4      	ldr	r3, [pc, #656]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235c:	4aa2      	ldr	r2, [pc, #648]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002366:	4ba0      	ldr	r3, [pc, #640]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800237a:	4b9c      	ldr	r3, [pc, #624]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d119      	bne.n	80023ba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002386:	4b99      	ldr	r3, [pc, #612]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	4a98      	ldr	r2, [pc, #608]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7fe fc9f 	bl	8000cd4 <HAL_GetTick>
 8002396:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002398:	e009      	b.n	80023ae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe fc9b 	bl	8000cd4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d902      	bls.n	80023ae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f000 bc16 	b.w	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80023ae:	4b8f      	ldr	r3, [pc, #572]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ef      	beq.n	800239a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d05f      	beq.n	8002482 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80023c2:	4b89      	ldr	r3, [pc, #548]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80023c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d037      	beq.n	8002448 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e3f4      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01b      	beq.n	8002432 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80023fa:	4b7b      	ldr	r3, [pc, #492]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80023fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002400:	4a79      	ldr	r2, [pc, #484]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002402:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002406:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800240a:	f7fe fc63 	bl	8000cd4 <HAL_GetTick>
 800240e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe fc5f 	bl	8000cd4 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b05      	cmp	r3, #5
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e3da      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002424:	4b70      	ldr	r3, [pc, #448]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800242a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ef      	bne.n	8002412 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002432:	4b6d      	ldr	r3, [pc, #436]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002438:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4969      	ldr	r1, [pc, #420]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002448:	4b67      	ldr	r3, [pc, #412]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 800244a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800244e:	4a66      	ldr	r2, [pc, #408]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002450:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002454:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002458:	f7fe fc3c 	bl	8000cd4 <HAL_GetTick>
 800245c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002460:	f7fe fc38 	bl	8000cd4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b05      	cmp	r3, #5
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e3b3      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002472:	4b5d      	ldr	r3, [pc, #372]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ef      	beq.n	8002460 <HAL_RCC_OscConfig+0x630>
 8002480:	e01b      	b.n	80024ba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002482:	4b59      	ldr	r3, [pc, #356]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002488:	4a57      	ldr	r2, [pc, #348]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 800248a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800248e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002492:	f7fe fc1f 	bl	8000cd4 <HAL_GetTick>
 8002496:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249a:	f7fe fc1b 	bl	8000cd4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e396      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024ac:	4b4e      	ldr	r3, [pc, #312]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80024ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ef      	bne.n	800249a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b49      	ldr	r3, [pc, #292]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c8:	4a47      	ldr	r2, [pc, #284]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80024ca:	f023 0304 	bic.w	r3, r3, #4
 80024ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8111 	beq.w	8002702 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b40      	ldr	r3, [pc, #256]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f4:	4b3c      	ldr	r3, [pc, #240]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fa:	4a3b      	ldr	r2, [pc, #236]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002504:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002518:	4b34      	ldr	r3, [pc, #208]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d118      	bne.n	8002556 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002524:	4b31      	ldr	r3, [pc, #196]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	4a30      	ldr	r2, [pc, #192]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002530:	f7fe fbd0 	bl	8000cd4 <HAL_GetTick>
 8002534:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7fe fbcc 	bl	8000cd4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e347      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800254a:	4b28      	ldr	r3, [pc, #160]	@ (80025ec <HAL_RCC_OscConfig+0x7bc>)
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01f      	beq.n	80025a2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002574:	4a1c      	ldr	r2, [pc, #112]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800257e:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002584:	4a18      	ldr	r2, [pc, #96]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800258e:	e018      	b.n	80025c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002590:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002596:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a0:	e00f      	b.n	80025c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80025a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025a8:	4a0f      	ldr	r2, [pc, #60]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80025b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b8:	4a0b      	ldr	r2, [pc, #44]	@ (80025e8 <HAL_RCC_OscConfig+0x7b8>)
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d057      	beq.n	800267a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80025ca:	f7fe fb83 	bl	8000cd4 <HAL_GetTick>
 80025ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d0:	e00e      	b.n	80025f0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fb7f 	bl	8000cd4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d905      	bls.n	80025f0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2f8      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
 80025e8:	46020c00 	.word	0x46020c00
 80025ec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80025f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0e9      	beq.n	80025d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01b      	beq.n	8002642 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800260a:	4b96      	ldr	r3, [pc, #600]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800260c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002610:	4a94      	ldr	r2, [pc, #592]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe fb5a 	bl	8000cd4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e2d3      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002632:	4b8c      	ldr	r3, [pc, #560]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ed      	beq.n	800261c <HAL_RCC_OscConfig+0x7ec>
 8002640:	e053      	b.n	80026ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002642:	4b88      	ldr	r3, [pc, #544]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002648:	4a86      	ldr	r2, [pc, #536]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800264a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800264e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe fb3e 	bl	8000cd4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e2b7      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800266a:	4b7e      	ldr	r3, [pc, #504]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800266c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ed      	bne.n	8002654 <HAL_RCC_OscConfig+0x824>
 8002678:	e037      	b.n	80026ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800267a:	f7fe fb2b 	bl	8000cd4 <HAL_GetTick>
 800267e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fb27 	bl	8000cd4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e2a0      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002698:	4b72      	ldr	r3, [pc, #456]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800269a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ed      	bne.n	8002682 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80026a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80026a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01a      	beq.n	80026ea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80026b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80026bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fb05 	bl	8000cd4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e27e      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026dc:	4b61      	ldr	r3, [pc, #388]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80026de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ed      	bne.n	80026c6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80026f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80026fa:	f023 0304 	bic.w	r3, r3, #4
 80026fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d036      	beq.n	800277c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002716:	4b53      	ldr	r3, [pc, #332]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800271c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002720:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002722:	f7fe fad7 	bl	8000cd4 <HAL_GetTick>
 8002726:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272a:	f7fe fad3 	bl	8000cd4 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e24e      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800273c:	4b49      	ldr	r3, [pc, #292]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x8fa>
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800274a:	4b46      	ldr	r3, [pc, #280]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a45      	ldr	r2, [pc, #276]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002754:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002756:	f7fe fabd 	bl	8000cd4 <HAL_GetTick>
 800275a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800275e:	f7fe fab9 	bl	8000cd4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e234      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002770:	4b3c      	ldr	r3, [pc, #240]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002784:	2b00      	cmp	r3, #0
 8002786:	d036      	beq.n	80027f6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	2b00      	cmp	r3, #0
 800278e:	d019      	beq.n	80027c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a33      	ldr	r2, [pc, #204]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800279a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800279c:	f7fe fa9a 	bl	8000cd4 <HAL_GetTick>
 80027a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80027a4:	f7fe fa96 	bl	8000cd4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e211      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80027b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x974>
 80027c2:	e018      	b.n	80027f6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80027c4:	4b27      	ldr	r3, [pc, #156]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a26      	ldr	r2, [pc, #152]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80027ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80027d0:	f7fe fa80 	bl	8000cd4 <HAL_GetTick>
 80027d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80027d8:	f7fe fa7c 	bl	8000cd4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1f7      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07f      	beq.n	8002902 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002806:	2b00      	cmp	r3, #0
 8002808:	d062      	beq.n	80028d0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800280a:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4a15      	ldr	r2, [pc, #84]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002810:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002814:	6093      	str	r3, [r2, #8]
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	4910      	ldr	r1, [pc, #64]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002830:	d309      	bcc.n	8002846 <HAL_RCC_OscConfig+0xa16>
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f023 021f 	bic.w	r2, r3, #31
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4909      	ldr	r1, [pc, #36]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002840:	4313      	orrs	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
 8002844:	e02a      	b.n	800289c <HAL_RCC_OscConfig+0xa6c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	da0c      	bge.n	8002868 <HAL_RCC_OscConfig+0xa38>
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	015b      	lsls	r3, r3, #5
 800285c:	4901      	ldr	r1, [pc, #4]	@ (8002864 <HAL_RCC_OscConfig+0xa34>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
 8002862:	e01b      	b.n	800289c <HAL_RCC_OscConfig+0xa6c>
 8002864:	46020c00 	.word	0x46020c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002870:	d30a      	bcc.n	8002888 <HAL_RCC_OscConfig+0xa58>
 8002872:	4ba1      	ldr	r3, [pc, #644]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	499d      	ldr	r1, [pc, #628]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	60cb      	str	r3, [r1, #12]
 8002886:	e009      	b.n	800289c <HAL_RCC_OscConfig+0xa6c>
 8002888:	4b9b      	ldr	r3, [pc, #620]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	03db      	lsls	r3, r3, #15
 8002896:	4998      	ldr	r1, [pc, #608]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800289c:	4b96      	ldr	r3, [pc, #600]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a95      	ldr	r2, [pc, #596]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80028a2:	f043 0310 	orr.w	r3, r3, #16
 80028a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80028a8:	f7fe fa14 	bl	8000cd4 <HAL_GetTick>
 80028ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80028b0:	f7fe fa10 	bl	8000cd4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e18b      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80028c2:	4b8d      	ldr	r3, [pc, #564]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xa80>
 80028ce:	e018      	b.n	8002902 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80028d0:	4b89      	ldr	r3, [pc, #548]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a88      	ldr	r2, [pc, #544]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80028d6:	f023 0310 	bic.w	r3, r3, #16
 80028da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80028dc:	f7fe f9fa 	bl	8000cd4 <HAL_GetTick>
 80028e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80028e4:	f7fe f9f6 	bl	8000cd4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e171      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80028f6:	4b80      	ldr	r3, [pc, #512]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8166 	beq.w	8002bd8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002912:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b0c      	cmp	r3, #12
 800291c:	f000 80f2 	beq.w	8002b04 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	2b02      	cmp	r3, #2
 8002926:	f040 80c5 	bne.w	8002ab4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a72      	ldr	r2, [pc, #456]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002930:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002934:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002936:	f7fe f9cd 	bl	8000cd4 <HAL_GetTick>
 800293a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe f9c9 	bl	8000cd4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e144      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002950:	4b69      	ldr	r3, [pc, #420]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295c:	4b66      	ldr	r3, [pc, #408]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d111      	bne.n	800298e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002970:	4a61      	ldr	r2, [pc, #388]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800297a:	4b5f      	ldr	r3, [pc, #380]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800298e:	4b5b      	ldr	r3, [pc, #364]	@ (8002afc <HAL_RCC_OscConfig+0xccc>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002996:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800299a:	d102      	bne.n	80029a2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80029a2:	4b56      	ldr	r3, [pc, #344]	@ (8002afc <HAL_RCC_OscConfig+0xccc>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4a55      	ldr	r2, [pc, #340]	@ (8002afc <HAL_RCC_OscConfig+0xccc>)
 80029a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80029ae:	4b52      	ldr	r3, [pc, #328]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029c2:	3a01      	subs	r2, #1
 80029c4:	0212      	lsls	r2, r2, #8
 80029c6:	4311      	orrs	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80029cc:	430a      	orrs	r2, r1
 80029ce:	494a      	ldr	r1, [pc, #296]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80029d4:	4b48      	ldr	r3, [pc, #288]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 80029d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029d8:	4b49      	ldr	r3, [pc, #292]	@ (8002b00 <HAL_RCC_OscConfig+0xcd0>)
 80029da:	4013      	ands	r3, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029e0:	3a01      	subs	r2, #1
 80029e2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029ea:	3a01      	subs	r2, #1
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	b292      	uxth	r2, r2
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0412      	lsls	r2, r2, #16
 80029fa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002a04:	3a01      	subs	r2, #1
 8002a06:	0612      	lsls	r2, r2, #24
 8002a08:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	493a      	ldr	r1, [pc, #232]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002a14:	4b38      	ldr	r3, [pc, #224]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	4a37      	ldr	r2, [pc, #220]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	4a34      	ldr	r2, [pc, #208]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002a2a:	4b33      	ldr	r3, [pc, #204]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	4a32      	ldr	r2, [pc, #200]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a30:	f043 0310 	orr.w	r3, r3, #16
 8002a34:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002a36:	4b30      	ldr	r3, [pc, #192]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	f023 020c 	bic.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	492d      	ldr	r1, [pc, #180]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002a48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002a50:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <HAL_RCC_OscConfig+0xccc>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <HAL_RCC_OscConfig+0xccc>)
 8002a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002a5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6a:	4a23      	ldr	r2, [pc, #140]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1f      	ldr	r2, [pc, #124]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a80:	f7fe f928 	bl	8000cd4 <HAL_GetTick>
 8002a84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe f924 	bl	8000cd4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e09f      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a9a:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aa6:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	4a13      	ldr	r2, [pc, #76]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6293      	str	r3, [r2, #40]	@ 0x28
 8002ab2:	e091      	b.n	8002bd8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002ab4:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ac0:	f7fe f908 	bl	8000cd4 <HAL_GetTick>
 8002ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe f904 	bl	8000cd4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e07f      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ada:	4b07      	ldr	r3, [pc, #28]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002ae6:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	4a03      	ldr	r2, [pc, #12]	@ (8002af8 <HAL_RCC_OscConfig+0xcc8>)
 8002aec:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002af0:	f023 0303 	bic.w	r3, r3, #3
 8002af4:	6293      	str	r3, [r2, #40]	@ 0x28
 8002af6:	e06f      	b.n	8002bd8 <HAL_RCC_OscConfig+0xda8>
 8002af8:	46020c00 	.word	0x46020c00
 8002afc:	46020800 	.word	0x46020800
 8002b00:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b04:	4b37      	ldr	r3, [pc, #220]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b0a:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d039      	beq.n	8002b8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d132      	bne.n	8002b8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d129      	bne.n	8002b8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d122      	bne.n	8002b8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b50:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d11a      	bne.n	8002b8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	0a5b      	lsrs	r3, r3, #9
 8002b5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d111      	bne.n	8002b8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	0e1b      	lsrs	r3, r3, #24
 8002b7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e024      	b.n	8002bda <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b90:	4b14      	ldr	r3, [pc, #80]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002ba2:	4b10      	ldr	r3, [pc, #64]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002ba8:	f023 0310 	bic.w	r3, r3, #16
 8002bac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe f891 	bl	8000cd4 <HAL_GetTick>
 8002bb2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002bb4:	bf00      	nop
 8002bb6:	f7fe f88d 	bl	8000cd4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d0f9      	beq.n	8002bb6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <HAL_RCC_OscConfig+0xdb4>)
 8002bd2:	f043 0310 	orr.w	r3, r3, #16
 8002bd6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3738      	adds	r7, #56	@ 0x38
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	46020c00 	.word	0x46020c00

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e1d9      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8002e6c <HAL_RCC_ClockConfig+0x284>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b98      	ldr	r3, [pc, #608]	@ (8002e6c <HAL_RCC_ClockConfig+0x284>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	4996      	ldr	r1, [pc, #600]	@ (8002e6c <HAL_RCC_ClockConfig+0x284>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b94      	ldr	r3, [pc, #592]	@ (8002e6c <HAL_RCC_ClockConfig+0x284>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e1c1      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d908      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002c48:	4b89      	ldr	r3, [pc, #548]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	4986      	ldr	r1, [pc, #536]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	4b81      	ldr	r3, [pc, #516]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d909      	bls.n	8002c8c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002c78:	4b7d      	ldr	r3, [pc, #500]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	497a      	ldr	r1, [pc, #488]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	4b74      	ldr	r3, [pc, #464]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d908      	bls.n	8002cba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b71      	ldr	r3, [pc, #452]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	496e      	ldr	r1, [pc, #440]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	4b69      	ldr	r3, [pc, #420]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d908      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002cd6:	4b66      	ldr	r3, [pc, #408]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4963      	ldr	r1, [pc, #396]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80d2 	beq.w	8002e9a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d143      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b5b      	ldr	r3, [pc, #364]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d110      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b57      	ldr	r3, [pc, #348]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d16:	4a56      	ldr	r2, [pc, #344]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d20:	4b53      	ldr	r3, [pc, #332]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002d32:	f7fd ffcf 	bl	8000cd4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002d38:	4b4e      	ldr	r3, [pc, #312]	@ (8002e74 <HAL_RCC_ClockConfig+0x28c>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00f      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002d46:	f7fd ffc5 	bl	8000cd4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e12b      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002d58:	4b46      	ldr	r3, [pc, #280]	@ (8002e74 <HAL_RCC_ClockConfig+0x28c>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b41      	ldr	r3, [pc, #260]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d70:	4a3f      	ldr	r2, [pc, #252]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d72:	f023 0304 	bic.w	r3, r3, #4
 8002d76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e112      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d92:	4b37      	ldr	r3, [pc, #220]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d115      	bne.n	8002dca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e106      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002daa:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0fa      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dba:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0f2      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4926      	ldr	r1, [pc, #152]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002ddc:	f7fd ff7a 	bl	8000cd4 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d112      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fd ff72 	bl	8000cd4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0d6      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e02:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d1ee      	bne.n	8002dec <HAL_RCC_ClockConfig+0x204>
 8002e0e:	e044      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d112      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1a:	f7fd ff5b 	bl	8000cd4 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0bf      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e30:	4b0f      	ldr	r3, [pc, #60]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x232>
 8002e3c:	e02d      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d123      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fd ff44 	bl	8000cd4 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0a8      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e5e:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ee      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x260>
 8002e6a:	e016      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2b2>
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	46020c00 	.word	0x46020c00
 8002e74:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fd ff2c 	bl	8000cd4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e090      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d1ee      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d208      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002eb6:	4b40      	ldr	r3, [pc, #256]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	493d      	ldr	r1, [pc, #244]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fbc <HAL_RCC_ClockConfig+0x3d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d210      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b39      	ldr	r3, [pc, #228]	@ (8002fbc <HAL_RCC_ClockConfig+0x3d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	4937      	ldr	r1, [pc, #220]	@ (8002fbc <HAL_RCC_ClockConfig+0x3d4>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b35      	ldr	r3, [pc, #212]	@ (8002fbc <HAL_RCC_ClockConfig+0x3d4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e05b      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d208      	bcs.n	8002f26 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4925      	ldr	r1, [pc, #148]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	4b20      	ldr	r3, [pc, #128]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d209      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002f44:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	4919      	ldr	r1, [pc, #100]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d208      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002f74:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	490d      	ldr	r1, [pc, #52]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f86:	f000 f821 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_RCC_ClockConfig+0x3d0>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	490a      	ldr	r1, [pc, #40]	@ (8002fc0 <HAL_RCC_ClockConfig+0x3d8>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9c:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <HAL_RCC_ClockConfig+0x3dc>)
 8002f9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa0:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x3e0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fe0b 	bl	8000bc0 <HAL_InitTick>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	46020c00 	.word	0x46020c00
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	08006f20 	.word	0x08006f20
 8002fc4:	20000018 	.word	0x20000018
 8002fc8:	2000001c 	.word	0x2000001c

08002fcc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b08b      	sub	sp, #44	@ 0x2c
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b78      	ldr	r3, [pc, #480]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	4b75      	ldr	r3, [pc, #468]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d11e      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003000:	4b6e      	ldr	r3, [pc, #440]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800300c:	4b6b      	ldr	r3, [pc, #428]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800300e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003012:	0b1b      	lsrs	r3, r3, #12
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
 800301a:	e005      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800301c:	4b67      	ldr	r3, [pc, #412]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	0f1b      	lsrs	r3, r3, #28
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003028:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d110      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800303c:	e00d      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b5f      	ldr	r3, [pc, #380]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d102      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800304a:	4b5e      	ldr	r3, [pc, #376]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	e004      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b08      	cmp	r3, #8
 8003054:	d101      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003056:	4b5b      	ldr	r3, [pc, #364]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003058:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	f040 80a5 	bne.w	80031ac <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003062:	4b56      	ldr	r3, [pc, #344]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800306c:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800307a:	4b50      	ldr	r3, [pc, #320]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003086:	4b4d      	ldr	r3, [pc, #308]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d003      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xe4>
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d022      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x128>
 80030ae:	e043      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80031c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80030be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c2:	4b3e      	ldr	r3, [pc, #248]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030d2:	ed97 6a01 	vldr	s12, [r7, #4]
 80030d6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80031cc <HAL_RCC_GetSysClockFreq+0x200>
 80030da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030f2:	e046      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fe:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80031c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003106:	4b2d      	ldr	r3, [pc, #180]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003116:	ed97 6a01 	vldr	s12, [r7, #4]
 800311a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80031cc <HAL_RCC_GetSysClockFreq+0x200>
 800311e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003122:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800312a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003136:	e024      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003150:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003160:	ed97 6a01 	vldr	s12, [r7, #4]
 8003164:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80031cc <HAL_RCC_GetSysClockFreq+0x200>
 8003168:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800316c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003174:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003180:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003182:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	0e1b      	lsrs	r3, r3, #24
 8003188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800318c:	3301      	adds	r3, #1
 800318e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800319a:	edd7 6a07 	vldr	s13, [r7, #28]
 800319e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a6:	ee17 3a90 	vmov	r3, s15
 80031aa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80031ac:	6a3b      	ldr	r3, [r7, #32]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	372c      	adds	r7, #44	@ 0x2c
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	46020c00 	.word	0x46020c00
 80031c0:	08006f38 	.word	0x08006f38
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	4b742400 	.word	0x4b742400
 80031cc:	46000000 	.word	0x46000000

080031d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80031d4:	f7ff fefa 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b07      	ldr	r3, [pc, #28]	@ (80031f8 <HAL_RCC_GetHCLKFreq+0x28>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4906      	ldr	r1, [pc, #24]	@ (80031fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x30>)
 80031ec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80031ee:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x30>)
 80031f0:	681b      	ldr	r3, [r3, #0]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	46020c00 	.word	0x46020c00
 80031fc:	08006f20 	.word	0x08006f20
 8003200:	20000018 	.word	0x20000018

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003208:	f7ff ffe2 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	46020c00 	.word	0x46020c00
 8003228:	08006f30 	.word	0x08006f30

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003230:	f7ff ffce 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	@ (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	46020c00 	.word	0x46020c00
 8003250:	08006f30 	.word	0x08006f30

08003254 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003258:	f7ff ffba 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	@ (8003278 <HAL_RCC_GetPCLK3Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	46020c00 	.word	0x46020c00
 8003278:	08006f30 	.word	0x08006f30

0800327c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003284:	4b3e      	ldr	r3, [pc, #248]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003292:	f7fe fdaf 	bl	8001df4 <HAL_PWREx_GetVoltageRange>
 8003296:	6178      	str	r0, [r7, #20]
 8003298:	e019      	b.n	80032ce <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4b39      	ldr	r3, [pc, #228]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800329c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a0:	4a37      	ldr	r2, [pc, #220]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80032aa:	4b35      	ldr	r3, [pc, #212]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80032ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032b8:	f7fe fd9c 	bl	8001df4 <HAL_PWREx_GetVoltageRange>
 80032bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b30      	ldr	r3, [pc, #192]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80032c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80032c6:	f023 0304 	bic.w	r3, r3, #4
 80032ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032d4:	d003      	beq.n	80032de <RCC_SetFlashLatencyFromMSIRange+0x62>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032dc:	d109      	bne.n	80032f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032e4:	d202      	bcs.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80032e6:	2301      	movs	r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80032ea:	e033      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80032f0:	e030      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f8:	d208      	bcs.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003300:	d102      	bne.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003302:	2303      	movs	r3, #3
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	e025      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e035      	b.n	8003378 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003312:	d90f      	bls.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003320:	d902      	bls.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e015      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003328:	2301      	movs	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e012      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e00f      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800333a:	d109      	bne.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003342:	d102      	bne.n	800334a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003344:	2301      	movs	r3, #1
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	e004      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800334a:	2302      	movs	r3, #2
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e001      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003350:	2301      	movs	r3, #1
 8003352:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 020f 	bic.w	r2, r3, #15
 800335c:	4909      	ldr	r1, [pc, #36]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	46020c00 	.word	0x46020c00
 8003384:	40022000 	.word	0x40022000

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800338c:	b0b8      	sub	sp, #224	@ 0xe0
 800338e:	af00      	add	r7, sp, #0
 8003390:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003394:	2300      	movs	r3, #0
 8003396:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800339a:	2300      	movs	r3, #0
 800339c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f002 0401 	and.w	r4, r2, #1
 80033ac:	2500      	movs	r5, #0
 80033ae:	ea54 0305 	orrs.w	r3, r4, r5
 80033b2:	d00b      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80033b4:	4bca      	ldr	r3, [pc, #808]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ba:	f023 0103 	bic.w	r1, r3, #3
 80033be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c4:	4ac6      	ldr	r2, [pc, #792]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033c6:	430b      	orrs	r3, r1
 80033c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f002 0802 	and.w	r8, r2, #2
 80033d8:	f04f 0900 	mov.w	r9, #0
 80033dc:	ea58 0309 	orrs.w	r3, r8, r9
 80033e0:	d00b      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80033e2:	4bbf      	ldr	r3, [pc, #764]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033e8:	f023 010c 	bic.w	r1, r3, #12
 80033ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	4abb      	ldr	r2, [pc, #748]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033f4:	430b      	orrs	r3, r1
 80033f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f002 0a04 	and.w	sl, r2, #4
 8003406:	f04f 0b00 	mov.w	fp, #0
 800340a:	ea5a 030b 	orrs.w	r3, sl, fp
 800340e:	d00b      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003410:	4bb3      	ldr	r3, [pc, #716]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003416:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800341a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	4aaf      	ldr	r2, [pc, #700]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003422:	430b      	orrs	r3, r1
 8003424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f002 0308 	and.w	r3, r2, #8
 8003434:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800343e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003442:	460b      	mov	r3, r1
 8003444:	4313      	orrs	r3, r2
 8003446:	d00b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003448:	4ba5      	ldr	r3, [pc, #660]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	4aa1      	ldr	r2, [pc, #644]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800345a:	430b      	orrs	r3, r1
 800345c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f002 0310 	and.w	r3, r2, #16
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003476:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800347a:	460b      	mov	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	d00b      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003480:	4b97      	ldr	r3, [pc, #604]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003486:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800348a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800348e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003490:	4a93      	ldr	r2, [pc, #588]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003492:	430b      	orrs	r3, r1
 8003494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f002 0320 	and.w	r3, r2, #32
 80034a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80034b8:	4b89      	ldr	r3, [pc, #548]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80034ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034be:	f023 0107 	bic.w	r1, r3, #7
 80034c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034c8:	4a85      	ldr	r2, [pc, #532]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80034ca:	430b      	orrs	r3, r1
 80034cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034e6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034ea:	460b      	mov	r3, r1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	d00b      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80034f0:	4b7b      	ldr	r3, [pc, #492]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80034f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034f6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80034fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003500:	4a77      	ldr	r2, [pc, #476]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003502:	430b      	orrs	r3, r1
 8003504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003514:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800351e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003522:	460b      	mov	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	d00b      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003528:	4b6d      	ldr	r3, [pc, #436]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800352a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800352e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003538:	4a69      	ldr	r2, [pc, #420]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800353a:	430b      	orrs	r3, r1
 800353c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800354c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003556:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800355a:	460b      	mov	r3, r1
 800355c:	4313      	orrs	r3, r2
 800355e:	d00b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003560:	4b5f      	ldr	r3, [pc, #380]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003566:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800356a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	4a5b      	ldr	r2, [pc, #364]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003572:	430b      	orrs	r3, r1
 8003574:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800358e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	d00b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003598:	4b51      	ldr	r3, [pc, #324]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800359a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800359e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80035a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a8:	4a4d      	ldr	r2, [pc, #308]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d00b      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80035d0:	4b43      	ldr	r3, [pc, #268]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035d6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80035da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035e0:	4a3f      	ldr	r2, [pc, #252]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d00b      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003608:	4b35      	ldr	r3, [pc, #212]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800360a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003616:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003618:	4a31      	ldr	r2, [pc, #196]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800361a:	430b      	orrs	r3, r1
 800361c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800362c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800362e:	2300      	movs	r3, #0
 8003630:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003632:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d00c      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800363c:	4b28      	ldr	r3, [pc, #160]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800363e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003642:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800364e:	4a24      	ldr	r2, [pc, #144]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003650:	430b      	orrs	r3, r1
 8003652:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003662:	673b      	str	r3, [r7, #112]	@ 0x70
 8003664:	2300      	movs	r3, #0
 8003666:	677b      	str	r3, [r7, #116]	@ 0x74
 8003668:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800366c:	460b      	mov	r3, r1
 800366e:	4313      	orrs	r3, r2
 8003670:	d04f      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	2b80      	cmp	r3, #128	@ 0x80
 800367c:	d02d      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x352>
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d827      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003682:	2b60      	cmp	r3, #96	@ 0x60
 8003684:	d02e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003686:	2b60      	cmp	r3, #96	@ 0x60
 8003688:	d823      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d006      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800368e:	2b40      	cmp	r3, #64	@ 0x40
 8003690:	d81f      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003696:	2b20      	cmp	r3, #32
 8003698:	d011      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x336>
 800369a:	e01a      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800369c:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	4a0f      	ldr	r2, [pc, #60]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036a8:	e01d      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036ae:	3308      	adds	r3, #8
 80036b0:	4618      	mov	r0, r3
 80036b2:	f002 f9d1 	bl	8005a58 <RCCEx_PLL2_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036bc:	e013      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036c2:	332c      	adds	r3, #44	@ 0x2c
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fa5f 	bl	8005b88 <RCCEx_PLL3_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036d0:	e009      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80036d8:	e005      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80036da:	bf00      	nop
 80036dc:	e003      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80036de:	bf00      	nop
 80036e0:	46020c00 	.word	0x46020c00
        break;
 80036e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80036ee:	4bb6      	ldr	r3, [pc, #728]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80036f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036f4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80036f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003700:	4ab1      	ldr	r2, [pc, #708]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003702:	430b      	orrs	r3, r1
 8003704:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800370e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800371e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003720:	2300      	movs	r3, #0
 8003722:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003724:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003728:	460b      	mov	r3, r1
 800372a:	4313      	orrs	r3, r2
 800372c:	d053      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800372e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373a:	d033      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003740:	d82c      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003746:	d02f      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800374c:	d826      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800374e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003758:	d820      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800375e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003762:	d011      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003764:	e01a      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003766:	4b98      	ldr	r3, [pc, #608]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376a:	4a97      	ldr	r2, [pc, #604]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003770:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003772:	e01a      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003778:	3308      	adds	r3, #8
 800377a:	4618      	mov	r0, r3
 800377c:	f002 f96c 	bl	8005a58 <RCCEx_PLL2_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003786:	e010      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800378c:	332c      	adds	r3, #44	@ 0x2c
 800378e:	4618      	mov	r0, r3
 8003790:	f002 f9fa 	bl	8005b88 <RCCEx_PLL3_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800379a:	e006      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80037a2:	e002      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80037a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10d      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80037b2:	4b85      	ldr	r3, [pc, #532]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80037b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037b8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80037bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c4:	4a80      	ldr	r2, [pc, #512]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80037d2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80037d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80037e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80037e4:	2300      	movs	r3, #0
 80037e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80037e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d046      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80037f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80037fe:	d028      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003800:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003804:	d821      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380a:	d022      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800380c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003810:	d81b      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003812:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003816:	d01c      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003818:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800381c:	d815      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003828:	d80f      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d011      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003832:	d00e      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003834:	e009      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800383a:	3308      	adds	r3, #8
 800383c:	4618      	mov	r0, r3
 800383e:	f002 f90b 	bl	8005a58 <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8003852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003854:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800385c:	4b5a      	ldr	r3, [pc, #360]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800385e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003862:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800386a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800386e:	4a56      	ldr	r2, [pc, #344]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003870:	430b      	orrs	r3, r1
 8003872:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003876:	e003      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800387c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800388c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800388e:	2300      	movs	r3, #0
 8003890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003892:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d03f      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800389c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d81e      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80038a8:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038ef 	.word	0x080038ef
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038d3 	.word	0x080038d3
 80038bc:	080038ef 	.word	0x080038ef
 80038c0:	080038ef 	.word	0x080038ef
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038c4:	4b40      	ldr	r3, [pc, #256]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	4a3f      	ldr	r2, [pc, #252]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ce:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80038d0:	e00e      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038d6:	332c      	adds	r3, #44	@ 0x2c
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 f955 	bl	8005b88 <RCCEx_PLL3_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80038e4:	e004      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80038ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 80038f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80038f8:	4b33      	ldr	r3, [pc, #204]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80038fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038fe:	f023 0107 	bic.w	r1, r3, #7
 8003902:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	4a2f      	ldr	r2, [pc, #188]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800390c:	430b      	orrs	r3, r1
 800390e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003918:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800391c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003928:	653b      	str	r3, [r7, #80]	@ 0x50
 800392a:	2300      	movs	r3, #0
 800392c:	657b      	str	r3, [r7, #84]	@ 0x54
 800392e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003932:	460b      	mov	r3, r1
 8003934:	4313      	orrs	r3, r2
 8003936:	d04d      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800393c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003944:	d028      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003946:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800394a:	d821      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800394c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003950:	d024      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003952:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003956:	d81b      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800395c:	d00e      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800395e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003962:	d815      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01b      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d110      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800396e:	4b16      	ldr	r3, [pc, #88]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800397a:	e012      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800397c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003980:	332c      	adds	r3, #44	@ 0x2c
 8003982:	4618      	mov	r0, r3
 8003984:	f002 f900 	bl	8005b88 <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800398e:	e008      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003996:	e004      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003998:	bf00      	nop
 800399a:	e002      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80039a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80039a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d110      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80039aa:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80039ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80039b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039bc:	4a02      	ldr	r2, [pc, #8]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80039be:	430b      	orrs	r3, r1
 80039c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039c6:	bf00      	nop
 80039c8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80039d0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80039e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039e2:	2300      	movs	r3, #0
 80039e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039ea:	460b      	mov	r3, r1
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f000 80b5 	beq.w	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d113      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b9a      	ldr	r3, [pc, #616]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a0c:	4a98      	ldr	r2, [pc, #608]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003a16:	4b96      	ldr	r3, [pc, #600]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003a2e:	4b91      	ldr	r3, [pc, #580]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	4a90      	ldr	r2, [pc, #576]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3a:	f7fd f94b 	bl	8000cd4 <HAL_GetTick>
 8003a3e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd f946 	bl	8000cd4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d903      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a5c:	4b85      	ldr	r3, [pc, #532]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8003a68:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d165      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a70:	4b7f      	ldr	r3, [pc, #508]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d023      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a8a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01b      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a96:	4b76      	ldr	r3, [pc, #472]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa4:	4b72      	ldr	r3, [pc, #456]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aaa:	4a71      	ldr	r2, [pc, #452]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab4:	4b6e      	ldr	r3, [pc, #440]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aba:	4a6d      	ldr	r2, [pc, #436]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d019      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fd f8fb 	bl	8000cd4 <HAL_GetTick>
 8003ade:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	e00d      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fd f8f6 	bl	8000cd4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d903      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8003afe:	e006      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b00:	4b5b      	ldr	r3, [pc, #364]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ea      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8003b0e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003b16:	4b56      	ldr	r3, [pc, #344]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b28:	4a51      	ldr	r2, [pc, #324]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b30:	e008      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b32:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b36:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b40:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b44:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4c:	4b48      	ldr	r3, [pc, #288]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b52:	4a47      	ldr	r2, [pc, #284]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d042      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b84:	d022      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003b86:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b8a:	d81b      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b90:	d011      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8003b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b96:	d815      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d019      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003b9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ba0:	d110      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ba2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 ff55 	bl	8005a58 <RCCEx_PLL2_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003bb4:	e00d      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	4a2d      	ldr	r2, [pc, #180]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003bc2:	e006      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003bca:	e002      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8003bd0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003bd2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003bda:	4b25      	ldr	r3, [pc, #148]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003be0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003be4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bec:	4a20      	ldr	r2, [pc, #128]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bf4:	e003      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003bfa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d032      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003c1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c26:	d00b      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2c:	d804      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	d007      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003c3e:	e004      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003c40:	bf00      	nop
 8003c42:	e002      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003c44:	bf00      	nop
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003c48:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003c4a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d112      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003c52:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c64:	4a02      	ldr	r2, [pc, #8]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003c66:	430b      	orrs	r3, r1
 8003c68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c6c:	e008      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8003c6e:	bf00      	nop
 8003c70:	46020c00 	.word	0x46020c00
 8003c74:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003c7c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c96:	460b      	mov	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	d019      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca8:	d105      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003caa:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	4a87      	ldr	r2, [pc, #540]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb4:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003cb6:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cc8:	4a80      	ldr	r2, [pc, #512]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cde:	2300      	movs	r3, #0
 8003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d00c      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003cec:	4b77      	ldr	r3, [pc, #476]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cfe:	4973      	ldr	r1, [pc, #460]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	d00c      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d34:	4965      	ldr	r1, [pc, #404]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003d3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d52:	460b      	mov	r3, r1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	d00c      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003d58:	4b5c      	ldr	r3, [pc, #368]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d5e:	f023 0218 	bic.w	r2, r3, #24
 8003d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d6a:	4958      	ldr	r1, [pc, #352]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	d032      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003db0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003db4:	d108      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dba:	3308      	adds	r3, #8
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fe4b 	bl	8005a58 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8003dc8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003dd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003de2:	493a      	ldr	r1, [pc, #232]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003df0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d03a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e1c:	d00e      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003e1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e22:	d815      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d017      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e2c:	d110      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2e:	4b27      	ldr	r3, [pc, #156]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	4a26      	ldr	r2, [pc, #152]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e38:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003e3a:	e00e      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e40:	3308      	adds	r3, #8
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fe08 	bl	8005a58 <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8003e58:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e5a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003e62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e74:	4915      	ldr	r1, [pc, #84]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e82:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	607b      	str	r3, [r7, #4]
 8003e98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d00c      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ea8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003eb4:	4905      	ldr	r1, [pc, #20]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003ebc:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	37e0      	adds	r7, #224	@ 0xe0
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eca:	bf00      	nop
 8003ecc:	46020c00 	.word	0x46020c00

08003ed0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	@ 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003ed8:	4ba6      	ldr	r3, [pc, #664]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003ee2:	4ba4      	ldr	r3, [pc, #656]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003eec:	4ba1      	ldr	r3, [pc, #644]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003efa:	4b9e      	ldr	r3, [pc, #632]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f06:	4b9b      	ldr	r3, [pc, #620]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	08db      	lsrs	r3, r3, #3
 8003f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d062      	beq.n	8003fee <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	f200 8081 	bhi.w	8004032 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d024      	beq.n	8003f80 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d17a      	bne.n	8004032 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004178 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	4b89      	ldr	r3, [pc, #548]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f62:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800417c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f7e:	e08f      	b.n	80040a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003f80:	4b7c      	ldr	r3, [pc, #496]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003f8c:	4b79      	ldr	r3, [pc, #484]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	0f1b      	lsrs	r3, r3, #28
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	e006      	b.n	8003fa6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003f98:	4b76      	ldr	r3, [pc, #472]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	0f1b      	lsrs	r3, r3, #28
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	4a76      	ldr	r2, [pc, #472]	@ (8004180 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	ee07 3a90 	vmov	s15, r3
 8003fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fd0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800417c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fec:	e058      	b.n	80040a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004178 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004000:	4b5c      	ldr	r3, [pc, #368]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004010:	ed97 6a02 	vldr	s12, [r7, #8]
 8004014:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800417c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004018:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800401c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004024:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004030:	e036      	b.n	80040a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004032:	4b50      	ldr	r3, [pc, #320]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800403e:	4b4d      	ldr	r3, [pc, #308]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0f1b      	lsrs	r3, r3, #28
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800404a:	4b4a      	ldr	r3, [pc, #296]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800404c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	0f1b      	lsrs	r3, r3, #28
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	4a49      	ldr	r2, [pc, #292]	@ (8004180 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800405a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004082:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800417c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800409e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80040a0:	4b34      	ldr	r3, [pc, #208]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d017      	beq.n	80040dc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040ac:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	0a5b      	lsrs	r3, r3, #9
 80040b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80040be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d2:	ee17 2a90 	vmov	r2, s15
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e002      	b.n	80040e2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80040e2:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040ee:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80040f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004104:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004108:	edd7 6a07 	vldr	s13, [r7, #28]
 800410c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004114:	ee17 2a90 	vmov	r2, s15
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004124:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d017      	beq.n	8004160 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004130:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	0e1b      	lsrs	r3, r3, #24
 8004136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004146:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800414a:	edd7 6a07 	vldr	s13, [r7, #28]
 800414e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004156:	ee17 2a90 	vmov	r2, s15
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800415e:	e002      	b.n	8004166 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
}
 8004166:	bf00      	nop
 8004168:	3724      	adds	r7, #36	@ 0x24
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	46020c00 	.word	0x46020c00
 8004178:	4b742400 	.word	0x4b742400
 800417c:	46000000 	.word	0x46000000
 8004180:	08006f38 	.word	0x08006f38

08004184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	@ 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800418c:	4ba6      	ldr	r3, [pc, #664]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004194:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004196:	4ba4      	ldr	r3, [pc, #656]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80041a0:	4ba1      	ldr	r3, [pc, #644]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	3301      	adds	r3, #1
 80041ac:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80041ae:	4b9e      	ldr	r3, [pc, #632]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80041ba:	4b9b      	ldr	r3, [pc, #620]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	08db      	lsrs	r3, r3, #3
 80041c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d062      	beq.n	80042a2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	f200 8081 	bhi.w	80042e6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d024      	beq.n	8004234 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d17a      	bne.n	80042e6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80041fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004202:	4b89      	ldr	r3, [pc, #548]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004212:	ed97 6a02 	vldr	s12, [r7, #8]
 8004216:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800421a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800421e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004226:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004232:	e08f      	b.n	8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004234:	4b7c      	ldr	r3, [pc, #496]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004240:	4b79      	ldr	r3, [pc, #484]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	0f1b      	lsrs	r3, r3, #28
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	e006      	b.n	800425a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800424c:	4b76      	ldr	r3, [pc, #472]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800424e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	0f1b      	lsrs	r3, r3, #28
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	4a76      	ldr	r2, [pc, #472]	@ (8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800425c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004280:	ed97 6a02 	vldr	s12, [r7, #8]
 8004284:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004290:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004294:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042a0:	e058      	b.n	8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80042b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80042c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80042c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80042cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80042d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80042d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80042dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042e4:	e036      	b.n	8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042e6:	4b50      	ldr	r3, [pc, #320]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80042f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	0f1b      	lsrs	r3, r3, #28
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80042fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	0f1b      	lsrs	r3, r3, #28
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	4a49      	ldr	r2, [pc, #292]	@ (8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a02 	vldr	s12, [r7, #8]
 8004336:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004352:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004354:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d017      	beq.n	8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	0a5b      	lsrs	r3, r3, #9
 8004366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004376:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800437a:	edd7 6a07 	vldr	s13, [r7, #28]
 800437e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004386:	ee17 2a90 	vmov	r2, s15
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e002      	b.n	8004396 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004396:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d017      	beq.n	80043d2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043a2:	4b21      	ldr	r3, [pc, #132]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80043b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c8:	ee17 2a90 	vmov	r2, s15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80043d8:	4b13      	ldr	r3, [pc, #76]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d017      	beq.n	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043e4:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e8:	0e1b      	lsrs	r3, r3, #24
 80043ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80043f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440a:	ee17 2a90 	vmov	r2, s15
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004412:	e002      	b.n	800441a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
}
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	@ 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	46020c00 	.word	0x46020c00
 800442c:	4b742400 	.word	0x4b742400
 8004430:	46000000 	.word	0x46000000
 8004434:	08006f38 	.word	0x08006f38

08004438 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	@ 0x24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004440:	4ba6      	ldr	r3, [pc, #664]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800444a:	4ba4      	ldr	r3, [pc, #656]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004454:	4ba1      	ldr	r3, [pc, #644]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	3301      	adds	r3, #1
 8004460:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004462:	4b9e      	ldr	r3, [pc, #632]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800446e:	4b9b      	ldr	r3, [pc, #620]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004472:	08db      	lsrs	r3, r3, #3
 8004474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d062      	beq.n	8004556 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b03      	cmp	r3, #3
 8004494:	f200 8081 	bhi.w	800459a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d024      	beq.n	80044e8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d17a      	bne.n	800459a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b6:	4b89      	ldr	r3, [pc, #548]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80044d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80044e6:	e08f      	b.n	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80044e8:	4b7c      	ldr	r3, [pc, #496]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80044f4:	4b79      	ldr	r3, [pc, #484]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	0f1b      	lsrs	r3, r3, #28
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	e006      	b.n	800450e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004500:	4b76      	ldr	r3, [pc, #472]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	0f1b      	lsrs	r3, r3, #28
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	4a76      	ldr	r2, [pc, #472]	@ (80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004514:	ee07 3a90 	vmov	s15, r3
 8004518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	ee07 3a90 	vmov	s15, r3
 8004530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004534:	ed97 6a02 	vldr	s12, [r7, #8]
 8004538:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800453c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004548:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800454c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004550:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004554:	e058      	b.n	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004560:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004568:	4b5c      	ldr	r3, [pc, #368]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800456a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004578:	ed97 6a02 	vldr	s12, [r7, #8]
 800457c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004580:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004584:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800458c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004598:	e036      	b.n	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800459a:	4b50      	ldr	r3, [pc, #320]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80045a6:	4b4d      	ldr	r3, [pc, #308]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0f1b      	lsrs	r3, r3, #28
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	e006      	b.n	80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80045b2:	4b4a      	ldr	r3, [pc, #296]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	0f1b      	lsrs	r3, r3, #28
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	4a49      	ldr	r2, [pc, #292]	@ (80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80045c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004606:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004608:	4b34      	ldr	r3, [pc, #208]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d017      	beq.n	8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004614:	4b31      	ldr	r3, [pc, #196]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800462e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463a:	ee17 2a90 	vmov	r2, s15
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e002      	b.n	800464a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800464a:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004656:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	0c1b      	lsrs	r3, r3, #16
 800465c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800466c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004670:	edd7 6a07 	vldr	s13, [r7, #28]
 8004674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467c:	ee17 2a90 	vmov	r2, s15
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]
 8004684:	e002      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800468c:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d017      	beq.n	80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004698:	4b10      	ldr	r3, [pc, #64]	@ (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800469a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80046aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80046b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046be:	ee17 2a90 	vmov	r2, s15
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046c6:	e002      	b.n	80046ce <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
}
 80046ce:	bf00      	nop
 80046d0:	3724      	adds	r7, #36	@ 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	46020c00 	.word	0x46020c00
 80046e0:	4b742400 	.word	0x4b742400
 80046e4:	46000000 	.word	0x46000000
 80046e8:	08006f38 	.word	0x08006f38

080046ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	@ 0x38
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80046f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046fa:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80046fe:	430b      	orrs	r3, r1
 8004700:	d145      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004702:	4baa      	ldr	r3, [pc, #680]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800470e:	4ba7      	ldr	r3, [pc, #668]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d108      	bne.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004722:	d104      	bne.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004724:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004728:	637b      	str	r3, [r7, #52]	@ 0x34
 800472a:	f001 b987 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800472e:	4b9f      	ldr	r3, [pc, #636]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473c:	d114      	bne.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004744:	d110      	bne.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004746:	4b99      	ldr	r3, [pc, #612]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800474c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004754:	d103      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004756:	23fa      	movs	r3, #250	@ 0xfa
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800475a:	f001 b96f 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800475e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004764:	f001 b96a 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004768:	4b90      	ldr	r3, [pc, #576]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004774:	d107      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800477c:	d103      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800477e:	4b8c      	ldr	r3, [pc, #560]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
 8004782:	f001 b95b 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
 800478a:	f001 b957 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800478e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004792:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004796:	430b      	orrs	r3, r1
 8004798:	d151      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800479a:	4b84      	ldr	r3, [pc, #528]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800479c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047a0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	2b80      	cmp	r3, #128	@ 0x80
 80047aa:	d035      	beq.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	2b80      	cmp	r3, #128	@ 0x80
 80047b0:	d841      	bhi.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d02a      	beq.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	2b60      	cmp	r3, #96	@ 0x60
 80047bc:	d83b      	bhi.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d009      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c6:	2b40      	cmp	r3, #64	@ 0x40
 80047c8:	d835      	bhi.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00c      	beq.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d012      	beq.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80047d6:	e02e      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fb77 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047e6:	f001 b929 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047ea:	f107 0318 	add.w	r3, r7, #24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fcc8 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047f8:	f001 b920 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fe19 	bl	8004438 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800480a:	f001 b917 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800480e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004812:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004814:	f001 b912 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004818:	4b64      	ldr	r3, [pc, #400]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004824:	d103      	bne.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004826:	4b63      	ldr	r3, [pc, #396]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800482a:	f001 b907 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004832:	f001 b903 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800483a:	f001 b8ff 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800483e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004842:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004846:	430b      	orrs	r3, r1
 8004848:	d158      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800484a:	4b58      	ldr	r3, [pc, #352]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800484c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004850:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004854:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485c:	d03b      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004864:	d846      	bhi.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800486c:	d02e      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004874:	d83e      	bhi.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800487c:	d00b      	beq.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004884:	d836      	bhi.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004892:	d012      	beq.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004894:	e02e      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fb18 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048a4:	f001 b8ca 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048a8:	f107 0318 	add.w	r3, r7, #24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fc69 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048b6:	f001 b8c1 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ba:	f107 030c 	add.w	r3, r7, #12
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fdba 	bl	8004438 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048c8:	f001 b8b8 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80048cc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048d2:	f001 b8b3 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048d6:	4b35      	ldr	r3, [pc, #212]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e2:	d103      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80048e4:	4b33      	ldr	r3, [pc, #204]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80048e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80048e8:	f001 b8a8 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048f0:	f001 b8a4 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048f8:	f001 b8a0 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80048fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004900:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004904:	430b      	orrs	r3, r1
 8004906:	d16e      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004908:	4b28      	ldr	r3, [pc, #160]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800490a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800490e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004912:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800491a:	d034      	beq.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004922:	d85c      	bhi.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800492a:	d00b      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004932:	d854      	bhi.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004940:	d009      	beq.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004942:	e04c      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fac1 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800494e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004952:	f001 b873 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004956:	f107 0318 	add.w	r3, r7, #24
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fc12 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004964:	f001 b86a 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004968:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004974:	d103      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8004976:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800497a:	f001 b85f 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004982:	f001 b85b 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004986:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b20      	cmp	r3, #32
 8004990:	d121      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004992:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00e      	beq.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800499e:	4b03      	ldr	r3, [pc, #12]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0e1b      	lsrs	r3, r3, #24
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	e00f      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80049aa:	bf00      	nop
 80049ac:	46020c00 	.word	0x46020c00
 80049b0:	0007a120 	.word	0x0007a120
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	02dc6c00 	.word	0x02dc6c00
 80049bc:	4ba7      	ldr	r3, [pc, #668]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80049be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	0e1b      	lsrs	r3, r3, #24
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	4aa5      	ldr	r2, [pc, #660]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80049cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80049d2:	f001 b833 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049da:	f001 b82f 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049e2:	f001 b82b 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80049e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ea:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80049ee:	430b      	orrs	r3, r1
 80049f0:	d17f      	bne.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80049f2:	4b9a      	ldr	r3, [pc, #616]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80049f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049fc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d165      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004a04:	4b95      	ldr	r3, [pc, #596]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a0a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004a0e:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a12:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004a16:	d034      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004a1e:	d853      	bhi.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a26:	d00b      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2e:	d84b      	bhi.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d016      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8004a3e:	e043      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fa43 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a4e:	f000 bff5 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a52:	f107 0318 	add.w	r3, r7, #24
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fb94 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a60:	f000 bfec 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004a64:	4b7d      	ldr	r3, [pc, #500]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a70:	d103      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8004a72:	4b7c      	ldr	r3, [pc, #496]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004a76:	f000 bfe1 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a7e:	f000 bfdd 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a82:	4b76      	ldr	r3, [pc, #472]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d118      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a8e:	4b73      	ldr	r3, [pc, #460]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8004a9a:	4b70      	ldr	r3, [pc, #448]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	e006      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8004aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aba:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004abc:	f000 bfbe 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004ac4:	f000 bfba 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004acc:	f000 bfb6 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ad6:	d108      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff f9f7 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae6:	f000 bfa9 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aee:	f000 bfa5 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af6:	1e51      	subs	r1, r2, #1
 8004af8:	430b      	orrs	r3, r1
 8004afa:	d136      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004afc:	4b57      	ldr	r3, [pc, #348]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004b0e:	f7fe fb8d 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8004b12:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b14:	f000 bf92 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d104      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fe fa55 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004b22:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b24:	f000 bf8a 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004b28:	4b4c      	ldr	r3, [pc, #304]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b34:	d106      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d103      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8004b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b40:	f000 bf7c 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004b44:	4b45      	ldr	r3, [pc, #276]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d107      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d104      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8004b58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5e:	f000 bf6d 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b66:	f000 bf69 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b6e:	1e91      	subs	r1, r2, #2
 8004b70:	430b      	orrs	r3, r1
 8004b72:	d136      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b74:	4b39      	ldr	r3, [pc, #228]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fe fb3d 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b8c:	f000 bf56 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d104      	bne.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fe fa19 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004b9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b9c:	f000 bf4e 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bac:	d106      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d103      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8004bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb8:	f000 bf40 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004bbc:	4b27      	ldr	r3, [pc, #156]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d107      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	d104      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8004bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd6:	f000 bf31 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bde:	f000 bf2d 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be6:	1f11      	subs	r1, r2, #4
 8004be8:	430b      	orrs	r3, r1
 8004bea:	d13f      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004bec:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bf6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004bfe:	f7fe fb01 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8004c02:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c04:	f000 bf1a 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d104      	bne.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c0e:	f7fe f9dd 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004c12:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c14:	f000 bf12 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004c18:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c24:	d106      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d103      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c30:	f000 bf04 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004c34:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d107      	bne.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d104      	bne.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8004c48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c4e:	f000 bef5 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c56:	f000 bef1 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004c5a:	bf00      	nop
 8004c5c:	46020c00 	.word	0x46020c00
 8004c60:	08006f38 	.word	0x08006f38
 8004c64:	02dc6c00 	.word	0x02dc6c00
 8004c68:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c70:	f1a2 0108 	sub.w	r1, r2, #8
 8004c74:	430b      	orrs	r3, r1
 8004c76:	d136      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c78:	4ba4      	ldr	r3, [pc, #656]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c82:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c8a:	f7fe fabb 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8004c8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c90:	f000 bed4 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	2b40      	cmp	r3, #64	@ 0x40
 8004c98:	d104      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe f997 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004c9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ca0:	f000 becc 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004ca4:	4b99      	ldr	r3, [pc, #612]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb0:	d106      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb4:	2b80      	cmp	r3, #128	@ 0x80
 8004cb6:	d103      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8004cb8:	4b95      	ldr	r3, [pc, #596]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cbc:	f000 bebe 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004cc0:	4b92      	ldr	r3, [pc, #584]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d107      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cd2:	d104      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8004cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cda:	f000 beaf 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce2:	f000 beab 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cea:	f1a2 0110 	sub.w	r1, r2, #16
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	d139      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004cf2:	4b86      	ldr	r3, [pc, #536]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fe fa7e 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8004d08:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d0a:	f000 be97 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d14:	d104      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe f959 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004d1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d1c:	f000 be8e 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004d20:	4b7a      	ldr	r3, [pc, #488]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d34:	d103      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8004d36:	4b76      	ldr	r3, [pc, #472]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3a:	f000 be7f 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004d3e:	4b73      	ldr	r3, [pc, #460]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d108      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d52:	d104      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8004d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d5a:	f000 be6f 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d62:	f000 be6b 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d6a:	f1a2 0120 	sub.w	r1, r2, #32
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	d158      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d72:	4b66      	ldr	r3, [pc, #408]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004d84:	f7fe fa66 	bl	8003254 <HAL_RCC_GetPCLK3Freq>
 8004d88:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d8a:	f000 be57 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d104      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d94:	f7fe f91a 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004d98:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d9a:	f000 be4f 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004daa:	d106      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d103      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8004db2:	4b57      	ldr	r3, [pc, #348]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db6:	f000 be41 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004dba:	4b54      	ldr	r3, [pc, #336]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d104      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd4:	f000 be32 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d11b      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d118      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dea:	4b48      	ldr	r3, [pc, #288]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8004df6:	4b45      	ldr	r3, [pc, #276]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0e1b      	lsrs	r3, r3, #24
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	e006      	b.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004e02:	4b42      	ldr	r3, [pc, #264]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	0e1b      	lsrs	r3, r3, #24
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	4a40      	ldr	r2, [pc, #256]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e18:	f000 be10 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e20:	f000 be0c 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e28:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	d173      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004e30:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e36:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004e3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e42:	d104      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e44:	f7fe f8c2 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e4a:	f000 bdf7 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e54:	d108      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e56:	f107 0318 	add.w	r3, r7, #24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff f992 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e64:	f000 bdea 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004e6e:	f7fe f9af 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8004e72:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e74:	f000 bde2 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e7e:	d122      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e80:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d118      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004e98:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	0e1b      	lsrs	r3, r3, #24
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	e006      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004ea4:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eaa:	041b      	lsls	r3, r3, #16
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	4a18      	ldr	r2, [pc, #96]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eba:	f000 bdbf 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec2:	f000 bdbb 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004ec6:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eda:	d103      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee0:	f000 bdac 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef8:	d103      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efe:	f000 bd9d 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f06:	f000 bd99 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004f0a:	bf00      	nop
 8004f0c:	46020c00 	.word	0x46020c00
 8004f10:	00f42400 	.word	0x00f42400
 8004f14:	08006f38 	.word	0x08006f38
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004f20:	430b      	orrs	r3, r1
 8004f22:	d158      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004f24:	4bad      	ldr	r3, [pc, #692]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d84b      	bhi.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004f36:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f63 	.word	0x08004f63
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004f89 	.word	0x08004f89
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe ffbb 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f5e:	f000 bd6d 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f62:	f107 030c 	add.w	r3, r7, #12
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fa66 	bl	8004438 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f70:	f000 bd64 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004f74:	f7fe f92c 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8004f78:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f7a:	f000 bd5f 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f84:	f000 bd5a 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f88:	4b94      	ldr	r3, [pc, #592]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d118      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f94:	4b91      	ldr	r3, [pc, #580]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8004fa0:	4b8e      	ldr	r3, [pc, #568]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	0e1b      	lsrs	r3, r3, #24
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	e006      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8004fac:	4b8b      	ldr	r3, [pc, #556]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	0e1b      	lsrs	r3, r3, #24
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	4a89      	ldr	r2, [pc, #548]	@ (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8004fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fc2:	f000 bd3b 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fca:	f000 bd37 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fd2:	f000 bd33 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fda:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	d167      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fe8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004fec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ff4:	d036      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ffc:	d855      	bhi.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005004:	d029      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800500c:	d84d      	bhi.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005014:	d013      	beq.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800501c:	d845      	bhi.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d015      	beq.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800502a:	d13e      	bne.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800502c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe ff4d 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800503a:	f000 bcff 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800503e:	f107 030c 	add.w	r3, r7, #12
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff f9f8 	bl	8004438 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800504c:	f000 bcf6 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005050:	f7fe f8be 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8005054:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005056:	f000 bcf1 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800505a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005060:	f000 bcec 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005064:	4b5d      	ldr	r3, [pc, #372]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b20      	cmp	r3, #32
 800506e:	d118      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005070:	4b5a      	ldr	r3, [pc, #360]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800507c:	4b57      	ldr	r3, [pc, #348]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	0e1b      	lsrs	r3, r3, #24
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	e006      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005088:	4b54      	ldr	r3, [pc, #336]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800508a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	0e1b      	lsrs	r3, r3, #24
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	4a52      	ldr	r2, [pc, #328]	@ (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800509e:	f000 bccd 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050a6:	f000 bcc9 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ae:	f000 bcc5 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80050b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80050ba:	430b      	orrs	r3, r1
 80050bc:	d14c      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80050be:	4b47      	ldr	r3, [pc, #284]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80050c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe f898 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 80050d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80050d6:	f000 bcb1 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e0:	d104      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050e2:	f7fd ff73 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80050e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80050e8:	f000 bca8 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80050ec:	4b3b      	ldr	r3, [pc, #236]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f8:	d107      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005100:	d103      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8005102:	4b38      	ldr	r3, [pc, #224]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
 8005106:	f000 bc99 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800510a:	4b34      	ldr	r3, [pc, #208]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b20      	cmp	r3, #32
 8005114:	d11c      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800511c:	d118      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800511e:	4b2f      	ldr	r3, [pc, #188]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800512a:	4b2c      	ldr	r3, [pc, #176]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	e006      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8005136:	4b29      	ldr	r3, [pc, #164]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	0e1b      	lsrs	r3, r3, #24
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514a:	637b      	str	r3, [r7, #52]	@ 0x34
 800514c:	f000 bc76 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	f000 bc72 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800515c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8005160:	430b      	orrs	r3, r1
 8005162:	d152      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005164:	4b1d      	ldr	r3, [pc, #116]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800516a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800516e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005176:	f7fe f845 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 800517a:	6378      	str	r0, [r7, #52]	@ 0x34
 800517c:	f000 bc5e 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005186:	d104      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005188:	f7fd ff20 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 800518c:	6378      	str	r0, [r7, #52]	@ 0x34
 800518e:	f000 bc55 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005192:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519e:	d107      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a6:	d103      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80051a8:	4b0e      	ldr	r3, [pc, #56]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80051aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ac:	f000 bc46 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80051b0:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d122      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051c2:	d11e      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051c4:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80051d0:	4b02      	ldr	r3, [pc, #8]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	0e1b      	lsrs	r3, r3, #24
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	e00c      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80051dc:	46020c00 	.word	0x46020c00
 80051e0:	08006f38 	.word	0x08006f38
 80051e4:	00f42400 	.word	0x00f42400
 80051e8:	4ba1      	ldr	r3, [pc, #644]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80051ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	4a9f      	ldr	r2, [pc, #636]	@ (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80051f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fe:	f000 bc1d 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
 8005206:	f000 bc19 	b.w	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800520a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005212:	430b      	orrs	r3, r1
 8005214:	d151      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005216:	4b96      	ldr	r3, [pc, #600]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800521c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005220:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	2bc0      	cmp	r3, #192	@ 0xc0
 8005226:	d024      	beq.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	2bc0      	cmp	r3, #192	@ 0xc0
 800522c:	d842      	bhi.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	2b80      	cmp	r3, #128	@ 0x80
 8005232:	d00d      	beq.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	2b80      	cmp	r3, #128	@ 0x80
 8005238:	d83c      	bhi.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	d011      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8005246:	e035      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005248:	f7fe f804 	bl	8003254 <HAL_RCC_GetPCLK3Freq>
 800524c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800524e:	e3f5      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005250:	4b87      	ldr	r3, [pc, #540]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525c:	d102      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800525e:	4b86      	ldr	r3, [pc, #536]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005262:	e3eb      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005268:	e3e8      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800526a:	f7fd feaf 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 800526e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005270:	e3e4      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005272:	4b7f      	ldr	r3, [pc, #508]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b20      	cmp	r3, #32
 800527c:	d117      	bne.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800527e:	4b7c      	ldr	r3, [pc, #496]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800528a:	4b79      	ldr	r3, [pc, #484]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	0e1b      	lsrs	r3, r3, #24
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005296:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	0e1b      	lsrs	r3, r3, #24
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	4a73      	ldr	r2, [pc, #460]	@ (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80052a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80052ac:	e3c6      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052b2:	e3c3      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052b8:	e3c0      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80052ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052be:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80052c2:	430b      	orrs	r3, r1
 80052c4:	d147      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80052c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80052c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80052d0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7fd ff94 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 80052dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80052de:	e3ad      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052e6:	d103      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052e8:	f7fd fe70 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80052ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80052ee:	e3a5      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80052f0:	4b5f      	ldr	r3, [pc, #380]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005304:	d102      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8005306:	4b5c      	ldr	r3, [pc, #368]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
 800530a:	e397      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800530c:	4b58      	ldr	r3, [pc, #352]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d11b      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800531e:	d117      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005320:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 800532c:	4b50      	ldr	r3, [pc, #320]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	0e1b      	lsrs	r3, r3, #24
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	e006      	b.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8005338:	4b4d      	ldr	r3, [pc, #308]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800533a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	0e1b      	lsrs	r3, r3, #24
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	4a4b      	ldr	r2, [pc, #300]	@ (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534c:	637b      	str	r3, [r7, #52]	@ 0x34
 800534e:	e375      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
 8005354:	e372      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800535a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800535e:	430b      	orrs	r3, r1
 8005360:	d164      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005362:	4b43      	ldr	r3, [pc, #268]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005368:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800536c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	2b00      	cmp	r3, #0
 8005372:	d120      	bne.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005374:	4b3e      	ldr	r3, [pc, #248]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b20      	cmp	r3, #32
 800537e:	d117      	bne.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005380:	4b3b      	ldr	r3, [pc, #236]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800538c:	4b38      	ldr	r3, [pc, #224]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	0e1b      	lsrs	r3, r3, #24
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	e006      	b.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005398:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800539a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	0e1b      	lsrs	r3, r3, #24
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	4a33      	ldr	r2, [pc, #204]	@ (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80053a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ae:	e345      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b4:	e342      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80053b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80053b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c4:	d112      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053cc:	d10e      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053ce:	4b28      	ldr	r3, [pc, #160]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80053d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053dc:	d102      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80053de:	23fa      	movs	r3, #250	@ 0xfa
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053e2:	e32b      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80053e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053ea:	e327      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80053ec:	4b20      	ldr	r3, [pc, #128]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f8:	d106      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005400:	d102      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005402:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005404:	637b      	str	r3, [r7, #52]	@ 0x34
 8005406:	e319      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005408:	4b19      	ldr	r3, [pc, #100]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800540a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b02      	cmp	r3, #2
 8005414:	d107      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800541c:	d103      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800541e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
 8005424:	e30a      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
 800542a:	e307      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800542c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005430:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005434:	430b      	orrs	r3, r1
 8005436:	d16b      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005438:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800543a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800543e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	2b00      	cmp	r3, #0
 8005448:	d127      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800544a:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b20      	cmp	r3, #32
 8005454:	d11e      	bne.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00c      	beq.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8005462:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0e1b      	lsrs	r3, r3, #24
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	e00d      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800546e:	bf00      	nop
 8005470:	46020c00 	.word	0x46020c00
 8005474:	08006f38 	.word	0x08006f38
 8005478:	00f42400 	.word	0x00f42400
 800547c:	4b94      	ldr	r3, [pc, #592]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800547e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	0e1b      	lsrs	r3, r3, #24
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	4a92      	ldr	r2, [pc, #584]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800548c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
 8005492:	e2d3      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
 8005498:	e2d0      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800549a:	4b8d      	ldr	r3, [pc, #564]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800549c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a8:	d112      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b0:	d10e      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054b2:	4b87      	ldr	r3, [pc, #540]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80054b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054c0:	d102      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80054c2:	23fa      	movs	r3, #250	@ 0xfa
 80054c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054c6:	e2b9      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80054c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054ce:	e2b5      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80054d0:	4b7f      	ldr	r3, [pc, #508]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054dc:	d106      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e4:	d102      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80054e6:	4b7c      	ldr	r3, [pc, #496]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80054e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ea:	e2a7      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80054ec:	4b78      	ldr	r3, [pc, #480]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80054ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d107      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005500:	d103      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8005502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
 8005508:	e298      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	637b      	str	r3, [r7, #52]	@ 0x34
 800550e:	e295      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005514:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005518:	430b      	orrs	r3, r1
 800551a:	d147      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800551c:	4b6c      	ldr	r3, [pc, #432]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800551e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005522:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005526:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800552e:	f7fd fe69 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8005532:	6378      	str	r0, [r7, #52]	@ 0x34
 8005534:	e282      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005536:	4b66      	ldr	r3, [pc, #408]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800553c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005544:	d112      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800554c:	d10e      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800554e:	4b60      	ldr	r3, [pc, #384]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800555c:	d102      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800555e:	23fa      	movs	r3, #250	@ 0xfa
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005562:	e26b      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005564:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005568:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800556a:	e267      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800556c:	4b58      	ldr	r3, [pc, #352]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005578:	d106      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005580:	d102      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8005582:	4b55      	ldr	r3, [pc, #340]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005584:	637b      	str	r3, [r7, #52]	@ 0x34
 8005586:	e259      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005588:	4b51      	ldr	r3, [pc, #324]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800558a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d107      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800559c:	d103      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a4:	e24a      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055aa:	e247      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80055ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80055b4:	430b      	orrs	r3, r1
 80055b6:	d12d      	bne.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80055b8:	4b45      	ldr	r3, [pc, #276]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80055ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055be:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80055c4:	4b42      	ldr	r3, [pc, #264]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d0:	d105      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80055d8:	4b3f      	ldr	r3, [pc, #252]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
 80055dc:	e22e      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055e4:	d107      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fc70 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f4:	e222      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055fc:	d107      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055fe:	f107 0318 	add.w	r3, r7, #24
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fdbe 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
 800560c:	e216      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	@ 0x34
 8005612:	e213      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005618:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800561c:	430b      	orrs	r3, r1
 800561e:	d15d      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005620:	4b2b      	ldr	r3, [pc, #172]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005626:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005632:	d028      	beq.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800563a:	d845      	bhi.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005642:	d013      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800564a:	d83d      	bhi.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005658:	d004      	beq.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800565a:	e035      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800565c:	f7fd fde6 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8005660:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005662:	e1eb      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005664:	f7fd fcb2 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8005668:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800566a:	e1e7      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800566c:	4b18      	ldr	r3, [pc, #96]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005678:	d102      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800567a:	4b17      	ldr	r3, [pc, #92]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800567e:	e1dd      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005684:	e1da      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005686:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	d117      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005692:	4b0f      	ldr	r3, [pc, #60]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800569e:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	0e1b      	lsrs	r3, r3, #24
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	e006      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80056aa:	4b09      	ldr	r3, [pc, #36]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80056ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	4a06      	ldr	r2, [pc, #24]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80056ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056c0:	e1bc      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056c6:	e1b9      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056cc:	e1b6      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80056ce:	bf00      	nop
 80056d0:	46020c00 	.word	0x46020c00
 80056d4:	08006f38 	.word	0x08006f38
 80056d8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80056dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e0:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80056e4:	430b      	orrs	r3, r1
 80056e6:	d156      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80056e8:	4ba5      	ldr	r3, [pc, #660]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80056ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056f2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056fa:	d028      	beq.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005702:	d845      	bhi.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800570a:	d013      	beq.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005712:	d83d      	bhi.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d004      	beq.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005722:	e035      	b.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005724:	f7fd fd6e 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8005728:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800572a:	e187      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800572c:	f7fd fc4e 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8005730:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005732:	e183      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005734:	4b92      	ldr	r3, [pc, #584]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800573c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005740:	d102      	bne.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8005742:	4b90      	ldr	r3, [pc, #576]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005746:	e179      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800574c:	e176      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800574e:	4b8c      	ldr	r3, [pc, #560]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b20      	cmp	r3, #32
 8005758:	d117      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800575a:	4b89      	ldr	r3, [pc, #548]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8005766:	4b86      	ldr	r3, [pc, #536]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	0e1b      	lsrs	r3, r3, #24
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	e006      	b.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8005772:	4b83      	ldr	r3, [pc, #524]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	0e1b      	lsrs	r3, r3, #24
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	4a81      	ldr	r2, [pc, #516]	@ (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005786:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005788:	e158      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800578e:	e155      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005794:	e152      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800579e:	430b      	orrs	r3, r1
 80057a0:	d177      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80057a2:	4b77      	ldr	r3, [pc, #476]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80057a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057a8:	f003 0318 	and.w	r3, r3, #24
 80057ac:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	2b18      	cmp	r3, #24
 80057b2:	d86b      	bhi.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80057b4:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	08005821 	.word	0x08005821
 80057c0:	0800588d 	.word	0x0800588d
 80057c4:	0800588d 	.word	0x0800588d
 80057c8:	0800588d 	.word	0x0800588d
 80057cc:	0800588d 	.word	0x0800588d
 80057d0:	0800588d 	.word	0x0800588d
 80057d4:	0800588d 	.word	0x0800588d
 80057d8:	0800588d 	.word	0x0800588d
 80057dc:	08005829 	.word	0x08005829
 80057e0:	0800588d 	.word	0x0800588d
 80057e4:	0800588d 	.word	0x0800588d
 80057e8:	0800588d 	.word	0x0800588d
 80057ec:	0800588d 	.word	0x0800588d
 80057f0:	0800588d 	.word	0x0800588d
 80057f4:	0800588d 	.word	0x0800588d
 80057f8:	0800588d 	.word	0x0800588d
 80057fc:	08005831 	.word	0x08005831
 8005800:	0800588d 	.word	0x0800588d
 8005804:	0800588d 	.word	0x0800588d
 8005808:	0800588d 	.word	0x0800588d
 800580c:	0800588d 	.word	0x0800588d
 8005810:	0800588d 	.word	0x0800588d
 8005814:	0800588d 	.word	0x0800588d
 8005818:	0800588d 	.word	0x0800588d
 800581c:	0800584b 	.word	0x0800584b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005820:	f7fd fd18 	bl	8003254 <HAL_RCC_GetPCLK3Freq>
 8005824:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005826:	e109      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005828:	f7fd fbd0 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 800582c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800582e:	e105      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005830:	4b53      	ldr	r3, [pc, #332]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800583c:	d102      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800583e:	4b51      	ldr	r3, [pc, #324]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005840:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005842:	e0fb      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005848:	e0f8      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800584a:	4b4d      	ldr	r3, [pc, #308]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b20      	cmp	r3, #32
 8005854:	d117      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005856:	4b4a      	ldr	r3, [pc, #296]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8005862:	4b47      	ldr	r3, [pc, #284]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0e1b      	lsrs	r3, r3, #24
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	e006      	b.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800586e:	4b44      	ldr	r3, [pc, #272]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	0e1b      	lsrs	r3, r3, #24
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	4a42      	ldr	r2, [pc, #264]	@ (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800587e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005884:	e0da      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800588a:	e0d7      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005890:	e0d4      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005896:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800589a:	430b      	orrs	r3, r1
 800589c:	d155      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800589e:	4b38      	ldr	r3, [pc, #224]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80058a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058b0:	d013      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058b8:	d844      	bhi.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058c0:	d013      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058c8:	d83c      	bhi.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d014      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d6:	d014      	beq.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80058d8:	e034      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058da:	f107 0318 	add.w	r3, r7, #24
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fc50 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058e8:	e0a8      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe faee 	bl	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058f8:	e0a0      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058fa:	f7fd fb67 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80058fe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005900:	e09c      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005902:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b20      	cmp	r3, #32
 800590c:	d117      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800590e:	4b1c      	ldr	r3, [pc, #112]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800591a:	4b19      	ldr	r3, [pc, #100]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	0e1b      	lsrs	r3, r3, #24
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8005926:	4b16      	ldr	r3, [pc, #88]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	0e1b      	lsrs	r3, r3, #24
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	4a14      	ldr	r2, [pc, #80]	@ (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800593c:	e07e      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005942:	e07b      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005948:	e078      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800594a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005952:	430b      	orrs	r3, r1
 8005954:	d138      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005956:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800595c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005960:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005962:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d10d      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8005976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
 800597c:	e05e      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800597e:	bf00      	nop
 8005980:	46020c00 	.word	0x46020c00
 8005984:	00f42400 	.word	0x00f42400
 8005988:	08006f38 	.word	0x08006f38
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800598c:	4b2e      	ldr	r3, [pc, #184]	@ (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800598e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800599a:	d112      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059a2:	d10e      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059a4:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80059a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059b2:	d102      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80059b4:	23fa      	movs	r3, #250	@ 0xfa
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059b8:	e040      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80059ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059c0:	e03c      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c6:	e039      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80059c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059cc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80059d0:	430b      	orrs	r3, r1
 80059d2:	d131      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80059d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80059d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80059e0:	4b19      	ldr	r3, [pc, #100]	@ (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ec:	d105      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80059f4:	4b15      	ldr	r3, [pc, #84]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f8:	e020      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80059fa:	4b13      	ldr	r3, [pc, #76]	@ (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a06:	d106      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0e:	d102      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005a10:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8005a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a14:	e012      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005a16:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a22:	d106      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8005a2c:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a30:	e004      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a36:	e001      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3738      	adds	r7, #56	@ 0x38
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	46020c00 	.word	0x46020c00
 8005a4c:	02dc6c00 	.word	0x02dc6c00
 8005a50:	016e3600 	.word	0x016e3600
 8005a54:	00f42400 	.word	0x00f42400

08005a58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005a60:	4b47      	ldr	r3, [pc, #284]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a46      	ldr	r2, [pc, #280]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005a66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a6c:	f7fb f932 	bl	8000cd4 <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a72:	e008      	b.n	8005a86 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a74:	f7fb f92e 	bl	8000cd4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e077      	b.n	8005b76 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a86:	4b3e      	ldr	r3, [pc, #248]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005a92:	4b3b      	ldr	r3, [pc, #236]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6811      	ldr	r1, [r2, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6852      	ldr	r2, [r2, #4]
 8005aa6:	3a01      	subs	r2, #1
 8005aa8:	0212      	lsls	r2, r2, #8
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	4934      	ldr	r1, [pc, #208]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005ab2:	4b33      	ldr	r3, [pc, #204]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ab6:	4b33      	ldr	r3, [pc, #204]	@ (8005b84 <RCCEx_PLL2_Config+0x12c>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6892      	ldr	r2, [r2, #8]
 8005abe:	3a01      	subs	r2, #1
 8005ac0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	68d2      	ldr	r2, [r2, #12]
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	0252      	lsls	r2, r2, #9
 8005acc:	b292      	uxth	r2, r2
 8005ace:	4311      	orrs	r1, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6912      	ldr	r2, [r2, #16]
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	0412      	lsls	r2, r2, #16
 8005ad8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005adc:	4311      	orrs	r1, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6952      	ldr	r2, [r2, #20]
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	0612      	lsls	r2, r2, #24
 8005ae6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005aea:	430a      	orrs	r2, r1
 8005aec:	4924      	ldr	r1, [pc, #144]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005af2:	4b23      	ldr	r3, [pc, #140]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af6:	f023 020c 	bic.w	r2, r3, #12
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	4920      	ldr	r1, [pc, #128]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005b04:	4b1e      	ldr	r3, [pc, #120]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	491c      	ldr	r1, [pc, #112]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b16:	4a1a      	ldr	r2, [pc, #104]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b18:	f023 0310 	bic.w	r3, r3, #16
 8005b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b1e:	4b18      	ldr	r3, [pc, #96]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	69d2      	ldr	r2, [r2, #28]
 8005b2e:	00d2      	lsls	r2, r2, #3
 8005b30:	4913      	ldr	r1, [pc, #76]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005b36:	4b12      	ldr	r3, [pc, #72]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	4a11      	ldr	r2, [pc, #68]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b3c:	f043 0310 	orr.w	r3, r3, #16
 8005b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005b42:	4b0f      	ldr	r3, [pc, #60]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a0e      	ldr	r2, [pc, #56]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b4c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b4e:	f7fb f8c1 	bl	8000cd4 <HAL_GetTick>
 8005b52:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b54:	e008      	b.n	8005b68 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b56:	f7fb f8bd 	bl	8000cd4 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e006      	b.n	8005b76 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <RCCEx_PLL2_Config+0x128>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0

}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	46020c00 	.word	0x46020c00
 8005b84:	80800000 	.word	0x80800000

08005b88 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005b90:	4b47      	ldr	r3, [pc, #284]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a46      	ldr	r2, [pc, #280]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b9c:	f7fb f89a 	bl	8000cd4 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ba2:	e008      	b.n	8005bb6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ba4:	f7fb f896 	bl	8000cd4 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e077      	b.n	8005ca6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6811      	ldr	r1, [r2, #0]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6852      	ldr	r2, [r2, #4]
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	0212      	lsls	r2, r2, #8
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	4934      	ldr	r1, [pc, #208]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	630b      	str	r3, [r1, #48]	@ 0x30
 8005be2:	4b33      	ldr	r3, [pc, #204]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005be6:	4b33      	ldr	r3, [pc, #204]	@ (8005cb4 <RCCEx_PLL3_Config+0x12c>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6892      	ldr	r2, [r2, #8]
 8005bee:	3a01      	subs	r2, #1
 8005bf0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68d2      	ldr	r2, [r2, #12]
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	0252      	lsls	r2, r2, #9
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	4311      	orrs	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6912      	ldr	r2, [r2, #16]
 8005c04:	3a01      	subs	r2, #1
 8005c06:	0412      	lsls	r2, r2, #16
 8005c08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005c0c:	4311      	orrs	r1, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6952      	ldr	r2, [r2, #20]
 8005c12:	3a01      	subs	r2, #1
 8005c14:	0612      	lsls	r2, r2, #24
 8005c16:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	4924      	ldr	r1, [pc, #144]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005c22:	4b23      	ldr	r3, [pc, #140]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c26:	f023 020c 	bic.w	r2, r3, #12
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	4920      	ldr	r1, [pc, #128]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005c34:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	491c      	ldr	r1, [pc, #112]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005c42:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c46:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c48:	f023 0310 	bic.w	r3, r3, #16
 8005c4c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c4e:	4b18      	ldr	r3, [pc, #96]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	69d2      	ldr	r2, [r2, #28]
 8005c5e:	00d2      	lsls	r2, r2, #3
 8005c60:	4913      	ldr	r1, [pc, #76]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005c66:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c6c:	f043 0310 	orr.w	r3, r3, #16
 8005c70:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005c72:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c7e:	f7fb f829 	bl	8000cd4 <HAL_GetTick>
 8005c82:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c84:	e008      	b.n	8005c98 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c86:	f7fb f825 	bl	8000cd4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e006      	b.n	8005ca6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <RCCEx_PLL3_Config+0x128>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	46020c00 	.word	0x46020c00
 8005cb4:	80800000 	.word	0x80800000

08005cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e042      	b.n	8005d50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fa fe33 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2224      	movs	r2, #36	@ 0x24
 8005ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fd60 	bl	80067c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fbbb 	bl	8006484 <UART_SetConfig>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e01b      	b.n	8005d50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fddf 	bl	800690c <UART_CheckIdleState>
 8005d4e:	4603      	mov	r3, r0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	@ 0x28
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	f040 808b 	bne.w	8005e8a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_UART_Transmit+0x28>
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e083      	b.n	8005e8c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	2b80      	cmp	r3, #128	@ 0x80
 8005d90:	d107      	bne.n	8005da2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2221      	movs	r2, #33	@ 0x21
 8005dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005db2:	f7fa ff8f 	bl	8000cd4 <HAL_GetTick>
 8005db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	88fa      	ldrh	r2, [r7, #6]
 8005dbc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd0:	d108      	bne.n	8005de4 <HAL_UART_Transmit+0x8c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e003      	b.n	8005dec <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dec:	e030      	b.n	8005e50 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2200      	movs	r2, #0
 8005df6:	2180      	movs	r1, #128	@ 0x80
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fe31 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e03d      	b.n	8005e8c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	e007      	b.n	8005e3e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1c8      	bne.n	8005dee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2200      	movs	r2, #0
 8005e64:	2140      	movs	r1, #64	@ 0x40
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fdfa 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e006      	b.n	8005e8c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b0ae      	sub	sp, #184	@ 0xb8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ebe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11b      	bne.n	8005f08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005edc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d009      	beq.n	8005f08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8297 	beq.w	800642c <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
      }
      return;
 8005f06:	e291      	b.n	800642c <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80fd 	beq.w	800610c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f16:	4b7a      	ldr	r3, [pc, #488]	@ (8006100 <HAL_UART_IRQHandler+0x26c>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f22:	4b78      	ldr	r3, [pc, #480]	@ (8006104 <HAL_UART_IRQHandler+0x270>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80f0 	beq.w	800610c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d011      	beq.n	8005f5c <HAL_UART_IRQHandler+0xc8>
 8005f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	f043 0201 	orr.w	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d011      	beq.n	8005f8c <HAL_UART_IRQHandler+0xf8>
 8005f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f82:	f043 0204 	orr.w	r2, r3, #4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d011      	beq.n	8005fbc <HAL_UART_IRQHandler+0x128>
 8005f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb2:	f043 0202 	orr.w	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d017      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005fd8:	4b49      	ldr	r3, [pc, #292]	@ (8006100 <HAL_UART_IRQHandler+0x26c>)
 8005fda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006000:	2b00      	cmp	r3, #0
 8006002:	d012      	beq.n	800602a <HAL_UART_IRQHandler+0x196>
 8006004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006008:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 81fd 	beq.w	8006430 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d013      	beq.n	800606a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006042:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800604e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b40      	cmp	r3, #64	@ 0x40
 8006080:	d005      	beq.n	800608e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006086:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800608a:	2b00      	cmp	r3, #0
 800608c:	d02e      	beq.n	80060ec <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fd53 	bl	8006b3a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609e:	2b40      	cmp	r3, #64	@ 0x40
 80060a0:	d120      	bne.n	80060e4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d017      	beq.n	80060dc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b2:	4a15      	ldr	r2, [pc, #84]	@ (8006108 <HAL_UART_IRQHandler+0x274>)
 80060b4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fb fc11 	bl	80018e4 <HAL_DMA_Abort_IT>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d019      	beq.n	80060fc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80060d6:	4610      	mov	r0, r2
 80060d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060da:	e00f      	b.n	80060fc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f9bb 	bl	8006458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e2:	e00b      	b.n	80060fc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f9b7 	bl	8006458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ea:	e007      	b.n	80060fc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f9b3 	bl	8006458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80060fa:	e199      	b.n	8006430 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fc:	bf00      	nop
    return;
 80060fe:	e197      	b.n	8006430 <HAL_UART_IRQHandler+0x59c>
 8006100:	10000001 	.word	0x10000001
 8006104:	04000120 	.word	0x04000120
 8006108:	08006c07 	.word	0x08006c07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 8142 	bne.w	800639a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 813b 	beq.w	800639a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8134 	beq.w	800639a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2210      	movs	r2, #16
 8006138:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006144:	2b40      	cmp	r3, #64	@ 0x40
 8006146:	f040 80aa 	bne.w	800629e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006154:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8006158:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8084 	beq.w	800626a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006168:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800616c:	429a      	cmp	r2, r3
 800616e:	d27c      	bcs.n	800626a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006176:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006182:	2b81      	cmp	r3, #129	@ 0x81
 8006184:	d060      	beq.n	8006248 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006194:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800619a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061ac:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e2      	bne.n	8006186 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80061e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e3      	bne.n	80061c0 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006216:	f023 0310 	bic.w	r3, r3, #16
 800621a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006228:	65bb      	str	r3, [r7, #88]	@ 0x58
 800622a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800622e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e4      	bne.n	8006206 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006242:	4618      	mov	r0, r3
 8006244:	f7fb fad2 	bl	80017ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800625a:	b29b      	uxth	r3, r3
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	b29b      	uxth	r3, r3
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f902 	bl	800646c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006268:	e0e4      	b.n	8006434 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006270:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006274:	429a      	cmp	r2, r3
 8006276:	f040 80dd 	bne.w	8006434 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006282:	2b81      	cmp	r3, #129	@ 0x81
 8006284:	f040 80d6 	bne.w	8006434 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f8e8 	bl	800646c <HAL_UARTEx_RxEventCallback>
      return;
 800629c:	e0ca      	b.n	8006434 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80bc 	beq.w	8006438 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 80062c0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80b7 	beq.w	8006438 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e4      	bne.n	80062ca <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3308      	adds	r3, #8
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	623b      	str	r3, [r7, #32]
   return(result);
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006328:	633a      	str	r2, [r7, #48]	@ 0x30
 800632a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800632e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e1      	bne.n	8006300 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	60fb      	str	r3, [r7, #12]
   return(result);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 0310 	bic.w	r3, r3, #16
 8006364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	69b9      	ldr	r1, [r7, #24]
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	617b      	str	r3, [r7, #20]
   return(result);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e4      	bne.n	8006350 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800638c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f86a 	bl	800646c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006398:	e04e      	b.n	8006438 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800639a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800639e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d014      	beq.n	80063d0 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80063a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d105      	bne.n	80063be <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80063b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d03a      	beq.n	800643c <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
    }
    return;
 80063ce:	e035      	b.n	800643c <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <HAL_UART_IRQHandler+0x55c>
 80063dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fc1e 	bl	8006c2a <UART_EndTransmit_IT>
    return;
 80063ee:	e026      	b.n	800643e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <HAL_UART_IRQHandler+0x57c>
 80063fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006400:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fc43 	bl	8006c94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800640e:	e016      	b.n	800643e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006410:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d010      	beq.n	800643e <HAL_UART_IRQHandler+0x5aa>
 800641c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006420:	2b00      	cmp	r3, #0
 8006422:	da0c      	bge.n	800643e <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fc2b 	bl	8006c80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800642a:	e008      	b.n	800643e <HAL_UART_IRQHandler+0x5aa>
      return;
 800642c:	bf00      	nop
 800642e:	e006      	b.n	800643e <HAL_UART_IRQHandler+0x5aa>
    return;
 8006430:	bf00      	nop
 8006432:	e004      	b.n	800643e <HAL_UART_IRQHandler+0x5aa>
      return;
 8006434:	bf00      	nop
 8006436:	e002      	b.n	800643e <HAL_UART_IRQHandler+0x5aa>
      return;
 8006438:	bf00      	nop
 800643a:	e000      	b.n	800643e <HAL_UART_IRQHandler+0x5aa>
    return;
 800643c:	bf00      	nop
  }
}
 800643e:	37b8      	adds	r7, #184	@ 0xb8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006488:	b094      	sub	sp, #80	@ 0x50
 800648a:	af00      	add	r7, sp, #0
 800648c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b7e      	ldr	r3, [pc, #504]	@ (8006694 <UART_SetConfig+0x210>)
 800649a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4977      	ldr	r1, [pc, #476]	@ (8006698 <UART_SetConfig+0x214>)
 80064bc:	4019      	ands	r1, r3
 80064be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d4:	68d9      	ldr	r1, [r3, #12]
 80064d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	ea40 0301 	orr.w	r3, r0, r1
 80064de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006694 <UART_SetConfig+0x210>)
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d009      	beq.n	8006504 <UART_SetConfig+0x80>
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b69      	ldr	r3, [pc, #420]	@ (800669c <UART_SetConfig+0x218>)
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d004      	beq.n	8006504 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fc:	6a1a      	ldr	r2, [r3, #32]
 80064fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006500:	4313      	orrs	r3, r2
 8006502:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800650e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006518:	430b      	orrs	r3, r1
 800651a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	f023 000f 	bic.w	r0, r3, #15
 8006526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006528:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800652a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	ea40 0301 	orr.w	r3, r0, r1
 8006532:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b59      	ldr	r3, [pc, #356]	@ (80066a0 <UART_SetConfig+0x21c>)
 800653a:	429a      	cmp	r2, r3
 800653c:	d102      	bne.n	8006544 <UART_SetConfig+0xc0>
 800653e:	2301      	movs	r3, #1
 8006540:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006542:	e029      	b.n	8006598 <UART_SetConfig+0x114>
 8006544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b56      	ldr	r3, [pc, #344]	@ (80066a4 <UART_SetConfig+0x220>)
 800654a:	429a      	cmp	r2, r3
 800654c:	d102      	bne.n	8006554 <UART_SetConfig+0xd0>
 800654e:	2302      	movs	r3, #2
 8006550:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006552:	e021      	b.n	8006598 <UART_SetConfig+0x114>
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	4b53      	ldr	r3, [pc, #332]	@ (80066a8 <UART_SetConfig+0x224>)
 800655a:	429a      	cmp	r2, r3
 800655c:	d102      	bne.n	8006564 <UART_SetConfig+0xe0>
 800655e:	2304      	movs	r3, #4
 8006560:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006562:	e019      	b.n	8006598 <UART_SetConfig+0x114>
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b50      	ldr	r3, [pc, #320]	@ (80066ac <UART_SetConfig+0x228>)
 800656a:	429a      	cmp	r2, r3
 800656c:	d102      	bne.n	8006574 <UART_SetConfig+0xf0>
 800656e:	2308      	movs	r3, #8
 8006570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006572:	e011      	b.n	8006598 <UART_SetConfig+0x114>
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4b4d      	ldr	r3, [pc, #308]	@ (80066b0 <UART_SetConfig+0x22c>)
 800657a:	429a      	cmp	r2, r3
 800657c:	d102      	bne.n	8006584 <UART_SetConfig+0x100>
 800657e:	2310      	movs	r3, #16
 8006580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006582:	e009      	b.n	8006598 <UART_SetConfig+0x114>
 8006584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	4b42      	ldr	r3, [pc, #264]	@ (8006694 <UART_SetConfig+0x210>)
 800658a:	429a      	cmp	r2, r3
 800658c:	d102      	bne.n	8006594 <UART_SetConfig+0x110>
 800658e:	2320      	movs	r3, #32
 8006590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006592:	e001      	b.n	8006598 <UART_SetConfig+0x114>
 8006594:	2300      	movs	r3, #0
 8006596:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b3d      	ldr	r3, [pc, #244]	@ (8006694 <UART_SetConfig+0x210>)
 800659e:	429a      	cmp	r2, r3
 80065a0:	d005      	beq.n	80065ae <UART_SetConfig+0x12a>
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b3d      	ldr	r3, [pc, #244]	@ (800669c <UART_SetConfig+0x218>)
 80065a8:	429a      	cmp	r2, r3
 80065aa:	f040 8085 	bne.w	80066b8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80065ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b0:	2200      	movs	r2, #0
 80065b2:	623b      	str	r3, [r7, #32]
 80065b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80065b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80065ba:	f7fe f897 	bl	80046ec <HAL_RCCEx_GetPeriphCLKFreq>
 80065be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80065c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80e8 	beq.w	8006798 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	4a39      	ldr	r2, [pc, #228]	@ (80066b4 <UART_SetConfig+0x230>)
 80065ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80065da:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d305      	bcc.n	80065f8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d903      	bls.n	8006600 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80065fe:	e048      	b.n	8006692 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006602:	2200      	movs	r2, #0
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	61fa      	str	r2, [r7, #28]
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	4a29      	ldr	r2, [pc, #164]	@ (80066b4 <UART_SetConfig+0x230>)
 800660e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006612:	b29b      	uxth	r3, r3
 8006614:	2200      	movs	r2, #0
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	617a      	str	r2, [r7, #20]
 800661a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800661e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006622:	f7f9 fe29 	bl	8000278 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4610      	mov	r0, r2
 800662c:	4619      	mov	r1, r3
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	020b      	lsls	r3, r1, #8
 8006638:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800663c:	0202      	lsls	r2, r0, #8
 800663e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006640:	6849      	ldr	r1, [r1, #4]
 8006642:	0849      	lsrs	r1, r1, #1
 8006644:	2000      	movs	r0, #0
 8006646:	460c      	mov	r4, r1
 8006648:	4605      	mov	r5, r0
 800664a:	eb12 0804 	adds.w	r8, r2, r4
 800664e:	eb43 0905 	adc.w	r9, r3, r5
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	60fa      	str	r2, [r7, #12]
 800665c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006660:	4640      	mov	r0, r8
 8006662:	4649      	mov	r1, r9
 8006664:	f7f9 fe08 	bl	8000278 <__aeabi_uldivmod>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4613      	mov	r3, r2
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006676:	d308      	bcc.n	800668a <UART_SetConfig+0x206>
 8006678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800667e:	d204      	bcs.n	800668a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006686:	60da      	str	r2, [r3, #12]
 8006688:	e003      	b.n	8006692 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006690:	e082      	b.n	8006798 <UART_SetConfig+0x314>
 8006692:	e081      	b.n	8006798 <UART_SetConfig+0x314>
 8006694:	46002400 	.word	0x46002400
 8006698:	cfff69f3 	.word	0xcfff69f3
 800669c:	56002400 	.word	0x56002400
 80066a0:	40013800 	.word	0x40013800
 80066a4:	40004400 	.word	0x40004400
 80066a8:	40004800 	.word	0x40004800
 80066ac:	40004c00 	.word	0x40004c00
 80066b0:	40005000 	.word	0x40005000
 80066b4:	08006ff8 	.word	0x08006ff8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c0:	d13c      	bne.n	800673c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80066c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c4:	2200      	movs	r2, #0
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066ce:	f7fe f80d 	bl	80046ec <HAL_RCCEx_GetPeriphCLKFreq>
 80066d2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d05e      	beq.n	8006798 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	4a39      	ldr	r2, [pc, #228]	@ (80067c4 <UART_SetConfig+0x340>)
 80066e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e4:	461a      	mov	r2, r3
 80066e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ec:	005a      	lsls	r2, r3, #1
 80066ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	441a      	add	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006702:	2b0f      	cmp	r3, #15
 8006704:	d916      	bls.n	8006734 <UART_SetConfig+0x2b0>
 8006706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800670c:	d212      	bcs.n	8006734 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800670e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006710:	b29b      	uxth	r3, r3
 8006712:	f023 030f 	bic.w	r3, r3, #15
 8006716:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	b29b      	uxth	r3, r3
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	b29a      	uxth	r2, r3
 8006724:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006726:	4313      	orrs	r3, r2
 8006728:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800672a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006730:	60da      	str	r2, [r3, #12]
 8006732:	e031      	b.n	8006798 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800673a:	e02d      	b.n	8006798 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800673c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800673e:	2200      	movs	r2, #0
 8006740:	469a      	mov	sl, r3
 8006742:	4693      	mov	fp, r2
 8006744:	4650      	mov	r0, sl
 8006746:	4659      	mov	r1, fp
 8006748:	f7fd ffd0 	bl	80046ec <HAL_RCCEx_GetPeriphCLKFreq>
 800674c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800674e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d021      	beq.n	8006798 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	4a1a      	ldr	r2, [pc, #104]	@ (80067c4 <UART_SetConfig+0x340>)
 800675a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800675e:	461a      	mov	r2, r3
 8006760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006762:	fbb3 f2f2 	udiv	r2, r3, r2
 8006766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	441a      	add	r2, r3
 800676e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800677a:	2b0f      	cmp	r3, #15
 800677c:	d909      	bls.n	8006792 <UART_SetConfig+0x30e>
 800677e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006784:	d205      	bcs.n	8006792 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006788:	b29a      	uxth	r2, r3
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60da      	str	r2, [r3, #12]
 8006790:	e002      	b.n	8006798 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	2201      	movs	r2, #1
 800679c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067aa:	2200      	movs	r2, #0
 80067ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	2200      	movs	r2, #0
 80067b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3750      	adds	r7, #80	@ 0x50
 80067bc:	46bd      	mov	sp, r7
 80067be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c2:	bf00      	nop
 80067c4:	08006ff8 	.word	0x08006ff8

080067c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01a      	beq.n	80068de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068c6:	d10a      	bne.n	80068de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]
  }
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b098      	sub	sp, #96	@ 0x60
 8006910:	af02      	add	r7, sp, #8
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800691c:	f7fa f9da 	bl	8000cd4 <HAL_GetTick>
 8006920:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b08      	cmp	r3, #8
 800692e:	d12f      	bne.n	8006990 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006930:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006938:	2200      	movs	r2, #0
 800693a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f88e 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d022      	beq.n	8006990 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800695e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006968:	647b      	str	r3, [r7, #68]	@ 0x44
 800696a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800696e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e6      	bne.n	800694a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e063      	b.n	8006a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b04      	cmp	r3, #4
 800699c:	d149      	bne.n	8006a32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800699e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a6:	2200      	movs	r2, #0
 80069a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f857 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d03c      	beq.n	8006a32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	623b      	str	r3, [r7, #32]
   return(result);
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e6      	bne.n	80069b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a0a:	61fa      	str	r2, [r7, #28]
 8006a0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	69b9      	ldr	r1, [r7, #24]
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	617b      	str	r3, [r7, #20]
   return(result);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e5      	bne.n	80069ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e012      	b.n	8006a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3758      	adds	r7, #88	@ 0x58
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a70:	e04f      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d04b      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fa f92b 	bl	8000cd4 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e04e      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d037      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b80      	cmp	r3, #128	@ 0x80
 8006aa6:	d034      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b40      	cmp	r3, #64	@ 0x40
 8006aac:	d031      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d110      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f838 	bl	8006b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2208      	movs	r2, #8
 8006ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e029      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aec:	d111      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f81e 	bl	8006b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e00f      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d0a0      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b095      	sub	sp, #84	@ 0x54
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e3      	bne.n	8006b74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d118      	bne.n	8006be6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f023 0310 	bic.w	r3, r3, #16
 8006bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6979      	ldr	r1, [r7, #20]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	613b      	str	r3, [r7, #16]
   return(result);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e6      	bne.n	8006bb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006bfa:	bf00      	nop
 8006bfc:	3754      	adds	r7, #84	@ 0x54
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff fc1b 	bl	8006458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b088      	sub	sp, #32
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6979      	ldr	r1, [r7, #20]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fbe6 	bl	8006444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c78:	bf00      	nop
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_UARTEx_DisableFifoMode+0x16>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e027      	b.n	8006d0e <HAL_UARTEx_DisableFifoMode+0x66>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2224      	movs	r2, #36	@ 0x24
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0201 	bic.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006cec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e02d      	b.n	8006d8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2224      	movs	r2, #36	@ 0x24
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f850 	bl	8006e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e02d      	b.n	8006e0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2224      	movs	r2, #36	@ 0x24
 8006dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f812 	bl	8006e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d108      	bne.n	8006e36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e34:	e031      	b.n	8006e9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e36:	2308      	movs	r3, #8
 8006e38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	0e5b      	lsrs	r3, r3, #25
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	0f5b      	lsrs	r3, r3, #29
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	7b3a      	ldrb	r2, [r7, #12]
 8006e62:	4911      	ldr	r1, [pc, #68]	@ (8006ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8006e64:	5c8a      	ldrb	r2, [r1, r2]
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e6a:	7b3a      	ldrb	r2, [r7, #12]
 8006e6c:	490f      	ldr	r1, [pc, #60]	@ (8006eac <UARTEx_SetNbDataToProcess+0x98>)
 8006e6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	7b7a      	ldrb	r2, [r7, #13]
 8006e80:	4909      	ldr	r1, [pc, #36]	@ (8006ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8006e82:	5c8a      	ldrb	r2, [r1, r2]
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e88:	7b7a      	ldrb	r2, [r7, #13]
 8006e8a:	4908      	ldr	r1, [pc, #32]	@ (8006eac <UARTEx_SetNbDataToProcess+0x98>)
 8006e8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	08007010 	.word	0x08007010
 8006eac:	08007018 	.word	0x08007018

08006eb0 <memset>:
 8006eb0:	4402      	add	r2, r0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d100      	bne.n	8006eba <memset+0xa>
 8006eb8:	4770      	bx	lr
 8006eba:	f803 1b01 	strb.w	r1, [r3], #1
 8006ebe:	e7f9      	b.n	8006eb4 <memset+0x4>

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ef8 <__libc_init_array+0x38>)
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	4c0d      	ldr	r4, [pc, #52]	@ (8006efc <__libc_init_array+0x3c>)
 8006ec8:	1b64      	subs	r4, r4, r5
 8006eca:	10a4      	asrs	r4, r4, #2
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8006f00 <__libc_init_array+0x40>)
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	4c0b      	ldr	r4, [pc, #44]	@ (8006f04 <__libc_init_array+0x44>)
 8006ed6:	f000 f817 	bl	8006f08 <_init>
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	3601      	adds	r6, #1
 8006eea:	4798      	blx	r3
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	3601      	adds	r6, #1
 8006ef4:	4798      	blx	r3
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08007028 	.word	0x08007028
 8006efc:	08007028 	.word	0x08007028
 8006f00:	08007028 	.word	0x08007028
 8006f04:	0800702c 	.word	0x0800702c

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
